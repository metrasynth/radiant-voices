/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { FilterProBehavior } from "./filterProBehavior"
import { FilterProControllers } from "./filterProControllers"
import { FilterProControllerValues } from "./filterProControllerValues"
export namespace FilterPro {
  // Intentionally duplicated enums - see also filterProEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Type {
    // noinspection JSUnusedGlobalSymbols
    Lp = 0,
    Hp = 1,
    BpConstSkirtGain = 2,
    BpConstPeakGain = 3,
    Notch = 4,
    AllPass = 5,
    Peaking = 6,
    LowShelf = 7,
    HighShelf = 8,
  }
  export enum RollOff {
    // noinspection JSUnusedGlobalSymbols
    Db_12 = 0,
    Db_24 = 1,
    Db_36 = 2,
    Db_48 = 3,
  }
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Stereo = 0,
    Mono = 1,
  }
  export enum LfoWaveform {
    // noinspection JSUnusedGlobalSymbols
    Sin = 0,
    Saw = 1,
    Saw2 = 2,
    Square = 3,
    Random = 4,
  }
  export enum LfoFreqUnit {
    // noinspection JSUnusedGlobalSymbols
    Hz_0_02 = 0,
    Ms = 1,
    Hz = 2,
    Tick = 3,
    Line = 4,
    Line_2 = 5,
    Line_3 = 6,
  }
  interface FilterProControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    type: ControllerMidiMap
    freqHz: ControllerMidiMap
    freqFinetune: ControllerMidiMap
    freqScale: ControllerMidiMap
    exponentialFreq: ControllerMidiMap
    q: ControllerMidiMap
    gain: ControllerMidiMap
    rollOff: ControllerMidiMap
    response: ControllerMidiMap
    mode: ControllerMidiMap
    mix: ControllerMidiMap
    lfoFreq: ControllerMidiMap
    lfoAmp: ControllerMidiMap
    lfoWaveform: ControllerMidiMap
    setLfoPhase: ControllerMidiMap
    lfoFreqUnit: ControllerMidiMap
  }
  interface FilterProOptionValues extends OptionValues {}
  class FilterProOptions implements Options {
    constructor(readonly optionValues: FilterProOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Filter Pro"
    flags = 1105
    readonly typeName = "Filter Pro"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.type = val
      },
      (val: number) => {
        this.controllerValues.freqHz = val
      },
      (val: number) => {
        this.controllerValues.freqFinetune = val
      },
      (val: number) => {
        this.controllerValues.freqScale = val
      },
      (val: number) => {
        this.controllerValues.exponentialFreq = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.q = val
      },
      (val: number) => {
        this.controllerValues.gain = val
      },
      (val: number) => {
        this.controllerValues.rollOff = val
      },
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.mix = val
      },
      (val: number) => {
        this.controllerValues.lfoFreq = val
      },
      (val: number) => {
        this.controllerValues.lfoAmp = val
      },
      (val: number) => {
        this.controllerValues.lfoWaveform = val
      },
      (val: number) => {
        this.controllerValues.setLfoPhase = val
      },
      (val: number) => {
        this.controllerValues.lfoFreqUnit = val
      },
    ]
    readonly controllerValues: FilterProControllerValues = {
      volume: 32768,
      type: Type.Lp,
      freqHz: 22000,
      freqFinetune: 0,
      freqScale: 100,
      exponentialFreq: false,
      q: 16384,
      gain: 0,
      rollOff: RollOff.Db_12,
      response: 250,
      mode: Mode.Stereo,
      mix: 32768,
      lfoFreq: 8,
      lfoAmp: 0,
      lfoWaveform: LfoWaveform.Sin,
      setLfoPhase: 0,
      lfoFreqUnit: LfoFreqUnit.Hz_0_02,
    }
    readonly controllers: FilterProControllers = new FilterProControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: FilterProControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      type: new ControllerMidiMap(),
      freqHz: new ControllerMidiMap(),
      freqFinetune: new ControllerMidiMap(),
      freqScale: new ControllerMidiMap(),
      exponentialFreq: new ControllerMidiMap(),
      q: new ControllerMidiMap(),
      gain: new ControllerMidiMap(),
      rollOff: new ControllerMidiMap(),
      response: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      mix: new ControllerMidiMap(),
      lfoFreq: new ControllerMidiMap(),
      lfoAmp: new ControllerMidiMap(),
      lfoWaveform: new ControllerMidiMap(),
      setLfoPhase: new ControllerMidiMap(),
      lfoFreqUnit: new ControllerMidiMap(),
    }
    readonly optionValues: FilterProOptionValues = {}
    readonly options: FilterProOptions = new FilterProOptions(this.optionValues)
    readonly o = this.options
    behavior?: FilterProBehavior
    constructor() {
      super()
      this.behavior = new FilterProBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.type
      yield cv.freqHz
      yield cv.freqFinetune
      yield cv.freqScale
      yield Number(cv.exponentialFreq)
      yield cv.q
      yield cv.gain
      yield cv.rollOff
      yield cv.response
      yield cv.mode
      yield cv.mix
      yield cv.lfoFreq
      yield cv.lfoAmp
      yield cv.lfoWaveform
      yield cv.setLfoPhase
      yield cv.lfoFreqUnit
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.type = midiMaps[1]
      this.midiMaps.freqHz = midiMaps[2]
      this.midiMaps.freqFinetune = midiMaps[3]
      this.midiMaps.freqScale = midiMaps[4]
      this.midiMaps.exponentialFreq = midiMaps[5]
      this.midiMaps.q = midiMaps[6]
      this.midiMaps.gain = midiMaps[7]
      this.midiMaps.rollOff = midiMaps[8]
      this.midiMaps.response = midiMaps[9]
      this.midiMaps.mode = midiMaps[10]
      this.midiMaps.mix = midiMaps[11]
      this.midiMaps.lfoFreq = midiMaps[12]
      this.midiMaps.lfoAmp = midiMaps[13]
      this.midiMaps.lfoWaveform = midiMaps[14]
      this.midiMaps.setLfoPhase = midiMaps[15]
      this.midiMaps.lfoFreqUnit = midiMaps[16]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.type)
      a.push(this.midiMaps.freqHz)
      a.push(this.midiMaps.freqFinetune)
      a.push(this.midiMaps.freqScale)
      a.push(this.midiMaps.exponentialFreq)
      a.push(this.midiMaps.q)
      a.push(this.midiMaps.gain)
      a.push(this.midiMaps.rollOff)
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.mix)
      a.push(this.midiMaps.lfoFreq)
      a.push(this.midiMaps.lfoAmp)
      a.push(this.midiMaps.lfoWaveform)
      a.push(this.midiMaps.setLfoPhase)
      a.push(this.midiMaps.lfoFreqUnit)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
