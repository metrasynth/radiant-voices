/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { FmxControllerValues } from "./fmxControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { SampleRate } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Channels } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { InputCustomWaveform } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { AdsrSmoothTransitions } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { AdsrCurve } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Sustain } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Waveform } from "./fmxEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { ModulationType } from "./fmxEnums"
export class FmxBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: FmxControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get panning(): number {
    return this.controllerValues.panning
  }
  // noinspection JSUnusedGlobalSymbols
  set panning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.panning = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get sampleRate(): SampleRate {
    return this.controllerValues.sampleRate
  }
  // noinspection JSUnusedGlobalSymbols
  set sampleRate(newValue: SampleRate) {
    const { controllerValues } = this
    controllerValues.sampleRate = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get polyphony(): number {
    return this.controllerValues.polyphony
  }
  // noinspection JSUnusedGlobalSymbols
  set polyphony(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 32)
    controllerValues.polyphony = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get channels(): Channels {
    return this.controllerValues.channels
  }
  // noinspection JSUnusedGlobalSymbols
  set channels(newValue: Channels) {
    const { controllerValues } = this
    controllerValues.channels = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get inputToOperator(): number {
    return this.controllerValues.inputToOperator
  }
  // noinspection JSUnusedGlobalSymbols
  set inputToOperator(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 5)
    controllerValues.inputToOperator = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get inputToCustomWaveform(): InputCustomWaveform {
    return this.controllerValues.inputToCustomWaveform
  }
  // noinspection JSUnusedGlobalSymbols
  set inputToCustomWaveform(newValue: InputCustomWaveform) {
    const { controllerValues } = this
    controllerValues.inputToCustomWaveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get adsrSmoothTransitions(): AdsrSmoothTransitions {
    return this.controllerValues.adsrSmoothTransitions
  }
  // noinspection JSUnusedGlobalSymbols
  set adsrSmoothTransitions(newValue: AdsrSmoothTransitions) {
    const { controllerValues } = this
    controllerValues.adsrSmoothTransitions = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get noiseFilter(): number {
    return this.controllerValues.noiseFilter
  }
  // noinspection JSUnusedGlobalSymbols
  set noiseFilter(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.noiseFilter = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Volume(): number {
    return this.controllerValues.op1Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Volume(): number {
    return this.controllerValues.op2Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Volume(): number {
    return this.controllerValues.op3Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Volume(): number {
    return this.controllerValues.op4Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Volume(): number {
    return this.controllerValues.op5Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Attack(): number {
    return this.controllerValues.op1Attack
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op1Attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Attack(): number {
    return this.controllerValues.op2Attack
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op2Attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Attack(): number {
    return this.controllerValues.op3Attack
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op3Attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Attack(): number {
    return this.controllerValues.op4Attack
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op4Attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Attack(): number {
    return this.controllerValues.op5Attack
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op5Attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Decay(): number {
    return this.controllerValues.op1Decay
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Decay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op1Decay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Decay(): number {
    return this.controllerValues.op2Decay
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Decay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op2Decay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Decay(): number {
    return this.controllerValues.op3Decay
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Decay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op3Decay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Decay(): number {
    return this.controllerValues.op4Decay
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Decay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op4Decay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Decay(): number {
    return this.controllerValues.op5Decay
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Decay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op5Decay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1SustainLevel(): number {
    return this.controllerValues.op1SustainLevel
  }
  // noinspection JSUnusedGlobalSymbols
  set op1SustainLevel(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1SustainLevel = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2SustainLevel(): number {
    return this.controllerValues.op2SustainLevel
  }
  // noinspection JSUnusedGlobalSymbols
  set op2SustainLevel(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2SustainLevel = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3SustainLevel(): number {
    return this.controllerValues.op3SustainLevel
  }
  // noinspection JSUnusedGlobalSymbols
  set op3SustainLevel(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3SustainLevel = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4SustainLevel(): number {
    return this.controllerValues.op4SustainLevel
  }
  // noinspection JSUnusedGlobalSymbols
  set op4SustainLevel(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4SustainLevel = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5SustainLevel(): number {
    return this.controllerValues.op5SustainLevel
  }
  // noinspection JSUnusedGlobalSymbols
  set op5SustainLevel(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5SustainLevel = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Release(): number {
    return this.controllerValues.op1Release
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op1Release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Release(): number {
    return this.controllerValues.op2Release
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op2Release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Release(): number {
    return this.controllerValues.op3Release
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op3Release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Release(): number {
    return this.controllerValues.op4Release
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op4Release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Release(): number {
    return this.controllerValues.op5Release
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.op5Release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1AttackCurve(): AdsrCurve {
    return this.controllerValues.op1AttackCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op1AttackCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op1AttackCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2AttackCurve(): AdsrCurve {
    return this.controllerValues.op2AttackCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op2AttackCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op2AttackCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3AttackCurve(): AdsrCurve {
    return this.controllerValues.op3AttackCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op3AttackCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op3AttackCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4AttackCurve(): AdsrCurve {
    return this.controllerValues.op4AttackCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op4AttackCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op4AttackCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5AttackCurve(): AdsrCurve {
    return this.controllerValues.op5AttackCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op5AttackCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op5AttackCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1DecayCurve(): AdsrCurve {
    return this.controllerValues.op1DecayCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op1DecayCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op1DecayCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2DecayCurve(): AdsrCurve {
    return this.controllerValues.op2DecayCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op2DecayCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op2DecayCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3DecayCurve(): AdsrCurve {
    return this.controllerValues.op3DecayCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op3DecayCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op3DecayCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4DecayCurve(): AdsrCurve {
    return this.controllerValues.op4DecayCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op4DecayCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op4DecayCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5DecayCurve(): AdsrCurve {
    return this.controllerValues.op5DecayCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op5DecayCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op5DecayCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1ReleaseCurve(): AdsrCurve {
    return this.controllerValues.op1ReleaseCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op1ReleaseCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op1ReleaseCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2ReleaseCurve(): AdsrCurve {
    return this.controllerValues.op2ReleaseCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op2ReleaseCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op2ReleaseCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3ReleaseCurve(): AdsrCurve {
    return this.controllerValues.op3ReleaseCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op3ReleaseCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op3ReleaseCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4ReleaseCurve(): AdsrCurve {
    return this.controllerValues.op4ReleaseCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op4ReleaseCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op4ReleaseCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5ReleaseCurve(): AdsrCurve {
    return this.controllerValues.op5ReleaseCurve
  }
  // noinspection JSUnusedGlobalSymbols
  set op5ReleaseCurve(newValue: AdsrCurve) {
    const { controllerValues } = this
    controllerValues.op5ReleaseCurve = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Sustain(): Sustain {
    return this.controllerValues.op1Sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Sustain(newValue: Sustain) {
    const { controllerValues } = this
    controllerValues.op1Sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Sustain(): Sustain {
    return this.controllerValues.op2Sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Sustain(newValue: Sustain) {
    const { controllerValues } = this
    controllerValues.op2Sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Sustain(): Sustain {
    return this.controllerValues.op3Sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Sustain(newValue: Sustain) {
    const { controllerValues } = this
    controllerValues.op3Sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Sustain(): Sustain {
    return this.controllerValues.op4Sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Sustain(newValue: Sustain) {
    const { controllerValues } = this
    controllerValues.op4Sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Sustain(): Sustain {
    return this.controllerValues.op5Sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Sustain(newValue: Sustain) {
    const { controllerValues } = this
    controllerValues.op5Sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1SustainPedal(): boolean {
    return this.controllerValues.op1SustainPedal
  }
  // noinspection JSUnusedGlobalSymbols
  set op1SustainPedal(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.op1SustainPedal = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2SustainPedal(): boolean {
    return this.controllerValues.op2SustainPedal
  }
  // noinspection JSUnusedGlobalSymbols
  set op2SustainPedal(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.op2SustainPedal = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3SustainPedal(): boolean {
    return this.controllerValues.op3SustainPedal
  }
  // noinspection JSUnusedGlobalSymbols
  set op3SustainPedal(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.op3SustainPedal = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4SustainPedal(): boolean {
    return this.controllerValues.op4SustainPedal
  }
  // noinspection JSUnusedGlobalSymbols
  set op4SustainPedal(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.op4SustainPedal = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5SustainPedal(): boolean {
    return this.controllerValues.op5SustainPedal
  }
  // noinspection JSUnusedGlobalSymbols
  set op5SustainPedal(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.op5SustainPedal = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1EnvelopeScalingPerKey(): number {
    return this.controllerValues.op1EnvelopeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op1EnvelopeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op1EnvelopeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op2EnvelopeScalingPerKey(): number {
    return this.controllerValues.op2EnvelopeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op2EnvelopeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op2EnvelopeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op3EnvelopeScalingPerKey(): number {
    return this.controllerValues.op3EnvelopeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op3EnvelopeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op3EnvelopeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op4EnvelopeScalingPerKey(): number {
    return this.controllerValues.op4EnvelopeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op4EnvelopeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op4EnvelopeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op5EnvelopeScalingPerKey(): number {
    return this.controllerValues.op5EnvelopeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op5EnvelopeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op5EnvelopeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op1VolumeScalingPerKey(): number {
    return this.controllerValues.op1VolumeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op1VolumeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op1VolumeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op2VolumeScalingPerKey(): number {
    return this.controllerValues.op2VolumeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op2VolumeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op2VolumeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op3VolumeScalingPerKey(): number {
    return this.controllerValues.op3VolumeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op3VolumeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op3VolumeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op4VolumeScalingPerKey(): number {
    return this.controllerValues.op4VolumeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op4VolumeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op4VolumeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op5VolumeScalingPerKey(): number {
    return this.controllerValues.op5VolumeScalingPerKey + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op5VolumeScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op5VolumeScalingPerKey = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op1VelocitySensitivity(): number {
    return this.controllerValues.op1VelocitySensitivity + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op1VelocitySensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op1VelocitySensitivity = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op2VelocitySensitivity(): number {
    return this.controllerValues.op2VelocitySensitivity + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op2VelocitySensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op2VelocitySensitivity = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op3VelocitySensitivity(): number {
    return this.controllerValues.op3VelocitySensitivity + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op3VelocitySensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op3VelocitySensitivity = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op4VelocitySensitivity(): number {
    return this.controllerValues.op4VelocitySensitivity + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op4VelocitySensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op4VelocitySensitivity = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op5VelocitySensitivity(): number {
    return this.controllerValues.op5VelocitySensitivity + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set op5VelocitySensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.op5VelocitySensitivity = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Waveform(): Waveform {
    return this.controllerValues.op1Waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.op1Waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Waveform(): Waveform {
    return this.controllerValues.op2Waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.op2Waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Waveform(): Waveform {
    return this.controllerValues.op3Waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.op3Waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Waveform(): Waveform {
    return this.controllerValues.op4Waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.op4Waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Waveform(): Waveform {
    return this.controllerValues.op5Waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.op5Waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Noise(): number {
    return this.controllerValues.op1Noise
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1Noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Noise(): number {
    return this.controllerValues.op2Noise
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2Noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Noise(): number {
    return this.controllerValues.op3Noise
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3Noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Noise(): number {
    return this.controllerValues.op4Noise
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4Noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Noise(): number {
    return this.controllerValues.op5Noise
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5Noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Phase(): number {
    return this.controllerValues.op1Phase
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Phase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1Phase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Phase(): number {
    return this.controllerValues.op2Phase
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Phase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2Phase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Phase(): number {
    return this.controllerValues.op3Phase
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Phase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3Phase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Phase(): number {
    return this.controllerValues.op4Phase
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Phase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4Phase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Phase(): number {
    return this.controllerValues.op5Phase
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Phase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5Phase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1FreqMultiply(): number {
    return this.controllerValues.op1FreqMultiply
  }
  // noinspection JSUnusedGlobalSymbols
  set op1FreqMultiply(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32000)
    controllerValues.op1FreqMultiply = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2FreqMultiply(): number {
    return this.controllerValues.op2FreqMultiply
  }
  // noinspection JSUnusedGlobalSymbols
  set op2FreqMultiply(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32000)
    controllerValues.op2FreqMultiply = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3FreqMultiply(): number {
    return this.controllerValues.op3FreqMultiply
  }
  // noinspection JSUnusedGlobalSymbols
  set op3FreqMultiply(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32000)
    controllerValues.op3FreqMultiply = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4FreqMultiply(): number {
    return this.controllerValues.op4FreqMultiply
  }
  // noinspection JSUnusedGlobalSymbols
  set op4FreqMultiply(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32000)
    controllerValues.op4FreqMultiply = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5FreqMultiply(): number {
    return this.controllerValues.op5FreqMultiply
  }
  // noinspection JSUnusedGlobalSymbols
  set op5FreqMultiply(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32000)
    controllerValues.op5FreqMultiply = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1ConstantPitch(): number {
    return this.controllerValues.op1ConstantPitch + -8192
  }
  // noinspection JSUnusedGlobalSymbols
  set op1ConstantPitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -8192), 8192)
    controllerValues.op1ConstantPitch = newValue - -8192
  }
  // noinspection JSUnusedGlobalSymbols
  get op2ConstantPitch(): number {
    return this.controllerValues.op2ConstantPitch + -8192
  }
  // noinspection JSUnusedGlobalSymbols
  set op2ConstantPitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -8192), 8192)
    controllerValues.op2ConstantPitch = newValue - -8192
  }
  // noinspection JSUnusedGlobalSymbols
  get op3ConstantPitch(): number {
    return this.controllerValues.op3ConstantPitch + -8192
  }
  // noinspection JSUnusedGlobalSymbols
  set op3ConstantPitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -8192), 8192)
    controllerValues.op3ConstantPitch = newValue - -8192
  }
  // noinspection JSUnusedGlobalSymbols
  get op4ConstantPitch(): number {
    return this.controllerValues.op4ConstantPitch + -8192
  }
  // noinspection JSUnusedGlobalSymbols
  set op4ConstantPitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -8192), 8192)
    controllerValues.op4ConstantPitch = newValue - -8192
  }
  // noinspection JSUnusedGlobalSymbols
  get op5ConstantPitch(): number {
    return this.controllerValues.op5ConstantPitch + -8192
  }
  // noinspection JSUnusedGlobalSymbols
  set op5ConstantPitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -8192), 8192)
    controllerValues.op5ConstantPitch = newValue - -8192
  }
  // noinspection JSUnusedGlobalSymbols
  get op1SelfModulation(): number {
    return this.controllerValues.op1SelfModulation
  }
  // noinspection JSUnusedGlobalSymbols
  set op1SelfModulation(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1SelfModulation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2SelfModulation(): number {
    return this.controllerValues.op2SelfModulation
  }
  // noinspection JSUnusedGlobalSymbols
  set op2SelfModulation(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2SelfModulation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3SelfModulation(): number {
    return this.controllerValues.op3SelfModulation
  }
  // noinspection JSUnusedGlobalSymbols
  set op3SelfModulation(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3SelfModulation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4SelfModulation(): number {
    return this.controllerValues.op4SelfModulation
  }
  // noinspection JSUnusedGlobalSymbols
  set op4SelfModulation(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4SelfModulation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5SelfModulation(): number {
    return this.controllerValues.op5SelfModulation
  }
  // noinspection JSUnusedGlobalSymbols
  set op5SelfModulation(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5SelfModulation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1Feedback(): number {
    return this.controllerValues.op1Feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set op1Feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op1Feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2Feedback(): number {
    return this.controllerValues.op2Feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set op2Feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op2Feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3Feedback(): number {
    return this.controllerValues.op3Feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set op3Feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op3Feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4Feedback(): number {
    return this.controllerValues.op4Feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set op4Feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op4Feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5Feedback(): number {
    return this.controllerValues.op5Feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set op5Feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.op5Feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1ModulationType(): ModulationType {
    return this.controllerValues.op1ModulationType
  }
  // noinspection JSUnusedGlobalSymbols
  set op1ModulationType(newValue: ModulationType) {
    const { controllerValues } = this
    controllerValues.op1ModulationType = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2ModulationType(): ModulationType {
    return this.controllerValues.op2ModulationType
  }
  // noinspection JSUnusedGlobalSymbols
  set op2ModulationType(newValue: ModulationType) {
    const { controllerValues } = this
    controllerValues.op2ModulationType = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3ModulationType(): ModulationType {
    return this.controllerValues.op3ModulationType
  }
  // noinspection JSUnusedGlobalSymbols
  set op3ModulationType(newValue: ModulationType) {
    const { controllerValues } = this
    controllerValues.op3ModulationType = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4ModulationType(): ModulationType {
    return this.controllerValues.op4ModulationType
  }
  // noinspection JSUnusedGlobalSymbols
  set op4ModulationType(newValue: ModulationType) {
    const { controllerValues } = this
    controllerValues.op4ModulationType = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op5ModulationType(): ModulationType {
    return this.controllerValues.op5ModulationType
  }
  // noinspection JSUnusedGlobalSymbols
  set op5ModulationType(newValue: ModulationType) {
    const { controllerValues } = this
    controllerValues.op5ModulationType = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op1OutputMode(): number {
    return this.controllerValues.op1OutputMode
  }
  // noinspection JSUnusedGlobalSymbols
  set op1OutputMode(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 31)
    controllerValues.op1OutputMode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op2OutputMode(): number {
    return this.controllerValues.op2OutputMode
  }
  // noinspection JSUnusedGlobalSymbols
  set op2OutputMode(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 15)
    controllerValues.op2OutputMode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op3OutputMode(): number {
    return this.controllerValues.op3OutputMode
  }
  // noinspection JSUnusedGlobalSymbols
  set op3OutputMode(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 7)
    controllerValues.op3OutputMode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get op4OutputMode(): number {
    return this.controllerValues.op4OutputMode
  }
  // noinspection JSUnusedGlobalSymbols
  set op4OutputMode(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 3)
    controllerValues.op4OutputMode = newValue
  }
}
