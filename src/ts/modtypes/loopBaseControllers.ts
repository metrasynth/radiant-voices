/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { LoopControllerValues } from "./loopControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Channels } from "./loopEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./loopEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { LengthUnit } from "./loopEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { OnNoteOn } from "./loopEnums"
export class LoopBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: LoopControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get length(): number {
    return this.controllerValues.length
  }
  // noinspection JSUnusedGlobalSymbols
  set length(newValue: number) {
    const { controllerValues } = this
    switch (this.controllerValues.lengthUnit) {
      case LengthUnit.LineDiv_128:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
      case LengthUnit.Line:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case LengthUnit.LineDiv_2:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case LengthUnit.LineDiv_3:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case LengthUnit.Tick:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case LengthUnit.Ms:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case LengthUnit.Hz:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
    }
    controllerValues.length = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get channels(): Channels {
    return this.controllerValues.channels
  }
  // noinspection JSUnusedGlobalSymbols
  set channels(newValue: Channels) {
    const { controllerValues } = this
    controllerValues.channels = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get repeats(): number {
    return this.controllerValues.repeats
  }
  // noinspection JSUnusedGlobalSymbols
  set repeats(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 128)
    controllerValues.repeats = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lengthUnit(): LengthUnit {
    return this.controllerValues.lengthUnit
  }
  // noinspection JSUnusedGlobalSymbols
  set lengthUnit(newValue: LengthUnit) {
    const { controllerValues } = this
    controllerValues.lengthUnit = newValue
    this.length = this.length
  }
  // noinspection JSUnusedGlobalSymbols
  get maxBufferSize(): number {
    return this.controllerValues.maxBufferSize
  }
  // noinspection JSUnusedGlobalSymbols
  set maxBufferSize(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 240)
    controllerValues.maxBufferSize = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get onNoteOn(): OnNoteOn {
    return this.controllerValues.onNoteOn
  }
  // noinspection JSUnusedGlobalSymbols
  set onNoteOn(newValue: OnNoteOn) {
    const { controllerValues } = this
    controllerValues.onNoteOn = newValue
  }
}
