/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { AmplifierControllerValues } from "./amplifierControllerValues"
export class AmplifierBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: AmplifierControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 1024)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get balance(): number {
    return this.controllerValues.balance + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set balance(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.balance = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get dcOffset(): number {
    return this.controllerValues.dcOffset + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set dcOffset(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.dcOffset = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get inverse(): boolean {
    return this.controllerValues.inverse
  }
  // noinspection JSUnusedGlobalSymbols
  set inverse(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.inverse = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get stereoWidth(): number {
    return this.controllerValues.stereoWidth
  }
  // noinspection JSUnusedGlobalSymbols
  set stereoWidth(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.stereoWidth = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get absolute(): boolean {
    return this.controllerValues.absolute
  }
  // noinspection JSUnusedGlobalSymbols
  set absolute(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.absolute = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fineVolume(): number {
    return this.controllerValues.fineVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set fineVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.fineVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get gain(): number {
    return this.controllerValues.gain
  }
  // noinspection JSUnusedGlobalSymbols
  set gain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 5000)
    controllerValues.gain = newValue
  }
}
