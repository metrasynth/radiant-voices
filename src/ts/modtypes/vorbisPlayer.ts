/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { VorbisPlayerBehavior } from "./vorbisPlayerBehavior"
export namespace VorbisPlayer {
  interface VorbisPlayerControllerValues extends ControllerValues {
    volume: number
    originalSpeed: boolean
    finetune: number
    transpose: number
    interpolation: boolean
    polyphonyCh: number
    repeat: boolean
  }
  class VorbisPlayerControllers implements Controllers {
    constructor(readonly controllerValues: VorbisPlayerControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get volume(): number {
      return this.controllerValues.volume
    }
    // noinspection JSUnusedGlobalSymbols
    set volume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.volume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get originalSpeed(): boolean {
      return this.controllerValues.originalSpeed
    }
    // noinspection JSUnusedGlobalSymbols
    set originalSpeed(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.originalSpeed = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get finetune(): number {
      return this.controllerValues.finetune
    }
    // noinspection JSUnusedGlobalSymbols
    set finetune(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, -128), 128)
      controllerValues.finetune = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get transpose(): number {
      return this.controllerValues.transpose + -128
    }
    // noinspection JSUnusedGlobalSymbols
    set transpose(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, -128), 128)
      controllerValues.transpose = newValue - -128
    }
    // noinspection JSUnusedGlobalSymbols
    get interpolation(): boolean {
      return this.controllerValues.interpolation
    }
    // noinspection JSUnusedGlobalSymbols
    set interpolation(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.interpolation = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get polyphonyCh(): number {
      return this.controllerValues.polyphonyCh
    }
    // noinspection JSUnusedGlobalSymbols
    set polyphonyCh(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 1), 4)
      controllerValues.polyphonyCh = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get repeat(): boolean {
      return this.controllerValues.repeat
    }
    // noinspection JSUnusedGlobalSymbols
    set repeat(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.repeat = newValue
    }
  }
  interface VorbisPlayerControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    originalSpeed: ControllerMidiMap
    finetune: ControllerMidiMap
    transpose: ControllerMidiMap
    interpolation: ControllerMidiMap
    polyphonyCh: ControllerMidiMap
    repeat: ControllerMidiMap
  }
  interface VorbisPlayerOptionValues extends OptionValues {}
  class VorbisPlayerOptions implements Options {
    constructor(readonly optionValues: VorbisPlayerOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Vorbis player"
    flags = 32841
    readonly typeName = "Vorbis player"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.originalSpeed = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.finetune = val
      },
      (val: number) => {
        this.controllerValues.transpose = val
      },
      (val: number) => {
        this.controllerValues.interpolation = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.polyphonyCh = val
      },
      (val: number) => {
        this.controllerValues.repeat = Boolean(val)
      },
    ]
    readonly controllerValues: VorbisPlayerControllerValues = {
      volume: 256,
      originalSpeed: true,
      finetune: 0,
      transpose: 0,
      interpolation: true,
      polyphonyCh: 1,
      repeat: false,
    }
    readonly controllers: VorbisPlayerControllers = new VorbisPlayerControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: VorbisPlayerControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      originalSpeed: new ControllerMidiMap(),
      finetune: new ControllerMidiMap(),
      transpose: new ControllerMidiMap(),
      interpolation: new ControllerMidiMap(),
      polyphonyCh: new ControllerMidiMap(),
      repeat: new ControllerMidiMap(),
    }
    readonly optionValues: VorbisPlayerOptionValues = {}
    readonly options: VorbisPlayerOptions = new VorbisPlayerOptions(this.optionValues)
    readonly o = this.options
    behavior?: VorbisPlayerBehavior
    constructor() {
      super()
      this.behavior = new VorbisPlayerBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield Number(cv.originalSpeed)
      yield cv.finetune
      yield cv.transpose
      yield Number(cv.interpolation)
      yield cv.polyphonyCh
      yield Number(cv.repeat)
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.originalSpeed = midiMaps[1]
      this.midiMaps.finetune = midiMaps[2]
      this.midiMaps.transpose = midiMaps[3]
      this.midiMaps.interpolation = midiMaps[4]
      this.midiMaps.polyphonyCh = midiMaps[5]
      this.midiMaps.repeat = midiMaps[6]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.originalSpeed)
      a.push(this.midiMaps.finetune)
      a.push(this.midiMaps.transpose)
      a.push(this.midiMaps.interpolation)
      a.push(this.midiMaps.polyphonyCh)
      a.push(this.midiMaps.repeat)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
