/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { GlideBehavior } from "./glideBehavior"
import { GlideControllers } from "./glideControllers"
import { GlideControllerValues } from "./glideControllerValues"
export namespace Glide {
  interface GlideControllerMidiMaps extends ControllerMidiMaps {
    response: ControllerMidiMap
    sampleRateHz: ControllerMidiMap
    resetOnFirstNote: ControllerMidiMap
    polyphony: ControllerMidiMap
    pitch: ControllerMidiMap
    pitchScale: ControllerMidiMap
    reset: ControllerMidiMap
  }
  interface GlideOptionValues extends OptionValues {}
  class GlideOptions implements Options {
    constructor(readonly optionValues: GlideOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Glide"
    flags = 135241
    readonly typeName = "Glide"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.sampleRateHz = val
      },
      (val: number) => {
        this.controllerValues.resetOnFirstNote = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.polyphony = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.pitch = val
      },
      (val: number) => {
        this.controllerValues.pitchScale = val
      },
      (val: number) => {
        this.controllerValues.reset = Boolean(val)
      },
    ]
    readonly controllerValues: GlideControllerValues = {
      response: 500,
      sampleRateHz: 150,
      resetOnFirstNote: false,
      polyphony: true,
      pitch: 0,
      pitchScale: 100,
      reset: false,
    }
    readonly controllers: GlideControllers = new GlideControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: GlideControllerMidiMaps = {
      response: new ControllerMidiMap(),
      sampleRateHz: new ControllerMidiMap(),
      resetOnFirstNote: new ControllerMidiMap(),
      polyphony: new ControllerMidiMap(),
      pitch: new ControllerMidiMap(),
      pitchScale: new ControllerMidiMap(),
      reset: new ControllerMidiMap(),
    }
    readonly optionValues: GlideOptionValues = {}
    readonly options: GlideOptions = new GlideOptions(this.optionValues)
    readonly o = this.options
    behavior?: GlideBehavior
    constructor() {
      super()
      this.behavior = new GlideBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.response
      yield cv.sampleRateHz
      yield Number(cv.resetOnFirstNote)
      yield Number(cv.polyphony)
      yield cv.pitch
      yield cv.pitchScale
      yield Number(cv.reset)
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.response = midiMaps[0]
      this.midiMaps.sampleRateHz = midiMaps[1]
      this.midiMaps.resetOnFirstNote = midiMaps[2]
      this.midiMaps.polyphony = midiMaps[3]
      this.midiMaps.pitch = midiMaps[4]
      this.midiMaps.pitchScale = midiMaps[5]
      this.midiMaps.reset = midiMaps[6]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.sampleRateHz)
      a.push(this.midiMaps.resetOnFirstNote)
      a.push(this.midiMaps.polyphony)
      a.push(this.midiMaps.pitch)
      a.push(this.midiMaps.pitchScale)
      a.push(this.midiMaps.reset)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
