/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { ReverbControllerValues } from "./reverbControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./reverbEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { AllPassFilter } from "./reverbEnums"
export class ReverbBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: ReverbControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get dry(): number {
    return this.controllerValues.dry
  }
  // noinspection JSUnusedGlobalSymbols
  set dry(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.dry = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get wet(): number {
    return this.controllerValues.wet
  }
  // noinspection JSUnusedGlobalSymbols
  set wet(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.wet = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get feedback(): number {
    return this.controllerValues.feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get damp(): number {
    return this.controllerValues.damp
  }
  // noinspection JSUnusedGlobalSymbols
  set damp(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.damp = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get stereoWidth(): number {
    return this.controllerValues.stereoWidth
  }
  // noinspection JSUnusedGlobalSymbols
  set stereoWidth(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.stereoWidth = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get freeze(): boolean {
    return this.controllerValues.freeze
  }
  // noinspection JSUnusedGlobalSymbols
  set freeze(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.freeze = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get allPassFilter(): AllPassFilter {
    return this.controllerValues.allPassFilter
  }
  // noinspection JSUnusedGlobalSymbols
  set allPassFilter(newValue: AllPassFilter) {
    const { controllerValues } = this
    controllerValues.allPassFilter = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get roomSize(): number {
    return this.controllerValues.roomSize
  }
  // noinspection JSUnusedGlobalSymbols
  set roomSize(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 128)
    controllerValues.roomSize = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get randomSeed(): number {
    return this.controllerValues.randomSeed
  }
  // noinspection JSUnusedGlobalSymbols
  set randomSeed(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.randomSeed = newValue
  }
}
