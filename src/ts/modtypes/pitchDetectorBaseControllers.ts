/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { PitchDetectorControllerValues } from "./pitchDetectorControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Algorithm } from "./pitchDetectorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { RollOff } from "./pitchDetectorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { SampleRate } from "./pitchDetectorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Buffer } from "./pitchDetectorEnums"
export class PitchDetectorBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: PitchDetectorControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get algorithm(): Algorithm {
    return this.controllerValues.algorithm
  }
  // noinspection JSUnusedGlobalSymbols
  set algorithm(newValue: Algorithm) {
    const { controllerValues } = this
    controllerValues.algorithm = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get threshold(): number {
    return this.controllerValues.threshold
  }
  // noinspection JSUnusedGlobalSymbols
  set threshold(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.threshold = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get gain(): number {
    return this.controllerValues.gain
  }
  // noinspection JSUnusedGlobalSymbols
  set gain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.gain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get microtones(): boolean {
    return this.controllerValues.microtones
  }
  // noinspection JSUnusedGlobalSymbols
  set microtones(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.microtones = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get detectorFinetune(): number {
    return this.controllerValues.detectorFinetune + -256
  }
  // noinspection JSUnusedGlobalSymbols
  set detectorFinetune(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -256), 256)
    controllerValues.detectorFinetune = newValue - -256
  }
  // noinspection JSUnusedGlobalSymbols
  get lpFilterFreq(): number {
    return this.controllerValues.lpFilterFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set lpFilterFreq(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 4000)
    controllerValues.lpFilterFreq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lpFilterRolloff(): RollOff {
    return this.controllerValues.lpFilterRolloff
  }
  // noinspection JSUnusedGlobalSymbols
  set lpFilterRolloff(newValue: RollOff) {
    const { controllerValues } = this
    controllerValues.lpFilterRolloff = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get alg_1_2SampleRate(): SampleRate {
    return this.controllerValues.alg_1_2SampleRate
  }
  // noinspection JSUnusedGlobalSymbols
  set alg_1_2SampleRate(newValue: SampleRate) {
    const { controllerValues } = this
    controllerValues.alg_1_2SampleRate = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get alg_1_2Buffer(): Buffer {
    return this.controllerValues.alg_1_2Buffer
  }
  // noinspection JSUnusedGlobalSymbols
  set alg_1_2Buffer(newValue: Buffer) {
    const { controllerValues } = this
    controllerValues.alg_1_2Buffer = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get alg_1_2BufferOverlap(): number {
    return this.controllerValues.alg_1_2BufferOverlap
  }
  // noinspection JSUnusedGlobalSymbols
  set alg_1_2BufferOverlap(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 100)
    controllerValues.alg_1_2BufferOverlap = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get alg_1Sensitivity(): number {
    return this.controllerValues.alg_1Sensitivity
  }
  // noinspection JSUnusedGlobalSymbols
  set alg_1Sensitivity(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 100)
    controllerValues.alg_1Sensitivity = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get recordNotes(): boolean {
    return this.controllerValues.recordNotes
  }
  // noinspection JSUnusedGlobalSymbols
  set recordNotes(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.recordNotes = newValue
  }
}
