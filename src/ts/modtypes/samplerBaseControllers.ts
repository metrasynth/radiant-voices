/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { SamplerControllerValues } from "./samplerControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { SampleInterpolation } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { EnvelopeInterpolation } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { VibratoType } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { LoopType } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Format } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Channels } from "./samplerEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { EnvelopeFlags } from "./samplerEnums"
export class SamplerBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: SamplerControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get panning(): number {
    return this.controllerValues.panning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set panning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.panning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get sampleInterpolation(): SampleInterpolation {
    return this.controllerValues.sampleInterpolation
  }
  // noinspection JSUnusedGlobalSymbols
  set sampleInterpolation(newValue: SampleInterpolation) {
    const { controllerValues } = this
    controllerValues.sampleInterpolation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get envelopeInterpolation(): EnvelopeInterpolation {
    return this.controllerValues.envelopeInterpolation
  }
  // noinspection JSUnusedGlobalSymbols
  set envelopeInterpolation(newValue: EnvelopeInterpolation) {
    const { controllerValues } = this
    controllerValues.envelopeInterpolation = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get polyphonyCh(): number {
    return this.controllerValues.polyphonyCh
  }
  // noinspection JSUnusedGlobalSymbols
  set polyphonyCh(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 32)
    controllerValues.polyphonyCh = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get recThreshold(): number {
    return this.controllerValues.recThreshold
  }
  // noinspection JSUnusedGlobalSymbols
  set recThreshold(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 10000)
    controllerValues.recThreshold = newValue
  }
}
