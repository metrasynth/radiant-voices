/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { WaveShaperBehavior } from "./waveShaperBehavior"
export namespace WaveShaper {
  export const enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Hq = 0,
    HqMono = 1,
    Lq = 2,
    LqMono = 3,
  }
  interface WaveShaperControllerValues extends ControllerValues {
    inputVolume: number
    mix: number
    outputVolume: number
    symmetric: boolean
    mode: Mode
    dcBlocker: boolean
  }
  class WaveShaperControllers implements Controllers {
    constructor(readonly controllerValues: WaveShaperControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get inputVolume(): number {
      return this.controllerValues.inputVolume
    }
    // noinspection JSUnusedGlobalSymbols
    set inputVolume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.inputVolume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mix(): number {
      return this.controllerValues.mix
    }
    // noinspection JSUnusedGlobalSymbols
    set mix(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.mix = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get outputVolume(): number {
      return this.controllerValues.outputVolume
    }
    // noinspection JSUnusedGlobalSymbols
    set outputVolume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.outputVolume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get symmetric(): boolean {
      return this.controllerValues.symmetric
    }
    // noinspection JSUnusedGlobalSymbols
    set symmetric(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.symmetric = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mode(): Mode {
      return this.controllerValues.mode
    }
    // noinspection JSUnusedGlobalSymbols
    set mode(newValue: Mode) {
      const { controllerValues } = this
      controllerValues.mode = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get dcBlocker(): boolean {
      return this.controllerValues.dcBlocker
    }
    // noinspection JSUnusedGlobalSymbols
    set dcBlocker(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.dcBlocker = newValue
    }
  }
  interface WaveShaperControllerMidiMaps extends ControllerMidiMaps {
    inputVolume: ControllerMidiMap
    mix: ControllerMidiMap
    outputVolume: ControllerMidiMap
    symmetric: ControllerMidiMap
    mode: ControllerMidiMap
    dcBlocker: ControllerMidiMap
  }
  interface WaveShaperOptionValues extends OptionValues {}
  class WaveShaperOptions implements Options {
    constructor(readonly optionValues: WaveShaperOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "WaveShaper"
    flags = 81
    readonly typeName = "WaveShaper"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.inputVolume = val
      },
      (val: number) => {
        this.controllerValues.mix = val
      },
      (val: number) => {
        this.controllerValues.outputVolume = val
      },
      (val: number) => {
        this.controllerValues.symmetric = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.dcBlocker = Boolean(val)
      },
    ]
    readonly controllerValues: WaveShaperControllerValues = {
      inputVolume: 256,
      mix: 256,
      outputVolume: 256,
      symmetric: true,
      mode: Mode.Hq,
      dcBlocker: true,
    }
    readonly controllers: WaveShaperControllers = new WaveShaperControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: WaveShaperControllerMidiMaps = {
      inputVolume: new ControllerMidiMap(),
      mix: new ControllerMidiMap(),
      outputVolume: new ControllerMidiMap(),
      symmetric: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      dcBlocker: new ControllerMidiMap(),
    }
    readonly optionValues: WaveShaperOptionValues = {}
    readonly options: WaveShaperOptions = new WaveShaperOptions(this.optionValues)
    readonly o = this.options
    behavior?: WaveShaperBehavior
    constructor() {
      super()
      this.behavior = new WaveShaperBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.inputVolume
      yield cv.mix
      yield cv.outputVolume
      yield Number(cv.symmetric)
      yield cv.mode
      yield Number(cv.dcBlocker)
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.inputVolume = midiMaps[0]
      this.midiMaps.mix = midiMaps[1]
      this.midiMaps.outputVolume = midiMaps[2]
      this.midiMaps.symmetric = midiMaps[3]
      this.midiMaps.mode = midiMaps[4]
      this.midiMaps.dcBlocker = midiMaps[5]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.inputVolume)
      a.push(this.midiMaps.mix)
      a.push(this.midiMaps.outputVolume)
      a.push(this.midiMaps.symmetric)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.dcBlocker)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
