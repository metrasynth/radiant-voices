/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { DistortionBehavior } from "./distortionBehavior"
export namespace Distortion {
  export const enum Type {
    // noinspection JSUnusedGlobalSymbols
    Lim = 0,
    Clipping = 0,
    Sat = 1,
    Foldback = 1,
    Foldback2 = 2,
    Foldback3 = 3,
    Overflow = 4,
  }
  interface DistortionControllerValues extends ControllerValues {
    volume: number
    type: Type
    power: number
    bitDepth: number
    freqHz: number
    noise: number
  }
  class DistortionControllers implements Controllers {
    constructor(readonly controllerValues: DistortionControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get volume(): number {
      return this.controllerValues.volume
    }
    // noinspection JSUnusedGlobalSymbols
    set volume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.volume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get type(): Type {
      return this.controllerValues.type
    }
    // noinspection JSUnusedGlobalSymbols
    set type(newValue: Type) {
      const { controllerValues } = this
      controllerValues.type = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get power(): number {
      return this.controllerValues.power
    }
    // noinspection JSUnusedGlobalSymbols
    set power(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.power = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get bitDepth(): number {
      return this.controllerValues.bitDepth
    }
    // noinspection JSUnusedGlobalSymbols
    set bitDepth(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 1), 16)
      controllerValues.bitDepth = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get freqHz(): number {
      return this.controllerValues.freqHz
    }
    // noinspection JSUnusedGlobalSymbols
    set freqHz(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 44100)
      controllerValues.freqHz = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get noise(): number {
      return this.controllerValues.noise
    }
    // noinspection JSUnusedGlobalSymbols
    set noise(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.noise = newValue
    }
  }
  interface DistortionControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    type: ControllerMidiMap
    power: ControllerMidiMap
    bitDepth: ControllerMidiMap
    freqHz: ControllerMidiMap
    noise: ControllerMidiMap
  }
  interface DistortionOptionValues extends OptionValues {}
  class DistortionOptions implements Options {
    constructor(readonly optionValues: DistortionOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Distortion"
    flags = 81
    readonly typeName = "Distortion"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.type = val
      },
      (val: number) => {
        this.controllerValues.power = val
      },
      (val: number) => {
        this.controllerValues.bitDepth = val
      },
      (val: number) => {
        this.controllerValues.freqHz = val
      },
      (val: number) => {
        this.controllerValues.noise = val
      },
    ]
    readonly controllerValues: DistortionControllerValues = {
      volume: 128,
      type: Type.Lim,
      power: 0,
      bitDepth: 16,
      freqHz: 44100,
      noise: 0,
    }
    readonly controllers: DistortionControllers = new DistortionControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: DistortionControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      type: new ControllerMidiMap(),
      power: new ControllerMidiMap(),
      bitDepth: new ControllerMidiMap(),
      freqHz: new ControllerMidiMap(),
      noise: new ControllerMidiMap(),
    }
    readonly optionValues: DistortionOptionValues = {}
    readonly options: DistortionOptions = new DistortionOptions(this.optionValues)
    readonly o = this.options
    behavior?: DistortionBehavior
    constructor() {
      super()
      this.behavior = new DistortionBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.type
      yield cv.power
      yield cv.bitDepth
      yield cv.freqHz
      yield cv.noise
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.type = midiMaps[1]
      this.midiMaps.power = midiMaps[2]
      this.midiMaps.bitDepth = midiMaps[3]
      this.midiMaps.freqHz = midiMaps[4]
      this.midiMaps.noise = midiMaps[5]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.type)
      a.push(this.midiMaps.power)
      a.push(this.midiMaps.bitDepth)
      a.push(this.midiMaps.freqHz)
      a.push(this.midiMaps.noise)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
