/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { DistortionBehavior } from "./distortionBehavior"
import { DistortionControllers } from "./distortionControllers"
import { DistortionControllerValues } from "./distortionControllerValues"
export namespace Distortion {
  // Intentionally duplicated enums - see also distortionEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Type {
    // noinspection JSUnusedGlobalSymbols
    Lim = 0,
    Clipping = 0,
    Sat = 1,
    Foldback = 1,
    Foldback2 = 2,
    Foldback3 = 3,
    Overflow = 4,
  }
  interface DistortionControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    type: ControllerMidiMap
    power: ControllerMidiMap
    bitDepth: ControllerMidiMap
    freqHz: ControllerMidiMap
    noise: ControllerMidiMap
  }
  interface DistortionOptionValues extends OptionValues {}
  class DistortionOptions implements Options {
    constructor(readonly optionValues: DistortionOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Distortion"
    flags = 81
    readonly typeName = "Distortion"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.type = val
      },
      (val: number) => {
        this.controllerValues.power = val
      },
      (val: number) => {
        this.controllerValues.bitDepth = val
      },
      (val: number) => {
        this.controllerValues.freqHz = val
      },
      (val: number) => {
        this.controllerValues.noise = val
      },
    ]
    readonly controllerValues: DistortionControllerValues = {
      volume: 128,
      type: Type.Lim,
      power: 0,
      bitDepth: 16,
      freqHz: 44100,
      noise: 0,
    }
    readonly controllers: DistortionControllers = new DistortionControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: DistortionControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      type: new ControllerMidiMap(),
      power: new ControllerMidiMap(),
      bitDepth: new ControllerMidiMap(),
      freqHz: new ControllerMidiMap(),
      noise: new ControllerMidiMap(),
    }
    readonly optionValues: DistortionOptionValues = {}
    readonly options: DistortionOptions = new DistortionOptions(this.optionValues)
    readonly o = this.options
    behavior?: DistortionBehavior
    constructor() {
      super()
      this.behavior = new DistortionBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.type
      yield cv.power
      yield cv.bitDepth
      yield cv.freqHz
      yield cv.noise
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.type = midiMaps[1]
      this.midiMaps.power = midiMaps[2]
      this.midiMaps.bitDepth = midiMaps[3]
      this.midiMaps.freqHz = midiMaps[4]
      this.midiMaps.noise = midiMaps[5]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.type)
      a.push(this.midiMaps.power)
      a.push(this.midiMaps.bitDepth)
      a.push(this.midiMaps.freqHz)
      a.push(this.midiMaps.noise)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
