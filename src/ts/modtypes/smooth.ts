/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { SmoothBehavior } from "./smoothBehavior"
import { SmoothControllers } from "./smoothControllers"
import { SmoothControllerValues } from "./smoothControllerValues"
export namespace Smooth {
  // Intentionally duplicated enums - see also smoothEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Linear = 0,
    LpFilter = 1,
  }
  export enum Channels {
    // noinspection JSUnusedGlobalSymbols
    Stereo = 0,
    Mono = 1,
  }
  export enum CtlNum {
    Rise = 1,
    Fall = 2,
    FallEqRise = 3,
    Scale = 4,
    Mode = 5,
    Channels = 6,
  }
  interface SmoothControllerMidiMaps extends ControllerMidiMaps {
    rise: ControllerMidiMap
    fall: ControllerMidiMap
    fallEqRise: ControllerMidiMap
    scale: ControllerMidiMap
    mode: ControllerMidiMap
    channels: ControllerMidiMap
  }
  interface SmoothOptionValues extends OptionValues {}
  class SmoothOptions implements Options {
    constructor(readonly optionValues: SmoothOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Smooth"
    flags = 0x51
    readonly typeName = "Smooth"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.rise = val
      },
      (val: number) => {
        this.controllerValues.fall = val
      },
      (val: number) => {
        this.controllerValues.fallEqRise = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.scale = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.channels = val
      },
    ]
    readonly controllerValues: SmoothControllerValues = {
      rise: 5000,
      fall: 5000,
      fallEqRise: false,
      scale: 100,
      mode: Mode.Linear,
      channels: Channels.Stereo,
    }
    readonly controllers: SmoothControllers = new SmoothControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: SmoothControllerMidiMaps = {
      rise: new ControllerMidiMap(),
      fall: new ControllerMidiMap(),
      fallEqRise: new ControllerMidiMap(),
      scale: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      channels: new ControllerMidiMap(),
    }
    readonly optionValues: SmoothOptionValues = {}
    readonly options: SmoothOptions = new SmoothOptions(this.optionValues)
    readonly o = this.options
    behavior?: SmoothBehavior
    constructor() {
      super()
      this.behavior = new SmoothBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.rise = value
          break
        case 2:
          cv.fall = value
          break
        case 3:
          cv.fallEqRise = Boolean(value)
          break
        case 4:
          cv.scale = value
          break
        case 5:
          cv.mode = value
          break
        case 6:
          cv.channels = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.rise
      yield cv.fall
      yield Number(cv.fallEqRise)
      yield cv.scale
      yield cv.mode
      yield cv.channels
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.rise = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.fall = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.fallEqRise = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.scale = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.mode = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.channels = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.rise)
      a.push(this.midiMaps.fall)
      a.push(this.midiMaps.fallEqRise)
      a.push(this.midiMaps.scale)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.channels)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
