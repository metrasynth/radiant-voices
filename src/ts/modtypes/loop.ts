/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { LoopBehavior } from "./loopBehavior"
import { LoopControllers } from "./loopControllers"
import { LoopControllerValues } from "./loopControllerValues"
export namespace Loop {
  // Intentionally duplicated enums - see also loopEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Channels {
    // noinspection JSUnusedGlobalSymbols
    Mono = 0,
    Stereo = 1,
  }
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Normal = 0,
    PingPong = 1,
  }
  export enum LengthUnit {
    // noinspection JSUnusedGlobalSymbols
    LineDiv_128 = 0,
    Line = 1,
    LineDiv_2 = 2,
    LineDiv_3 = 3,
    Tick = 4,
    Ms = 5,
    Hz = 6,
  }
  export enum OnNoteOn {
    // noinspection JSUnusedGlobalSymbols
    Restart = 0,
    RestartCurrentIteration = 1,
  }
  export enum CtlNum {
    Volume = 1,
    Length = 2,
    Channels = 3,
    Repeats = 4,
    Mode = 5,
    LengthUnit = 6,
    MaxBufferSize = 7,
    OnNoteOn = 8,
  }
  interface LoopControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    length: ControllerMidiMap
    channels: ControllerMidiMap
    repeats: ControllerMidiMap
    mode: ControllerMidiMap
    lengthUnit: ControllerMidiMap
    maxBufferSize: ControllerMidiMap
    onNoteOn: ControllerMidiMap
  }
  interface LoopOptionValues extends OptionValues {}
  class LoopOptions implements Options {
    constructor(readonly optionValues: LoopOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Loop"
    flags = 0x451
    readonly typeName = "Loop"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.length = val
      },
      (val: number) => {
        this.controllerValues.channels = val
      },
      (val: number) => {
        this.controllerValues.repeats = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.lengthUnit = val
      },
      (val: number) => {
        this.controllerValues.maxBufferSize = val
      },
      (val: number) => {
        this.controllerValues.onNoteOn = val
      },
    ]
    readonly controllerValues: LoopControllerValues = {
      volume: 256,
      length: 256,
      channels: Channels.Stereo,
      repeats: 0,
      mode: Mode.Normal,
      lengthUnit: LengthUnit.LineDiv_128,
      maxBufferSize: 4,
      onNoteOn: OnNoteOn.Restart,
    }
    readonly controllers: LoopControllers = new LoopControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: LoopControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      length: new ControllerMidiMap(),
      channels: new ControllerMidiMap(),
      repeats: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      lengthUnit: new ControllerMidiMap(),
      maxBufferSize: new ControllerMidiMap(),
      onNoteOn: new ControllerMidiMap(),
    }
    readonly optionValues: LoopOptionValues = {}
    readonly options: LoopOptions = new LoopOptions(this.optionValues)
    readonly o = this.options
    behavior?: LoopBehavior
    constructor() {
      super()
      this.behavior = new LoopBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.volume = value
          break
        case 2:
          cv.length = value
          break
        case 3:
          cv.channels = value
          break
        case 4:
          cv.repeats = value
          break
        case 5:
          cv.mode = value
          break
        case 6:
          cv.lengthUnit = value
          break
        case 7:
          cv.maxBufferSize = value
          break
        case 8:
          cv.onNoteOn = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.length
      yield cv.channels
      yield cv.repeats
      yield cv.mode
      yield cv.lengthUnit
      yield cv.maxBufferSize
      yield cv.onNoteOn
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.length = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.channels = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.repeats = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.mode = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.lengthUnit = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.maxBufferSize = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.onNoteOn = midiMaps[7] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.length)
      a.push(this.midiMaps.channels)
      a.push(this.midiMaps.repeats)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.lengthUnit)
      a.push(this.midiMaps.maxBufferSize)
      a.push(this.midiMaps.onNoteOn)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
