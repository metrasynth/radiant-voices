/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { LoopBehavior } from "./loopBehavior"
import { LoopControllers } from "./loopControllers"
import { LoopControllerValues } from "./loopControllerValues"
import { Channels as _Channels } from "./loopEnums"
import { Mode as _Mode } from "./loopEnums"
export namespace Loop {
  export const Channels = _Channels
  export const Mode = _Mode
  interface LoopControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    delay: ControllerMidiMap
    channels: ControllerMidiMap
    repeats: ControllerMidiMap
    mode: ControllerMidiMap
  }
  interface LoopOptionValues extends OptionValues {}
  class LoopOptions implements Options {
    constructor(readonly optionValues: LoopOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Loop"
    flags = 1105
    readonly typeName = "Loop"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.delay = val
      },
      (val: number) => {
        this.controllerValues.channels = val
      },
      (val: number) => {
        this.controllerValues.repeats = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
    ]
    readonly controllerValues: LoopControllerValues = {
      volume: 256,
      delay: 256,
      channels: Channels.Stereo,
      repeats: 0,
      mode: Mode.Normal,
    }
    readonly controllers: LoopControllers = new LoopControllers(this.controllerValues)
    readonly c = this.controllers
    readonly midiMaps: LoopControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      delay: new ControllerMidiMap(),
      channels: new ControllerMidiMap(),
      repeats: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
    }
    readonly optionValues: LoopOptionValues = {}
    readonly options: LoopOptions = new LoopOptions(this.optionValues)
    readonly o = this.options
    behavior?: LoopBehavior
    constructor() {
      super()
      this.behavior = new LoopBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.delay
      yield cv.channels
      yield cv.repeats
      yield cv.mode
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.delay = midiMaps[1]
      this.midiMaps.channels = midiMaps[2]
      this.midiMaps.repeats = midiMaps[3]
      this.midiMaps.mode = midiMaps[4]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.delay)
      a.push(this.midiMaps.channels)
      a.push(this.midiMaps.repeats)
      a.push(this.midiMaps.mode)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
