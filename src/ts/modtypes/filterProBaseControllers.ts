/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { FilterProControllerValues } from "./filterProControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Type } from "./filterProEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { RollOff } from "./filterProEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./filterProEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { LfoWaveform } from "./filterProEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { LfoFreqUnit } from "./filterProEnums"
export class FilterProBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: FilterProControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get type(): Type {
    return this.controllerValues.type
  }
  // noinspection JSUnusedGlobalSymbols
  set type(newValue: Type) {
    const { controllerValues } = this
    controllerValues.type = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get freq(): number {
    return this.controllerValues.freq
  }
  // noinspection JSUnusedGlobalSymbols
  set freq(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 22000)
    controllerValues.freq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get freqFinetune(): number {
    return this.controllerValues.freqFinetune + -1000
  }
  // noinspection JSUnusedGlobalSymbols
  set freqFinetune(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -1000), 1000)
    controllerValues.freqFinetune = newValue - -1000
  }
  // noinspection JSUnusedGlobalSymbols
  get freqScale(): number {
    return this.controllerValues.freqScale
  }
  // noinspection JSUnusedGlobalSymbols
  set freqScale(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 200)
    controllerValues.freqScale = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get exponentialFreq(): boolean {
    return this.controllerValues.exponentialFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set exponentialFreq(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.exponentialFreq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get q(): number {
    return this.controllerValues.q
  }
  // noinspection JSUnusedGlobalSymbols
  set q(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.q = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get gain(): number {
    return this.controllerValues.gain + -16384
  }
  // noinspection JSUnusedGlobalSymbols
  set gain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -16384), 16384)
    controllerValues.gain = newValue - -16384
  }
  // noinspection JSUnusedGlobalSymbols
  get rollOff(): RollOff {
    return this.controllerValues.rollOff
  }
  // noinspection JSUnusedGlobalSymbols
  set rollOff(newValue: RollOff) {
    const { controllerValues } = this
    controllerValues.rollOff = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get response(): number {
    return this.controllerValues.response
  }
  // noinspection JSUnusedGlobalSymbols
  set response(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 1000)
    controllerValues.response = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mix(): number {
    return this.controllerValues.mix
  }
  // noinspection JSUnusedGlobalSymbols
  set mix(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.mix = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lfoFreq(): number {
    return this.controllerValues.lfoFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set lfoFreq(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 1024)
    controllerValues.lfoFreq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lfoAmp(): number {
    return this.controllerValues.lfoAmp
  }
  // noinspection JSUnusedGlobalSymbols
  set lfoAmp(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.lfoAmp = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lfoWaveform(): LfoWaveform {
    return this.controllerValues.lfoWaveform
  }
  // noinspection JSUnusedGlobalSymbols
  set lfoWaveform(newValue: LfoWaveform) {
    const { controllerValues } = this
    controllerValues.lfoWaveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get setLfoPhase(): number {
    return this.controllerValues.setLfoPhase
  }
  // noinspection JSUnusedGlobalSymbols
  set setLfoPhase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.setLfoPhase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lfoFreqUnit(): LfoFreqUnit {
    return this.controllerValues.lfoFreqUnit
  }
  // noinspection JSUnusedGlobalSymbols
  set lfoFreqUnit(newValue: LfoFreqUnit) {
    const { controllerValues } = this
    controllerValues.lfoFreqUnit = newValue
  }
}
