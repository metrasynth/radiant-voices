/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers } from "./moduleType"
import { FmControllerValues } from "./fmControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./fmEnums"
export class FmBaseControllers implements Controllers {
  constructor(readonly controllerValues: FmControllerValues) {}
  // noinspection JSUnusedGlobalSymbols
  get cVolume(): number {
    return this.controllerValues.cVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set cVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.cVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mVolume(): number {
    return this.controllerValues.mVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set mVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.mVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get panning(): number {
    return this.controllerValues.panning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set panning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.panning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get cFreqRatio(): number {
    return this.controllerValues.cFreqRatio
  }
  // noinspection JSUnusedGlobalSymbols
  set cFreqRatio(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 16)
    controllerValues.cFreqRatio = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mFreqRatio(): number {
    return this.controllerValues.mFreqRatio
  }
  // noinspection JSUnusedGlobalSymbols
  set mFreqRatio(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 16)
    controllerValues.mFreqRatio = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mFeedback(): number {
    return this.controllerValues.mFeedback
  }
  // noinspection JSUnusedGlobalSymbols
  set mFeedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.mFeedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get cAttack(): number {
    return this.controllerValues.cAttack
  }
  // noinspection JSUnusedGlobalSymbols
  set cAttack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.cAttack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get cDecay(): number {
    return this.controllerValues.cDecay
  }
  // noinspection JSUnusedGlobalSymbols
  set cDecay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.cDecay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get cSustain(): number {
    return this.controllerValues.cSustain
  }
  // noinspection JSUnusedGlobalSymbols
  set cSustain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.cSustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get cRelease(): number {
    return this.controllerValues.cRelease
  }
  // noinspection JSUnusedGlobalSymbols
  set cRelease(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.cRelease = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mAttack(): number {
    return this.controllerValues.mAttack
  }
  // noinspection JSUnusedGlobalSymbols
  set mAttack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.mAttack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mDecay(): number {
    return this.controllerValues.mDecay
  }
  // noinspection JSUnusedGlobalSymbols
  set mDecay(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.mDecay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mSustain(): number {
    return this.controllerValues.mSustain
  }
  // noinspection JSUnusedGlobalSymbols
  set mSustain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.mSustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mRelease(): number {
    return this.controllerValues.mRelease
  }
  // noinspection JSUnusedGlobalSymbols
  set mRelease(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.mRelease = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mScalingPerKey(): number {
    return this.controllerValues.mScalingPerKey
  }
  // noinspection JSUnusedGlobalSymbols
  set mScalingPerKey(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 4)
    controllerValues.mScalingPerKey = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get polyphonyCh(): number {
    return this.controllerValues.polyphonyCh
  }
  // noinspection JSUnusedGlobalSymbols
  set polyphonyCh(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 16)
    controllerValues.polyphonyCh = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
}
