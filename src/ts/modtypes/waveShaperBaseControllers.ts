/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers } from "./moduleType"
import { WaveShaperControllerValues } from "./waveShaperControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./waveShaperEnums"
export class WaveShaperBaseControllers implements Controllers {
  constructor(readonly controllerValues: WaveShaperControllerValues) {}
  // noinspection JSUnusedGlobalSymbols
  get inputVolume(): number {
    return this.controllerValues.inputVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set inputVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.inputVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mix(): number {
    return this.controllerValues.mix
  }
  // noinspection JSUnusedGlobalSymbols
  set mix(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.mix = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get outputVolume(): number {
    return this.controllerValues.outputVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set outputVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.outputVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get symmetric(): boolean {
    return this.controllerValues.symmetric
  }
  // noinspection JSUnusedGlobalSymbols
  set symmetric(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.symmetric = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get dcBlocker(): boolean {
    return this.controllerValues.dcBlocker
  }
  // noinspection JSUnusedGlobalSymbols
  set dcBlocker(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.dcBlocker = newValue
  }
}
