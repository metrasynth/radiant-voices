/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { FmxBehavior } from "./fmxBehavior"
import { FmxControllers } from "./fmxControllers"
import { FmxControllerValues } from "./fmxControllerValues"
export namespace Fmx {
  // Intentionally duplicated enums - see also fmxEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum SampleRate {
    // noinspection JSUnusedGlobalSymbols
    _8000hz = 0,
    _11025hz = 1,
    _16000hz = 2,
    _22050hz = 3,
    _32000hz = 4,
    _44100hz = 5,
    Native = 6,
  }
  export enum Channels {
    // noinspection JSUnusedGlobalSymbols
    Mono = 0,
    Stereo = 1,
  }
  export enum InputCustomWaveform {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    SingleCycle = 1,
    Continuous = 2,
  }
  export enum AdsrSmoothTransitions {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    RestartAndVolumeChange = 1,
    RestartSmootherAndVolumeChange = 2,
    VolumeChange = 3,
  }
  export enum AdsrCurve {
    // noinspection JSUnusedGlobalSymbols
    Linear = 0,
    Exp1 = 1,
    Exp2 = 2,
    NegExp1 = 3,
    NegExp2 = 4,
    Sin = 5,
    Rect = 6,
    SmoothRect = 7,
    Bit2 = 8,
    Bit3 = 9,
    Bit4 = 10,
    Bit5 = 11,
  }
  export enum Sustain {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    On = 1,
    Repeat = 2,
  }
  export enum Waveform {
    // noinspection JSUnusedGlobalSymbols
    Custom = 0,
    Triangle = 1,
    TrianglePow_3 = 2,
    Saw = 3,
    SawPow_3 = 4,
    Square = 5,
    Sin = 6,
    Hsin = 7,
    Asin = 8,
    SinPow_3 = 9,
  }
  export enum ModulationType {
    // noinspection JSUnusedGlobalSymbols
    Phase = 0,
    Frequency = 1,
    AmplitudeMul = 2,
    Add = 3,
    Sub = 4,
    Min = 5,
    Max = 6,
    BitwiseAnd = 7,
    BitwiseXor = 8,
    PhasePlus = 9,
  }
  export enum Op1OutputMode {
    // noinspection JSUnusedGlobalSymbols
    None = 0,
    ToOutput = 1,
    To_5 = 2,
    ToOutput_5 = 3,
    To_4 = 4,
    ToOutput_4 = 5,
    To_5_4 = 6,
    ToOutput_5_4 = 7,
    To_3 = 8,
    ToOutput_3 = 9,
    To_5_3 = 10,
    ToOutput_5_3 = 11,
    To_4_3 = 12,
    ToOutput_4_3 = 13,
    To_5_4_3 = 14,
    ToOutput_5_4_3 = 15,
    To_2 = 16,
    ToOutput_2 = 17,
    To_5_2 = 18,
    ToOutput_5_2 = 19,
    To_4_2 = 20,
    ToOutput_4_2 = 21,
    To_5_4_2 = 22,
    ToOutput_5_4_2 = 23,
    To_3_2 = 24,
    ToOutput_3_2 = 25,
    To_5_3_2 = 26,
    ToOutput_5_3_2 = 27,
    To_4_3_2 = 28,
    ToOutput_4_3_2 = 29,
    To_5_4_3_2 = 30,
    ToOutput_5_4_3_2 = 31,
  }
  export enum Op2OutputMode {
    // noinspection JSUnusedGlobalSymbols
    None = 0,
    ToOutput = 1,
    To_5 = 2,
    ToOutput_5 = 3,
    To_4 = 4,
    ToOutput_4 = 5,
    To_5_4 = 6,
    ToOutput_5_4 = 7,
    To_3 = 8,
    ToOutput_3 = 9,
    To_5_3 = 10,
    ToOutput_5_3 = 11,
    To_4_3 = 12,
    ToOutput_4_3 = 13,
    To_5_4_3 = 14,
    ToOutput_5_4_3 = 15,
  }
  export enum Op3OutputMode {
    // noinspection JSUnusedGlobalSymbols
    None = 0,
    ToOutput = 1,
    To_5 = 2,
    ToOutput_5 = 3,
    To_4 = 4,
    ToOutput_4 = 5,
    To_5_4 = 6,
    ToOutput_5_4 = 7,
  }
  export enum Op4OutputMode {
    // noinspection JSUnusedGlobalSymbols
    None = 0,
    ToOutput = 1,
    To_5 = 2,
    ToOutput_5 = 3,
  }
  export enum CtlNum {
    Volume = 1,
    Panning = 2,
    SampleRate = 3,
    Polyphony = 4,
    Channels = 5,
    InputToOperator = 6,
    InputToCustomWaveform = 7,
    AdsrSmoothTransitions = 8,
    NoiseFilter = 9,
    Op1Volume = 10,
    Op2Volume = 11,
    Op3Volume = 12,
    Op4Volume = 13,
    Op5Volume = 14,
    Op1Attack = 15,
    Op2Attack = 16,
    Op3Attack = 17,
    Op4Attack = 18,
    Op5Attack = 19,
    Op1Decay = 20,
    Op2Decay = 21,
    Op3Decay = 22,
    Op4Decay = 23,
    Op5Decay = 24,
    Op1SustainLevel = 25,
    Op2SustainLevel = 26,
    Op3SustainLevel = 27,
    Op4SustainLevel = 28,
    Op5SustainLevel = 29,
    Op1Release = 30,
    Op2Release = 31,
    Op3Release = 32,
    Op4Release = 33,
    Op5Release = 34,
    Op1AttackCurve = 35,
    Op2AttackCurve = 36,
    Op3AttackCurve = 37,
    Op4AttackCurve = 38,
    Op5AttackCurve = 39,
    Op1DecayCurve = 40,
    Op2DecayCurve = 41,
    Op3DecayCurve = 42,
    Op4DecayCurve = 43,
    Op5DecayCurve = 44,
    Op1ReleaseCurve = 45,
    Op2ReleaseCurve = 46,
    Op3ReleaseCurve = 47,
    Op4ReleaseCurve = 48,
    Op5ReleaseCurve = 49,
    Op1Sustain = 50,
    Op2Sustain = 51,
    Op3Sustain = 52,
    Op4Sustain = 53,
    Op5Sustain = 54,
    Op1SustainPedal = 55,
    Op2SustainPedal = 56,
    Op3SustainPedal = 57,
    Op4SustainPedal = 58,
    Op5SustainPedal = 59,
    Op1EnvelopeScalingPerKey = 60,
    Op2EnvelopeScalingPerKey = 61,
    Op3EnvelopeScalingPerKey = 62,
    Op4EnvelopeScalingPerKey = 63,
    Op5EnvelopeScalingPerKey = 64,
    Op1VolumeScalingPerKey = 65,
    Op2VolumeScalingPerKey = 66,
    Op3VolumeScalingPerKey = 67,
    Op4VolumeScalingPerKey = 68,
    Op5VolumeScalingPerKey = 69,
    Op1VelocitySensitivity = 70,
    Op2VelocitySensitivity = 71,
    Op3VelocitySensitivity = 72,
    Op4VelocitySensitivity = 73,
    Op5VelocitySensitivity = 74,
    Op1Waveform = 75,
    Op2Waveform = 76,
    Op3Waveform = 77,
    Op4Waveform = 78,
    Op5Waveform = 79,
    Op1Noise = 80,
    Op2Noise = 81,
    Op3Noise = 82,
    Op4Noise = 83,
    Op5Noise = 84,
    Op1Phase = 85,
    Op2Phase = 86,
    Op3Phase = 87,
    Op4Phase = 88,
    Op5Phase = 89,
    Op1FreqMultiply = 90,
    Op2FreqMultiply = 91,
    Op3FreqMultiply = 92,
    Op4FreqMultiply = 93,
    Op5FreqMultiply = 94,
    Op1ConstantPitch = 95,
    Op2ConstantPitch = 96,
    Op3ConstantPitch = 97,
    Op4ConstantPitch = 98,
    Op5ConstantPitch = 99,
    Op1SelfModulation = 100,
    Op2SelfModulation = 101,
    Op3SelfModulation = 102,
    Op4SelfModulation = 103,
    Op5SelfModulation = 104,
    Op1Feedback = 105,
    Op2Feedback = 106,
    Op3Feedback = 107,
    Op4Feedback = 108,
    Op5Feedback = 109,
    Op1ModulationType = 110,
    Op2ModulationType = 111,
    Op3ModulationType = 112,
    Op4ModulationType = 113,
    Op5ModulationType = 114,
    Op1OutputMode = 115,
    Op2OutputMode = 116,
    Op3OutputMode = 117,
    Op4OutputMode = 118,
    EnvelopeGain = 119,
  }
  interface FmxControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    panning: ControllerMidiMap
    sampleRate: ControllerMidiMap
    polyphony: ControllerMidiMap
    channels: ControllerMidiMap
    inputToOperator: ControllerMidiMap
    inputToCustomWaveform: ControllerMidiMap
    adsrSmoothTransitions: ControllerMidiMap
    noiseFilter: ControllerMidiMap
    op1Volume: ControllerMidiMap
    op2Volume: ControllerMidiMap
    op3Volume: ControllerMidiMap
    op4Volume: ControllerMidiMap
    op5Volume: ControllerMidiMap
    op1Attack: ControllerMidiMap
    op2Attack: ControllerMidiMap
    op3Attack: ControllerMidiMap
    op4Attack: ControllerMidiMap
    op5Attack: ControllerMidiMap
    op1Decay: ControllerMidiMap
    op2Decay: ControllerMidiMap
    op3Decay: ControllerMidiMap
    op4Decay: ControllerMidiMap
    op5Decay: ControllerMidiMap
    op1SustainLevel: ControllerMidiMap
    op2SustainLevel: ControllerMidiMap
    op3SustainLevel: ControllerMidiMap
    op4SustainLevel: ControllerMidiMap
    op5SustainLevel: ControllerMidiMap
    op1Release: ControllerMidiMap
    op2Release: ControllerMidiMap
    op3Release: ControllerMidiMap
    op4Release: ControllerMidiMap
    op5Release: ControllerMidiMap
    op1AttackCurve: ControllerMidiMap
    op2AttackCurve: ControllerMidiMap
    op3AttackCurve: ControllerMidiMap
    op4AttackCurve: ControllerMidiMap
    op5AttackCurve: ControllerMidiMap
    op1DecayCurve: ControllerMidiMap
    op2DecayCurve: ControllerMidiMap
    op3DecayCurve: ControllerMidiMap
    op4DecayCurve: ControllerMidiMap
    op5DecayCurve: ControllerMidiMap
    op1ReleaseCurve: ControllerMidiMap
    op2ReleaseCurve: ControllerMidiMap
    op3ReleaseCurve: ControllerMidiMap
    op4ReleaseCurve: ControllerMidiMap
    op5ReleaseCurve: ControllerMidiMap
    op1Sustain: ControllerMidiMap
    op2Sustain: ControllerMidiMap
    op3Sustain: ControllerMidiMap
    op4Sustain: ControllerMidiMap
    op5Sustain: ControllerMidiMap
    op1SustainPedal: ControllerMidiMap
    op2SustainPedal: ControllerMidiMap
    op3SustainPedal: ControllerMidiMap
    op4SustainPedal: ControllerMidiMap
    op5SustainPedal: ControllerMidiMap
    op1EnvelopeScalingPerKey: ControllerMidiMap
    op2EnvelopeScalingPerKey: ControllerMidiMap
    op3EnvelopeScalingPerKey: ControllerMidiMap
    op4EnvelopeScalingPerKey: ControllerMidiMap
    op5EnvelopeScalingPerKey: ControllerMidiMap
    op1VolumeScalingPerKey: ControllerMidiMap
    op2VolumeScalingPerKey: ControllerMidiMap
    op3VolumeScalingPerKey: ControllerMidiMap
    op4VolumeScalingPerKey: ControllerMidiMap
    op5VolumeScalingPerKey: ControllerMidiMap
    op1VelocitySensitivity: ControllerMidiMap
    op2VelocitySensitivity: ControllerMidiMap
    op3VelocitySensitivity: ControllerMidiMap
    op4VelocitySensitivity: ControllerMidiMap
    op5VelocitySensitivity: ControllerMidiMap
    op1Waveform: ControllerMidiMap
    op2Waveform: ControllerMidiMap
    op3Waveform: ControllerMidiMap
    op4Waveform: ControllerMidiMap
    op5Waveform: ControllerMidiMap
    op1Noise: ControllerMidiMap
    op2Noise: ControllerMidiMap
    op3Noise: ControllerMidiMap
    op4Noise: ControllerMidiMap
    op5Noise: ControllerMidiMap
    op1Phase: ControllerMidiMap
    op2Phase: ControllerMidiMap
    op3Phase: ControllerMidiMap
    op4Phase: ControllerMidiMap
    op5Phase: ControllerMidiMap
    op1FreqMultiply: ControllerMidiMap
    op2FreqMultiply: ControllerMidiMap
    op3FreqMultiply: ControllerMidiMap
    op4FreqMultiply: ControllerMidiMap
    op5FreqMultiply: ControllerMidiMap
    op1ConstantPitch: ControllerMidiMap
    op2ConstantPitch: ControllerMidiMap
    op3ConstantPitch: ControllerMidiMap
    op4ConstantPitch: ControllerMidiMap
    op5ConstantPitch: ControllerMidiMap
    op1SelfModulation: ControllerMidiMap
    op2SelfModulation: ControllerMidiMap
    op3SelfModulation: ControllerMidiMap
    op4SelfModulation: ControllerMidiMap
    op5SelfModulation: ControllerMidiMap
    op1Feedback: ControllerMidiMap
    op2Feedback: ControllerMidiMap
    op3Feedback: ControllerMidiMap
    op4Feedback: ControllerMidiMap
    op5Feedback: ControllerMidiMap
    op1ModulationType: ControllerMidiMap
    op2ModulationType: ControllerMidiMap
    op3ModulationType: ControllerMidiMap
    op4ModulationType: ControllerMidiMap
    op5ModulationType: ControllerMidiMap
    op1OutputMode: ControllerMidiMap
    op2OutputMode: ControllerMidiMap
    op3OutputMode: ControllerMidiMap
    op4OutputMode: ControllerMidiMap
    envelopeGain: ControllerMidiMap
  }
  interface FmxOptionValues extends OptionValues {}
  class FmxOptions implements Options {
    constructor(readonly optionValues: FmxOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "FMX"
    flags = 0x59
    readonly typeName = "FMX"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.panning = val
      },
      (val: number) => {
        this.controllerValues.sampleRate = val
      },
      (val: number) => {
        this.controllerValues.polyphony = val
      },
      (val: number) => {
        this.controllerValues.channels = val
      },
      (val: number) => {
        this.controllerValues.inputToOperator = val
      },
      (val: number) => {
        this.controllerValues.inputToCustomWaveform = val
      },
      (val: number) => {
        this.controllerValues.adsrSmoothTransitions = val
      },
      (val: number) => {
        this.controllerValues.noiseFilter = val
      },
      (val: number) => {
        this.controllerValues.op1Volume = val
      },
      (val: number) => {
        this.controllerValues.op2Volume = val
      },
      (val: number) => {
        this.controllerValues.op3Volume = val
      },
      (val: number) => {
        this.controllerValues.op4Volume = val
      },
      (val: number) => {
        this.controllerValues.op5Volume = val
      },
      (val: number) => {
        this.controllerValues.op1Attack = val
      },
      (val: number) => {
        this.controllerValues.op2Attack = val
      },
      (val: number) => {
        this.controllerValues.op3Attack = val
      },
      (val: number) => {
        this.controllerValues.op4Attack = val
      },
      (val: number) => {
        this.controllerValues.op5Attack = val
      },
      (val: number) => {
        this.controllerValues.op1Decay = val
      },
      (val: number) => {
        this.controllerValues.op2Decay = val
      },
      (val: number) => {
        this.controllerValues.op3Decay = val
      },
      (val: number) => {
        this.controllerValues.op4Decay = val
      },
      (val: number) => {
        this.controllerValues.op5Decay = val
      },
      (val: number) => {
        this.controllerValues.op1SustainLevel = val
      },
      (val: number) => {
        this.controllerValues.op2SustainLevel = val
      },
      (val: number) => {
        this.controllerValues.op3SustainLevel = val
      },
      (val: number) => {
        this.controllerValues.op4SustainLevel = val
      },
      (val: number) => {
        this.controllerValues.op5SustainLevel = val
      },
      (val: number) => {
        this.controllerValues.op1Release = val
      },
      (val: number) => {
        this.controllerValues.op2Release = val
      },
      (val: number) => {
        this.controllerValues.op3Release = val
      },
      (val: number) => {
        this.controllerValues.op4Release = val
      },
      (val: number) => {
        this.controllerValues.op5Release = val
      },
      (val: number) => {
        this.controllerValues.op1AttackCurve = val
      },
      (val: number) => {
        this.controllerValues.op2AttackCurve = val
      },
      (val: number) => {
        this.controllerValues.op3AttackCurve = val
      },
      (val: number) => {
        this.controllerValues.op4AttackCurve = val
      },
      (val: number) => {
        this.controllerValues.op5AttackCurve = val
      },
      (val: number) => {
        this.controllerValues.op1DecayCurve = val
      },
      (val: number) => {
        this.controllerValues.op2DecayCurve = val
      },
      (val: number) => {
        this.controllerValues.op3DecayCurve = val
      },
      (val: number) => {
        this.controllerValues.op4DecayCurve = val
      },
      (val: number) => {
        this.controllerValues.op5DecayCurve = val
      },
      (val: number) => {
        this.controllerValues.op1ReleaseCurve = val
      },
      (val: number) => {
        this.controllerValues.op2ReleaseCurve = val
      },
      (val: number) => {
        this.controllerValues.op3ReleaseCurve = val
      },
      (val: number) => {
        this.controllerValues.op4ReleaseCurve = val
      },
      (val: number) => {
        this.controllerValues.op5ReleaseCurve = val
      },
      (val: number) => {
        this.controllerValues.op1Sustain = val
      },
      (val: number) => {
        this.controllerValues.op2Sustain = val
      },
      (val: number) => {
        this.controllerValues.op3Sustain = val
      },
      (val: number) => {
        this.controllerValues.op4Sustain = val
      },
      (val: number) => {
        this.controllerValues.op5Sustain = val
      },
      (val: number) => {
        this.controllerValues.op1SustainPedal = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.op2SustainPedal = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.op3SustainPedal = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.op4SustainPedal = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.op5SustainPedal = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.op1EnvelopeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op2EnvelopeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op3EnvelopeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op4EnvelopeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op5EnvelopeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op1VolumeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op2VolumeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op3VolumeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op4VolumeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op5VolumeScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.op1VelocitySensitivity = val
      },
      (val: number) => {
        this.controllerValues.op2VelocitySensitivity = val
      },
      (val: number) => {
        this.controllerValues.op3VelocitySensitivity = val
      },
      (val: number) => {
        this.controllerValues.op4VelocitySensitivity = val
      },
      (val: number) => {
        this.controllerValues.op5VelocitySensitivity = val
      },
      (val: number) => {
        this.controllerValues.op1Waveform = val
      },
      (val: number) => {
        this.controllerValues.op2Waveform = val
      },
      (val: number) => {
        this.controllerValues.op3Waveform = val
      },
      (val: number) => {
        this.controllerValues.op4Waveform = val
      },
      (val: number) => {
        this.controllerValues.op5Waveform = val
      },
      (val: number) => {
        this.controllerValues.op1Noise = val
      },
      (val: number) => {
        this.controllerValues.op2Noise = val
      },
      (val: number) => {
        this.controllerValues.op3Noise = val
      },
      (val: number) => {
        this.controllerValues.op4Noise = val
      },
      (val: number) => {
        this.controllerValues.op5Noise = val
      },
      (val: number) => {
        this.controllerValues.op1Phase = val
      },
      (val: number) => {
        this.controllerValues.op2Phase = val
      },
      (val: number) => {
        this.controllerValues.op3Phase = val
      },
      (val: number) => {
        this.controllerValues.op4Phase = val
      },
      (val: number) => {
        this.controllerValues.op5Phase = val
      },
      (val: number) => {
        this.controllerValues.op1FreqMultiply = val
      },
      (val: number) => {
        this.controllerValues.op2FreqMultiply = val
      },
      (val: number) => {
        this.controllerValues.op3FreqMultiply = val
      },
      (val: number) => {
        this.controllerValues.op4FreqMultiply = val
      },
      (val: number) => {
        this.controllerValues.op5FreqMultiply = val
      },
      (val: number) => {
        this.controllerValues.op1ConstantPitch = val
      },
      (val: number) => {
        this.controllerValues.op2ConstantPitch = val
      },
      (val: number) => {
        this.controllerValues.op3ConstantPitch = val
      },
      (val: number) => {
        this.controllerValues.op4ConstantPitch = val
      },
      (val: number) => {
        this.controllerValues.op5ConstantPitch = val
      },
      (val: number) => {
        this.controllerValues.op1SelfModulation = val
      },
      (val: number) => {
        this.controllerValues.op2SelfModulation = val
      },
      (val: number) => {
        this.controllerValues.op3SelfModulation = val
      },
      (val: number) => {
        this.controllerValues.op4SelfModulation = val
      },
      (val: number) => {
        this.controllerValues.op5SelfModulation = val
      },
      (val: number) => {
        this.controllerValues.op1Feedback = val
      },
      (val: number) => {
        this.controllerValues.op2Feedback = val
      },
      (val: number) => {
        this.controllerValues.op3Feedback = val
      },
      (val: number) => {
        this.controllerValues.op4Feedback = val
      },
      (val: number) => {
        this.controllerValues.op5Feedback = val
      },
      (val: number) => {
        this.controllerValues.op1ModulationType = val
      },
      (val: number) => {
        this.controllerValues.op2ModulationType = val
      },
      (val: number) => {
        this.controllerValues.op3ModulationType = val
      },
      (val: number) => {
        this.controllerValues.op4ModulationType = val
      },
      (val: number) => {
        this.controllerValues.op5ModulationType = val
      },
      (val: number) => {
        this.controllerValues.op1OutputMode = val
      },
      (val: number) => {
        this.controllerValues.op2OutputMode = val
      },
      (val: number) => {
        this.controllerValues.op3OutputMode = val
      },
      (val: number) => {
        this.controllerValues.op4OutputMode = val
      },
      (val: number) => {
        this.controllerValues.envelopeGain = val
      },
    ]
    readonly controllerValues: FmxControllerValues = {
      volume: 16384,
      panning: 0,
      sampleRate: SampleRate._44100hz,
      polyphony: 4,
      channels: Channels.Mono,
      inputToOperator: 0,
      inputToCustomWaveform: InputCustomWaveform.Off,
      adsrSmoothTransitions: AdsrSmoothTransitions.RestartSmootherAndVolumeChange,
      noiseFilter: 32768,
      op1Volume: 32768,
      op2Volume: 32768,
      op3Volume: 32768,
      op4Volume: 32768,
      op5Volume: 32768,
      op1Attack: 100,
      op2Attack: 100,
      op3Attack: 100,
      op4Attack: 100,
      op5Attack: 100,
      op1Decay: 100,
      op2Decay: 100,
      op3Decay: 100,
      op4Decay: 100,
      op5Decay: 100,
      op1SustainLevel: 16384,
      op2SustainLevel: 16384,
      op3SustainLevel: 16384,
      op4SustainLevel: 16384,
      op5SustainLevel: 16384,
      op1Release: 100,
      op2Release: 100,
      op3Release: 100,
      op4Release: 100,
      op5Release: 100,
      op1AttackCurve: AdsrCurve.Linear,
      op2AttackCurve: AdsrCurve.Linear,
      op3AttackCurve: AdsrCurve.Linear,
      op4AttackCurve: AdsrCurve.Linear,
      op5AttackCurve: AdsrCurve.Linear,
      op1DecayCurve: AdsrCurve.Linear,
      op2DecayCurve: AdsrCurve.Linear,
      op3DecayCurve: AdsrCurve.Linear,
      op4DecayCurve: AdsrCurve.Linear,
      op5DecayCurve: AdsrCurve.Linear,
      op1ReleaseCurve: AdsrCurve.Linear,
      op2ReleaseCurve: AdsrCurve.Linear,
      op3ReleaseCurve: AdsrCurve.Linear,
      op4ReleaseCurve: AdsrCurve.Linear,
      op5ReleaseCurve: AdsrCurve.Linear,
      op1Sustain: Sustain.Off,
      op2Sustain: Sustain.Off,
      op3Sustain: Sustain.Off,
      op4Sustain: Sustain.Off,
      op5Sustain: Sustain.On,
      op1SustainPedal: false,
      op2SustainPedal: false,
      op3SustainPedal: false,
      op4SustainPedal: false,
      op5SustainPedal: false,
      op1EnvelopeScalingPerKey: 0,
      op2EnvelopeScalingPerKey: 0,
      op3EnvelopeScalingPerKey: 0,
      op4EnvelopeScalingPerKey: 0,
      op5EnvelopeScalingPerKey: 0,
      op1VolumeScalingPerKey: 0,
      op2VolumeScalingPerKey: 0,
      op3VolumeScalingPerKey: 0,
      op4VolumeScalingPerKey: 0,
      op5VolumeScalingPerKey: 0,
      op1VelocitySensitivity: 64,
      op2VelocitySensitivity: 64,
      op3VelocitySensitivity: 64,
      op4VelocitySensitivity: 64,
      op5VelocitySensitivity: 64,
      op1Waveform: Waveform.Sin,
      op2Waveform: Waveform.Sin,
      op3Waveform: Waveform.Sin,
      op4Waveform: Waveform.Sin,
      op5Waveform: Waveform.Sin,
      op1Noise: 0,
      op2Noise: 0,
      op3Noise: 0,
      op4Noise: 0,
      op5Noise: 0,
      op1Phase: 0,
      op2Phase: 0,
      op3Phase: 0,
      op4Phase: 0,
      op5Phase: 0,
      op1FreqMultiply: 1000,
      op2FreqMultiply: 1000,
      op3FreqMultiply: 1000,
      op4FreqMultiply: 1000,
      op5FreqMultiply: 1000,
      op1ConstantPitch: 0,
      op2ConstantPitch: 0,
      op3ConstantPitch: 0,
      op4ConstantPitch: 0,
      op5ConstantPitch: 0,
      op1SelfModulation: 0,
      op2SelfModulation: 0,
      op3SelfModulation: 0,
      op4SelfModulation: 0,
      op5SelfModulation: 0,
      op1Feedback: 0,
      op2Feedback: 0,
      op3Feedback: 0,
      op4Feedback: 0,
      op5Feedback: 0,
      op1ModulationType: ModulationType.Phase,
      op2ModulationType: ModulationType.Phase,
      op3ModulationType: ModulationType.Phase,
      op4ModulationType: ModulationType.Phase,
      op5ModulationType: ModulationType.Phase,
      op1OutputMode: Op1OutputMode.None,
      op2OutputMode: Op2OutputMode.None,
      op3OutputMode: Op3OutputMode.None,
      op4OutputMode: Op4OutputMode.To_5,
      envelopeGain: 1000,
    }
    readonly controllers: FmxControllers = new FmxControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: FmxControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      panning: new ControllerMidiMap(),
      sampleRate: new ControllerMidiMap(),
      polyphony: new ControllerMidiMap(),
      channels: new ControllerMidiMap(),
      inputToOperator: new ControllerMidiMap(),
      inputToCustomWaveform: new ControllerMidiMap(),
      adsrSmoothTransitions: new ControllerMidiMap(),
      noiseFilter: new ControllerMidiMap(),
      op1Volume: new ControllerMidiMap(),
      op2Volume: new ControllerMidiMap(),
      op3Volume: new ControllerMidiMap(),
      op4Volume: new ControllerMidiMap(),
      op5Volume: new ControllerMidiMap(),
      op1Attack: new ControllerMidiMap(),
      op2Attack: new ControllerMidiMap(),
      op3Attack: new ControllerMidiMap(),
      op4Attack: new ControllerMidiMap(),
      op5Attack: new ControllerMidiMap(),
      op1Decay: new ControllerMidiMap(),
      op2Decay: new ControllerMidiMap(),
      op3Decay: new ControllerMidiMap(),
      op4Decay: new ControllerMidiMap(),
      op5Decay: new ControllerMidiMap(),
      op1SustainLevel: new ControllerMidiMap(),
      op2SustainLevel: new ControllerMidiMap(),
      op3SustainLevel: new ControllerMidiMap(),
      op4SustainLevel: new ControllerMidiMap(),
      op5SustainLevel: new ControllerMidiMap(),
      op1Release: new ControllerMidiMap(),
      op2Release: new ControllerMidiMap(),
      op3Release: new ControllerMidiMap(),
      op4Release: new ControllerMidiMap(),
      op5Release: new ControllerMidiMap(),
      op1AttackCurve: new ControllerMidiMap(),
      op2AttackCurve: new ControllerMidiMap(),
      op3AttackCurve: new ControllerMidiMap(),
      op4AttackCurve: new ControllerMidiMap(),
      op5AttackCurve: new ControllerMidiMap(),
      op1DecayCurve: new ControllerMidiMap(),
      op2DecayCurve: new ControllerMidiMap(),
      op3DecayCurve: new ControllerMidiMap(),
      op4DecayCurve: new ControllerMidiMap(),
      op5DecayCurve: new ControllerMidiMap(),
      op1ReleaseCurve: new ControllerMidiMap(),
      op2ReleaseCurve: new ControllerMidiMap(),
      op3ReleaseCurve: new ControllerMidiMap(),
      op4ReleaseCurve: new ControllerMidiMap(),
      op5ReleaseCurve: new ControllerMidiMap(),
      op1Sustain: new ControllerMidiMap(),
      op2Sustain: new ControllerMidiMap(),
      op3Sustain: new ControllerMidiMap(),
      op4Sustain: new ControllerMidiMap(),
      op5Sustain: new ControllerMidiMap(),
      op1SustainPedal: new ControllerMidiMap(),
      op2SustainPedal: new ControllerMidiMap(),
      op3SustainPedal: new ControllerMidiMap(),
      op4SustainPedal: new ControllerMidiMap(),
      op5SustainPedal: new ControllerMidiMap(),
      op1EnvelopeScalingPerKey: new ControllerMidiMap(),
      op2EnvelopeScalingPerKey: new ControllerMidiMap(),
      op3EnvelopeScalingPerKey: new ControllerMidiMap(),
      op4EnvelopeScalingPerKey: new ControllerMidiMap(),
      op5EnvelopeScalingPerKey: new ControllerMidiMap(),
      op1VolumeScalingPerKey: new ControllerMidiMap(),
      op2VolumeScalingPerKey: new ControllerMidiMap(),
      op3VolumeScalingPerKey: new ControllerMidiMap(),
      op4VolumeScalingPerKey: new ControllerMidiMap(),
      op5VolumeScalingPerKey: new ControllerMidiMap(),
      op1VelocitySensitivity: new ControllerMidiMap(),
      op2VelocitySensitivity: new ControllerMidiMap(),
      op3VelocitySensitivity: new ControllerMidiMap(),
      op4VelocitySensitivity: new ControllerMidiMap(),
      op5VelocitySensitivity: new ControllerMidiMap(),
      op1Waveform: new ControllerMidiMap(),
      op2Waveform: new ControllerMidiMap(),
      op3Waveform: new ControllerMidiMap(),
      op4Waveform: new ControllerMidiMap(),
      op5Waveform: new ControllerMidiMap(),
      op1Noise: new ControllerMidiMap(),
      op2Noise: new ControllerMidiMap(),
      op3Noise: new ControllerMidiMap(),
      op4Noise: new ControllerMidiMap(),
      op5Noise: new ControllerMidiMap(),
      op1Phase: new ControllerMidiMap(),
      op2Phase: new ControllerMidiMap(),
      op3Phase: new ControllerMidiMap(),
      op4Phase: new ControllerMidiMap(),
      op5Phase: new ControllerMidiMap(),
      op1FreqMultiply: new ControllerMidiMap(),
      op2FreqMultiply: new ControllerMidiMap(),
      op3FreqMultiply: new ControllerMidiMap(),
      op4FreqMultiply: new ControllerMidiMap(),
      op5FreqMultiply: new ControllerMidiMap(),
      op1ConstantPitch: new ControllerMidiMap(),
      op2ConstantPitch: new ControllerMidiMap(),
      op3ConstantPitch: new ControllerMidiMap(),
      op4ConstantPitch: new ControllerMidiMap(),
      op5ConstantPitch: new ControllerMidiMap(),
      op1SelfModulation: new ControllerMidiMap(),
      op2SelfModulation: new ControllerMidiMap(),
      op3SelfModulation: new ControllerMidiMap(),
      op4SelfModulation: new ControllerMidiMap(),
      op5SelfModulation: new ControllerMidiMap(),
      op1Feedback: new ControllerMidiMap(),
      op2Feedback: new ControllerMidiMap(),
      op3Feedback: new ControllerMidiMap(),
      op4Feedback: new ControllerMidiMap(),
      op5Feedback: new ControllerMidiMap(),
      op1ModulationType: new ControllerMidiMap(),
      op2ModulationType: new ControllerMidiMap(),
      op3ModulationType: new ControllerMidiMap(),
      op4ModulationType: new ControllerMidiMap(),
      op5ModulationType: new ControllerMidiMap(),
      op1OutputMode: new ControllerMidiMap(),
      op2OutputMode: new ControllerMidiMap(),
      op3OutputMode: new ControllerMidiMap(),
      op4OutputMode: new ControllerMidiMap(),
      envelopeGain: new ControllerMidiMap(),
    }
    readonly optionValues: FmxOptionValues = {}
    readonly options: FmxOptions = new FmxOptions(this.optionValues)
    readonly o = this.options
    behavior?: FmxBehavior
    constructor() {
      super()
      this.behavior = new FmxBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.volume = value
          break
        case 2:
          cv.panning = value
          break
        case 3:
          cv.sampleRate = value
          break
        case 4:
          cv.polyphony = value
          break
        case 5:
          cv.channels = value
          break
        case 6:
          cv.inputToOperator = value
          break
        case 7:
          cv.inputToCustomWaveform = value
          break
        case 8:
          cv.adsrSmoothTransitions = value
          break
        case 9:
          cv.noiseFilter = value
          break
        case 10:
          cv.op1Volume = value
          break
        case 11:
          cv.op2Volume = value
          break
        case 12:
          cv.op3Volume = value
          break
        case 13:
          cv.op4Volume = value
          break
        case 14:
          cv.op5Volume = value
          break
        case 15:
          cv.op1Attack = value
          break
        case 16:
          cv.op2Attack = value
          break
        case 17:
          cv.op3Attack = value
          break
        case 18:
          cv.op4Attack = value
          break
        case 19:
          cv.op5Attack = value
          break
        case 20:
          cv.op1Decay = value
          break
        case 21:
          cv.op2Decay = value
          break
        case 22:
          cv.op3Decay = value
          break
        case 23:
          cv.op4Decay = value
          break
        case 24:
          cv.op5Decay = value
          break
        case 25:
          cv.op1SustainLevel = value
          break
        case 26:
          cv.op2SustainLevel = value
          break
        case 27:
          cv.op3SustainLevel = value
          break
        case 28:
          cv.op4SustainLevel = value
          break
        case 29:
          cv.op5SustainLevel = value
          break
        case 30:
          cv.op1Release = value
          break
        case 31:
          cv.op2Release = value
          break
        case 32:
          cv.op3Release = value
          break
        case 33:
          cv.op4Release = value
          break
        case 34:
          cv.op5Release = value
          break
        case 35:
          cv.op1AttackCurve = value
          break
        case 36:
          cv.op2AttackCurve = value
          break
        case 37:
          cv.op3AttackCurve = value
          break
        case 38:
          cv.op4AttackCurve = value
          break
        case 39:
          cv.op5AttackCurve = value
          break
        case 40:
          cv.op1DecayCurve = value
          break
        case 41:
          cv.op2DecayCurve = value
          break
        case 42:
          cv.op3DecayCurve = value
          break
        case 43:
          cv.op4DecayCurve = value
          break
        case 44:
          cv.op5DecayCurve = value
          break
        case 45:
          cv.op1ReleaseCurve = value
          break
        case 46:
          cv.op2ReleaseCurve = value
          break
        case 47:
          cv.op3ReleaseCurve = value
          break
        case 48:
          cv.op4ReleaseCurve = value
          break
        case 49:
          cv.op5ReleaseCurve = value
          break
        case 50:
          cv.op1Sustain = value
          break
        case 51:
          cv.op2Sustain = value
          break
        case 52:
          cv.op3Sustain = value
          break
        case 53:
          cv.op4Sustain = value
          break
        case 54:
          cv.op5Sustain = value
          break
        case 55:
          cv.op1SustainPedal = Boolean(value)
          break
        case 56:
          cv.op2SustainPedal = Boolean(value)
          break
        case 57:
          cv.op3SustainPedal = Boolean(value)
          break
        case 58:
          cv.op4SustainPedal = Boolean(value)
          break
        case 59:
          cv.op5SustainPedal = Boolean(value)
          break
        case 60:
          cv.op1EnvelopeScalingPerKey = value
          break
        case 61:
          cv.op2EnvelopeScalingPerKey = value
          break
        case 62:
          cv.op3EnvelopeScalingPerKey = value
          break
        case 63:
          cv.op4EnvelopeScalingPerKey = value
          break
        case 64:
          cv.op5EnvelopeScalingPerKey = value
          break
        case 65:
          cv.op1VolumeScalingPerKey = value
          break
        case 66:
          cv.op2VolumeScalingPerKey = value
          break
        case 67:
          cv.op3VolumeScalingPerKey = value
          break
        case 68:
          cv.op4VolumeScalingPerKey = value
          break
        case 69:
          cv.op5VolumeScalingPerKey = value
          break
        case 70:
          cv.op1VelocitySensitivity = value
          break
        case 71:
          cv.op2VelocitySensitivity = value
          break
        case 72:
          cv.op3VelocitySensitivity = value
          break
        case 73:
          cv.op4VelocitySensitivity = value
          break
        case 74:
          cv.op5VelocitySensitivity = value
          break
        case 75:
          cv.op1Waveform = value
          break
        case 76:
          cv.op2Waveform = value
          break
        case 77:
          cv.op3Waveform = value
          break
        case 78:
          cv.op4Waveform = value
          break
        case 79:
          cv.op5Waveform = value
          break
        case 80:
          cv.op1Noise = value
          break
        case 81:
          cv.op2Noise = value
          break
        case 82:
          cv.op3Noise = value
          break
        case 83:
          cv.op4Noise = value
          break
        case 84:
          cv.op5Noise = value
          break
        case 85:
          cv.op1Phase = value
          break
        case 86:
          cv.op2Phase = value
          break
        case 87:
          cv.op3Phase = value
          break
        case 88:
          cv.op4Phase = value
          break
        case 89:
          cv.op5Phase = value
          break
        case 90:
          cv.op1FreqMultiply = value
          break
        case 91:
          cv.op2FreqMultiply = value
          break
        case 92:
          cv.op3FreqMultiply = value
          break
        case 93:
          cv.op4FreqMultiply = value
          break
        case 94:
          cv.op5FreqMultiply = value
          break
        case 95:
          cv.op1ConstantPitch = value
          break
        case 96:
          cv.op2ConstantPitch = value
          break
        case 97:
          cv.op3ConstantPitch = value
          break
        case 98:
          cv.op4ConstantPitch = value
          break
        case 99:
          cv.op5ConstantPitch = value
          break
        case 100:
          cv.op1SelfModulation = value
          break
        case 101:
          cv.op2SelfModulation = value
          break
        case 102:
          cv.op3SelfModulation = value
          break
        case 103:
          cv.op4SelfModulation = value
          break
        case 104:
          cv.op5SelfModulation = value
          break
        case 105:
          cv.op1Feedback = value
          break
        case 106:
          cv.op2Feedback = value
          break
        case 107:
          cv.op3Feedback = value
          break
        case 108:
          cv.op4Feedback = value
          break
        case 109:
          cv.op5Feedback = value
          break
        case 110:
          cv.op1ModulationType = value
          break
        case 111:
          cv.op2ModulationType = value
          break
        case 112:
          cv.op3ModulationType = value
          break
        case 113:
          cv.op4ModulationType = value
          break
        case 114:
          cv.op5ModulationType = value
          break
        case 115:
          cv.op1OutputMode = value
          break
        case 116:
          cv.op2OutputMode = value
          break
        case 117:
          cv.op3OutputMode = value
          break
        case 118:
          cv.op4OutputMode = value
          break
        case 119:
          cv.envelopeGain = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.panning
      yield cv.sampleRate
      yield cv.polyphony
      yield cv.channels
      yield cv.inputToOperator
      yield cv.inputToCustomWaveform
      yield cv.adsrSmoothTransitions
      yield cv.noiseFilter
      yield cv.op1Volume
      yield cv.op2Volume
      yield cv.op3Volume
      yield cv.op4Volume
      yield cv.op5Volume
      yield cv.op1Attack
      yield cv.op2Attack
      yield cv.op3Attack
      yield cv.op4Attack
      yield cv.op5Attack
      yield cv.op1Decay
      yield cv.op2Decay
      yield cv.op3Decay
      yield cv.op4Decay
      yield cv.op5Decay
      yield cv.op1SustainLevel
      yield cv.op2SustainLevel
      yield cv.op3SustainLevel
      yield cv.op4SustainLevel
      yield cv.op5SustainLevel
      yield cv.op1Release
      yield cv.op2Release
      yield cv.op3Release
      yield cv.op4Release
      yield cv.op5Release
      yield cv.op1AttackCurve
      yield cv.op2AttackCurve
      yield cv.op3AttackCurve
      yield cv.op4AttackCurve
      yield cv.op5AttackCurve
      yield cv.op1DecayCurve
      yield cv.op2DecayCurve
      yield cv.op3DecayCurve
      yield cv.op4DecayCurve
      yield cv.op5DecayCurve
      yield cv.op1ReleaseCurve
      yield cv.op2ReleaseCurve
      yield cv.op3ReleaseCurve
      yield cv.op4ReleaseCurve
      yield cv.op5ReleaseCurve
      yield cv.op1Sustain
      yield cv.op2Sustain
      yield cv.op3Sustain
      yield cv.op4Sustain
      yield cv.op5Sustain
      yield Number(cv.op1SustainPedal)
      yield Number(cv.op2SustainPedal)
      yield Number(cv.op3SustainPedal)
      yield Number(cv.op4SustainPedal)
      yield Number(cv.op5SustainPedal)
      yield cv.op1EnvelopeScalingPerKey
      yield cv.op2EnvelopeScalingPerKey
      yield cv.op3EnvelopeScalingPerKey
      yield cv.op4EnvelopeScalingPerKey
      yield cv.op5EnvelopeScalingPerKey
      yield cv.op1VolumeScalingPerKey
      yield cv.op2VolumeScalingPerKey
      yield cv.op3VolumeScalingPerKey
      yield cv.op4VolumeScalingPerKey
      yield cv.op5VolumeScalingPerKey
      yield cv.op1VelocitySensitivity
      yield cv.op2VelocitySensitivity
      yield cv.op3VelocitySensitivity
      yield cv.op4VelocitySensitivity
      yield cv.op5VelocitySensitivity
      yield cv.op1Waveform
      yield cv.op2Waveform
      yield cv.op3Waveform
      yield cv.op4Waveform
      yield cv.op5Waveform
      yield cv.op1Noise
      yield cv.op2Noise
      yield cv.op3Noise
      yield cv.op4Noise
      yield cv.op5Noise
      yield cv.op1Phase
      yield cv.op2Phase
      yield cv.op3Phase
      yield cv.op4Phase
      yield cv.op5Phase
      yield cv.op1FreqMultiply
      yield cv.op2FreqMultiply
      yield cv.op3FreqMultiply
      yield cv.op4FreqMultiply
      yield cv.op5FreqMultiply
      yield cv.op1ConstantPitch
      yield cv.op2ConstantPitch
      yield cv.op3ConstantPitch
      yield cv.op4ConstantPitch
      yield cv.op5ConstantPitch
      yield cv.op1SelfModulation
      yield cv.op2SelfModulation
      yield cv.op3SelfModulation
      yield cv.op4SelfModulation
      yield cv.op5SelfModulation
      yield cv.op1Feedback
      yield cv.op2Feedback
      yield cv.op3Feedback
      yield cv.op4Feedback
      yield cv.op5Feedback
      yield cv.op1ModulationType
      yield cv.op2ModulationType
      yield cv.op3ModulationType
      yield cv.op4ModulationType
      yield cv.op5ModulationType
      yield cv.op1OutputMode
      yield cv.op2OutputMode
      yield cv.op3OutputMode
      yield cv.op4OutputMode
      yield cv.envelopeGain
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.panning = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.sampleRate = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.polyphony = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.channels = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.inputToOperator = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.inputToCustomWaveform = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.adsrSmoothTransitions = midiMaps[7] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.noiseFilter = midiMaps[8] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Volume = midiMaps[9] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Volume = midiMaps[10] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Volume = midiMaps[11] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Volume = midiMaps[12] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Volume = midiMaps[13] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Attack = midiMaps[14] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Attack = midiMaps[15] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Attack = midiMaps[16] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Attack = midiMaps[17] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Attack = midiMaps[18] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Decay = midiMaps[19] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Decay = midiMaps[20] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Decay = midiMaps[21] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Decay = midiMaps[22] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Decay = midiMaps[23] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1SustainLevel = midiMaps[24] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2SustainLevel = midiMaps[25] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3SustainLevel = midiMaps[26] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4SustainLevel = midiMaps[27] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5SustainLevel = midiMaps[28] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Release = midiMaps[29] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Release = midiMaps[30] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Release = midiMaps[31] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Release = midiMaps[32] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Release = midiMaps[33] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1AttackCurve = midiMaps[34] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2AttackCurve = midiMaps[35] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3AttackCurve = midiMaps[36] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4AttackCurve = midiMaps[37] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5AttackCurve = midiMaps[38] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1DecayCurve = midiMaps[39] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2DecayCurve = midiMaps[40] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3DecayCurve = midiMaps[41] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4DecayCurve = midiMaps[42] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5DecayCurve = midiMaps[43] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1ReleaseCurve = midiMaps[44] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2ReleaseCurve = midiMaps[45] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3ReleaseCurve = midiMaps[46] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4ReleaseCurve = midiMaps[47] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5ReleaseCurve = midiMaps[48] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Sustain = midiMaps[49] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Sustain = midiMaps[50] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Sustain = midiMaps[51] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Sustain = midiMaps[52] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Sustain = midiMaps[53] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1SustainPedal = midiMaps[54] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2SustainPedal = midiMaps[55] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3SustainPedal = midiMaps[56] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4SustainPedal = midiMaps[57] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5SustainPedal = midiMaps[58] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1EnvelopeScalingPerKey = midiMaps[59] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2EnvelopeScalingPerKey = midiMaps[60] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3EnvelopeScalingPerKey = midiMaps[61] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4EnvelopeScalingPerKey = midiMaps[62] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5EnvelopeScalingPerKey = midiMaps[63] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1VolumeScalingPerKey = midiMaps[64] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2VolumeScalingPerKey = midiMaps[65] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3VolumeScalingPerKey = midiMaps[66] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4VolumeScalingPerKey = midiMaps[67] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5VolumeScalingPerKey = midiMaps[68] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1VelocitySensitivity = midiMaps[69] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2VelocitySensitivity = midiMaps[70] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3VelocitySensitivity = midiMaps[71] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4VelocitySensitivity = midiMaps[72] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5VelocitySensitivity = midiMaps[73] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Waveform = midiMaps[74] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Waveform = midiMaps[75] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Waveform = midiMaps[76] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Waveform = midiMaps[77] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Waveform = midiMaps[78] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Noise = midiMaps[79] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Noise = midiMaps[80] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Noise = midiMaps[81] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Noise = midiMaps[82] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Noise = midiMaps[83] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Phase = midiMaps[84] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Phase = midiMaps[85] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Phase = midiMaps[86] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Phase = midiMaps[87] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Phase = midiMaps[88] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1FreqMultiply = midiMaps[89] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2FreqMultiply = midiMaps[90] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3FreqMultiply = midiMaps[91] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4FreqMultiply = midiMaps[92] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5FreqMultiply = midiMaps[93] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1ConstantPitch = midiMaps[94] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2ConstantPitch = midiMaps[95] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3ConstantPitch = midiMaps[96] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4ConstantPitch = midiMaps[97] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5ConstantPitch = midiMaps[98] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1SelfModulation = midiMaps[99] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2SelfModulation = midiMaps[100] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3SelfModulation = midiMaps[101] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4SelfModulation = midiMaps[102] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5SelfModulation = midiMaps[103] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1Feedback = midiMaps[104] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2Feedback = midiMaps[105] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3Feedback = midiMaps[106] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4Feedback = midiMaps[107] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5Feedback = midiMaps[108] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1ModulationType = midiMaps[109] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2ModulationType = midiMaps[110] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3ModulationType = midiMaps[111] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4ModulationType = midiMaps[112] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op5ModulationType = midiMaps[113] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op1OutputMode = midiMaps[114] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op2OutputMode = midiMaps[115] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op3OutputMode = midiMaps[116] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.op4OutputMode = midiMaps[117] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.envelopeGain = midiMaps[118] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.panning)
      a.push(this.midiMaps.sampleRate)
      a.push(this.midiMaps.polyphony)
      a.push(this.midiMaps.channels)
      a.push(this.midiMaps.inputToOperator)
      a.push(this.midiMaps.inputToCustomWaveform)
      a.push(this.midiMaps.adsrSmoothTransitions)
      a.push(this.midiMaps.noiseFilter)
      a.push(this.midiMaps.op1Volume)
      a.push(this.midiMaps.op2Volume)
      a.push(this.midiMaps.op3Volume)
      a.push(this.midiMaps.op4Volume)
      a.push(this.midiMaps.op5Volume)
      a.push(this.midiMaps.op1Attack)
      a.push(this.midiMaps.op2Attack)
      a.push(this.midiMaps.op3Attack)
      a.push(this.midiMaps.op4Attack)
      a.push(this.midiMaps.op5Attack)
      a.push(this.midiMaps.op1Decay)
      a.push(this.midiMaps.op2Decay)
      a.push(this.midiMaps.op3Decay)
      a.push(this.midiMaps.op4Decay)
      a.push(this.midiMaps.op5Decay)
      a.push(this.midiMaps.op1SustainLevel)
      a.push(this.midiMaps.op2SustainLevel)
      a.push(this.midiMaps.op3SustainLevel)
      a.push(this.midiMaps.op4SustainLevel)
      a.push(this.midiMaps.op5SustainLevel)
      a.push(this.midiMaps.op1Release)
      a.push(this.midiMaps.op2Release)
      a.push(this.midiMaps.op3Release)
      a.push(this.midiMaps.op4Release)
      a.push(this.midiMaps.op5Release)
      a.push(this.midiMaps.op1AttackCurve)
      a.push(this.midiMaps.op2AttackCurve)
      a.push(this.midiMaps.op3AttackCurve)
      a.push(this.midiMaps.op4AttackCurve)
      a.push(this.midiMaps.op5AttackCurve)
      a.push(this.midiMaps.op1DecayCurve)
      a.push(this.midiMaps.op2DecayCurve)
      a.push(this.midiMaps.op3DecayCurve)
      a.push(this.midiMaps.op4DecayCurve)
      a.push(this.midiMaps.op5DecayCurve)
      a.push(this.midiMaps.op1ReleaseCurve)
      a.push(this.midiMaps.op2ReleaseCurve)
      a.push(this.midiMaps.op3ReleaseCurve)
      a.push(this.midiMaps.op4ReleaseCurve)
      a.push(this.midiMaps.op5ReleaseCurve)
      a.push(this.midiMaps.op1Sustain)
      a.push(this.midiMaps.op2Sustain)
      a.push(this.midiMaps.op3Sustain)
      a.push(this.midiMaps.op4Sustain)
      a.push(this.midiMaps.op5Sustain)
      a.push(this.midiMaps.op1SustainPedal)
      a.push(this.midiMaps.op2SustainPedal)
      a.push(this.midiMaps.op3SustainPedal)
      a.push(this.midiMaps.op4SustainPedal)
      a.push(this.midiMaps.op5SustainPedal)
      a.push(this.midiMaps.op1EnvelopeScalingPerKey)
      a.push(this.midiMaps.op2EnvelopeScalingPerKey)
      a.push(this.midiMaps.op3EnvelopeScalingPerKey)
      a.push(this.midiMaps.op4EnvelopeScalingPerKey)
      a.push(this.midiMaps.op5EnvelopeScalingPerKey)
      a.push(this.midiMaps.op1VolumeScalingPerKey)
      a.push(this.midiMaps.op2VolumeScalingPerKey)
      a.push(this.midiMaps.op3VolumeScalingPerKey)
      a.push(this.midiMaps.op4VolumeScalingPerKey)
      a.push(this.midiMaps.op5VolumeScalingPerKey)
      a.push(this.midiMaps.op1VelocitySensitivity)
      a.push(this.midiMaps.op2VelocitySensitivity)
      a.push(this.midiMaps.op3VelocitySensitivity)
      a.push(this.midiMaps.op4VelocitySensitivity)
      a.push(this.midiMaps.op5VelocitySensitivity)
      a.push(this.midiMaps.op1Waveform)
      a.push(this.midiMaps.op2Waveform)
      a.push(this.midiMaps.op3Waveform)
      a.push(this.midiMaps.op4Waveform)
      a.push(this.midiMaps.op5Waveform)
      a.push(this.midiMaps.op1Noise)
      a.push(this.midiMaps.op2Noise)
      a.push(this.midiMaps.op3Noise)
      a.push(this.midiMaps.op4Noise)
      a.push(this.midiMaps.op5Noise)
      a.push(this.midiMaps.op1Phase)
      a.push(this.midiMaps.op2Phase)
      a.push(this.midiMaps.op3Phase)
      a.push(this.midiMaps.op4Phase)
      a.push(this.midiMaps.op5Phase)
      a.push(this.midiMaps.op1FreqMultiply)
      a.push(this.midiMaps.op2FreqMultiply)
      a.push(this.midiMaps.op3FreqMultiply)
      a.push(this.midiMaps.op4FreqMultiply)
      a.push(this.midiMaps.op5FreqMultiply)
      a.push(this.midiMaps.op1ConstantPitch)
      a.push(this.midiMaps.op2ConstantPitch)
      a.push(this.midiMaps.op3ConstantPitch)
      a.push(this.midiMaps.op4ConstantPitch)
      a.push(this.midiMaps.op5ConstantPitch)
      a.push(this.midiMaps.op1SelfModulation)
      a.push(this.midiMaps.op2SelfModulation)
      a.push(this.midiMaps.op3SelfModulation)
      a.push(this.midiMaps.op4SelfModulation)
      a.push(this.midiMaps.op5SelfModulation)
      a.push(this.midiMaps.op1Feedback)
      a.push(this.midiMaps.op2Feedback)
      a.push(this.midiMaps.op3Feedback)
      a.push(this.midiMaps.op4Feedback)
      a.push(this.midiMaps.op5Feedback)
      a.push(this.midiMaps.op1ModulationType)
      a.push(this.midiMaps.op2ModulationType)
      a.push(this.midiMaps.op3ModulationType)
      a.push(this.midiMaps.op4ModulationType)
      a.push(this.midiMaps.op5ModulationType)
      a.push(this.midiMaps.op1OutputMode)
      a.push(this.midiMaps.op2OutputMode)
      a.push(this.midiMaps.op3OutputMode)
      a.push(this.midiMaps.op4OutputMode)
      a.push(this.midiMaps.envelopeGain)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
