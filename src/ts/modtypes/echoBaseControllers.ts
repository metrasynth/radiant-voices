/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { EchoControllerValues } from "./echoControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { DelayUnit } from "./echoEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Filter } from "./echoEnums"
export class EchoBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: EchoControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get dry(): number {
    return this.controllerValues.dry
  }
  // noinspection JSUnusedGlobalSymbols
  set dry(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.dry = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get wet(): number {
    return this.controllerValues.wet
  }
  // noinspection JSUnusedGlobalSymbols
  set wet(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.wet = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get feedback(): number {
    return this.controllerValues.feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get delay(): number {
    return this.controllerValues.delay
  }
  // noinspection JSUnusedGlobalSymbols
  set delay(newValue: number) {
    const { controllerValues } = this
    switch (this.controllerValues.delayUnit) {
      case DelayUnit.SecDiv_256:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
      case DelayUnit.Ms:
        newValue = Math.min(Math.max(newValue, 0), 4000)
        break
      case DelayUnit.Hz:
        newValue = Math.min(Math.max(newValue, 0), 8192)
        break
      case DelayUnit.Tick:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
      case DelayUnit.Line:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
      case DelayUnit.LineDiv_2:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
      case DelayUnit.LineDiv_3:
        newValue = Math.min(Math.max(newValue, 0), 256)
        break
    }
    controllerValues.delay = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get rightChannelOffset(): boolean {
    return this.controllerValues.rightChannelOffset
  }
  // noinspection JSUnusedGlobalSymbols
  set rightChannelOffset(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.rightChannelOffset = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get delayUnit(): DelayUnit {
    return this.controllerValues.delayUnit
  }
  // noinspection JSUnusedGlobalSymbols
  set delayUnit(newValue: DelayUnit) {
    const { controllerValues } = this
    controllerValues.delayUnit = newValue
    this.delay = this.delay
  }
  // noinspection JSUnusedGlobalSymbols
  get rightChannelOffsetLength(): number {
    return this.controllerValues.rightChannelOffsetLength
  }
  // noinspection JSUnusedGlobalSymbols
  set rightChannelOffsetLength(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.rightChannelOffsetLength = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get filter(): Filter {
    return this.controllerValues.filter
  }
  // noinspection JSUnusedGlobalSymbols
  set filter(newValue: Filter) {
    const { controllerValues } = this
    controllerValues.filter = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get filterFreq(): number {
    return this.controllerValues.filterFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set filterFreq(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 22000)
    controllerValues.filterFreq = newValue
  }
}
