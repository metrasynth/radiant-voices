/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers } from "./moduleType"
import { PitchShifterControllerValues } from "./pitchShifterControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./pitchShifterEnums"
export class PitchShifterBaseControllers implements Controllers {
  constructor(readonly controllerValues: PitchShifterControllerValues) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get pitch(): number {
    return this.controllerValues.pitch + -600
  }
  // noinspection JSUnusedGlobalSymbols
  set pitch(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -600), 600)
    controllerValues.pitch = newValue - -600
  }
  // noinspection JSUnusedGlobalSymbols
  get pitchScale(): number {
    return this.controllerValues.pitchScale
  }
  // noinspection JSUnusedGlobalSymbols
  set pitchScale(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 200)
    controllerValues.pitchScale = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get feedback(): number {
    return this.controllerValues.feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get grainSize(): number {
    return this.controllerValues.grainSize
  }
  // noinspection JSUnusedGlobalSymbols
  set grainSize(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.grainSize = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
}
