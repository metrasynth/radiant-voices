/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { EqBehavior } from "./eqBehavior"
export namespace Eq {
  export const enum Channels {
    // noinspection JSUnusedGlobalSymbols
    Stereo = 0,
    Mono = 1,
  }
  interface EqControllerValues extends ControllerValues {
    low: number
    middle: number
    high: number
    channels: Channels
  }
  class EqControllers implements Controllers {
    constructor(readonly controllerValues: EqControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get low(): number {
      return this.controllerValues.low
    }
    // noinspection JSUnusedGlobalSymbols
    set low(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.low = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get middle(): number {
      return this.controllerValues.middle
    }
    // noinspection JSUnusedGlobalSymbols
    set middle(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.middle = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get high(): number {
      return this.controllerValues.high
    }
    // noinspection JSUnusedGlobalSymbols
    set high(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.high = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get channels(): Channels {
      return this.controllerValues.channels
    }
    // noinspection JSUnusedGlobalSymbols
    set channels(newValue: Channels) {
      const { controllerValues } = this
      controllerValues.channels = newValue
    }
  }
  interface EqControllerMidiMaps extends ControllerMidiMaps {
    low: ControllerMidiMap
    middle: ControllerMidiMap
    high: ControllerMidiMap
    channels: ControllerMidiMap
  }
  interface EqOptionValues extends OptionValues {}
  class EqOptions implements Options {
    constructor(readonly optionValues: EqOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "EQ"
    flags = 81
    readonly typeName = "EQ"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.low = val
      },
      (val: number) => {
        this.controllerValues.middle = val
      },
      (val: number) => {
        this.controllerValues.high = val
      },
      (val: number) => {
        this.controllerValues.channels = val
      },
    ]
    readonly controllerValues: EqControllerValues = {
      low: 256,
      middle: 256,
      high: 256,
      channels: Channels.Stereo,
    }
    readonly controllers: EqControllers = new EqControllers(this.controllerValues)
    readonly c = this.controllers
    readonly midiMaps: EqControllerMidiMaps = {
      low: new ControllerMidiMap(),
      middle: new ControllerMidiMap(),
      high: new ControllerMidiMap(),
      channels: new ControllerMidiMap(),
    }
    readonly optionValues: EqOptionValues = {}
    readonly options: EqOptions = new EqOptions(this.optionValues)
    readonly o = this.options
    behavior?: EqBehavior
    constructor() {
      super()
      this.behavior = new EqBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.low
      yield cv.middle
      yield cv.high
      yield cv.channels
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.low = midiMaps[0]
      this.midiMaps.middle = midiMaps[1]
      this.midiMaps.high = midiMaps[2]
      this.midiMaps.channels = midiMaps[3]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.low)
      a.push(this.midiMaps.middle)
      a.push(this.midiMaps.high)
      a.push(this.midiMaps.channels)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
