/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { EchoBehavior } from "./echoBehavior"
import { EchoControllers } from "./echoControllers"
import { EchoControllerValues } from "./echoControllerValues"
export namespace Echo {
  // Intentionally duplicated enums - see also echoEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum DelayUnit {
    // noinspection JSUnusedGlobalSymbols
    SecDiv_256 = 0,
    Ms = 1,
    Hz = 2,
    Tick = 3,
    Line = 4,
    LineDiv_2 = 5,
    LineDiv_3 = 6,
  }
  export enum Filter {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    Lp_6dB = 1,
    Hp_6dB = 2,
  }
  export enum CtlNum {
    Dry = 1,
    Wet = 2,
    Feedback = 3,
    Delay = 4,
    RightChannelOffset = 5,
    DelayUnit = 6,
    RightChannelOffsetLength = 7,
    Filter = 8,
    FilterFreq = 9,
  }
  interface EchoControllerMidiMaps extends ControllerMidiMaps {
    dry: ControllerMidiMap
    wet: ControllerMidiMap
    feedback: ControllerMidiMap
    delay: ControllerMidiMap
    rightChannelOffset: ControllerMidiMap
    delayUnit: ControllerMidiMap
    rightChannelOffsetLength: ControllerMidiMap
    filter: ControllerMidiMap
    filterFreq: ControllerMidiMap
  }
  interface EchoOptionValues extends OptionValues {}
  class EchoOptions implements Options {
    constructor(readonly optionValues: EchoOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Echo"
    flags = 0x451
    readonly typeName = "Echo"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.dry = val
      },
      (val: number) => {
        this.controllerValues.wet = val
      },
      (val: number) => {
        this.controllerValues.feedback = val
      },
      (val: number) => {
        this.controllerValues.delay = val
      },
      (val: number) => {
        this.controllerValues.rightChannelOffset = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.delayUnit = val
      },
      (val: number) => {
        this.controllerValues.rightChannelOffsetLength = val
      },
      (val: number) => {
        this.controllerValues.filter = val
      },
      (val: number) => {
        this.controllerValues.filterFreq = val
      },
    ]
    readonly controllerValues: EchoControllerValues = {
      dry: 256,
      wet: 40,
      feedback: 128,
      delay: 256,
      rightChannelOffset: true,
      delayUnit: DelayUnit.SecDiv_256,
      rightChannelOffsetLength: 16384,
      filter: Filter.Off,
      filterFreq: 2000,
    }
    readonly controllers: EchoControllers = new EchoControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: EchoControllerMidiMaps = {
      dry: new ControllerMidiMap(),
      wet: new ControllerMidiMap(),
      feedback: new ControllerMidiMap(),
      delay: new ControllerMidiMap(),
      rightChannelOffset: new ControllerMidiMap(),
      delayUnit: new ControllerMidiMap(),
      rightChannelOffsetLength: new ControllerMidiMap(),
      filter: new ControllerMidiMap(),
      filterFreq: new ControllerMidiMap(),
    }
    readonly optionValues: EchoOptionValues = {}
    readonly options: EchoOptions = new EchoOptions(this.optionValues)
    readonly o = this.options
    behavior?: EchoBehavior
    constructor() {
      super()
      this.behavior = new EchoBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.dry = value
          break
        case 2:
          cv.wet = value
          break
        case 3:
          cv.feedback = value
          break
        case 4:
          cv.delay = value
          break
        case 5:
          cv.rightChannelOffset = Boolean(value)
          break
        case 6:
          cv.delayUnit = value
          break
        case 7:
          cv.rightChannelOffsetLength = value
          break
        case 8:
          cv.filter = value
          break
        case 9:
          cv.filterFreq = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.dry
      yield cv.wet
      yield cv.feedback
      yield cv.delay
      yield Number(cv.rightChannelOffset)
      yield cv.delayUnit
      yield cv.rightChannelOffsetLength
      yield cv.filter
      yield cv.filterFreq
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.dry = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.wet = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.feedback = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.delay = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.rightChannelOffset = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.delayUnit = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.rightChannelOffsetLength = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.filter = midiMaps[7] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.filterFreq = midiMaps[8] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.dry)
      a.push(this.midiMaps.wet)
      a.push(this.midiMaps.feedback)
      a.push(this.midiMaps.delay)
      a.push(this.midiMaps.rightChannelOffset)
      a.push(this.midiMaps.delayUnit)
      a.push(this.midiMaps.rightChannelOffsetLength)
      a.push(this.midiMaps.filter)
      a.push(this.midiMaps.filterFreq)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
