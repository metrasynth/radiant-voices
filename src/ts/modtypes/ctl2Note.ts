/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { Ctl2NoteBehavior } from "./ctl2NoteBehavior"
import { Ctl2NoteControllers } from "./ctl2NoteControllers"
import { Ctl2NoteControllerValues } from "./ctl2NoteControllerValues"
export namespace Ctl2Note {
  // Intentionally duplicated enums - see also ctl2NoteEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum NoteOn {
    // noinspection JSUnusedGlobalSymbols
    NoTrigger = 0,
    OnPitchChange = 1,
  }
  export enum NoteOff {
    // noinspection JSUnusedGlobalSymbols
    NoTrigger = 0,
    OnMinPitch = 1,
    OnMaxPitch = 2,
  }
  export enum CtlNum {
    Pitch = 1,
    FirstNote = 2,
    RangeSemitones = 3,
    Transpose = 4,
    Finetune = 5,
    Velocity = 6,
    State = 7,
    NoteOn = 8,
    NoteOff = 9,
    RecordNotes = 10,
  }
  interface Ctl2NoteControllerMidiMaps extends ControllerMidiMaps {
    pitch: ControllerMidiMap
    firstNote: ControllerMidiMap
    rangeSemitones: ControllerMidiMap
    transpose: ControllerMidiMap
    finetune: ControllerMidiMap
    velocity: ControllerMidiMap
    state: ControllerMidiMap
    noteOn: ControllerMidiMap
    noteOff: ControllerMidiMap
    recordNotes: ControllerMidiMap
  }
  interface Ctl2NoteOptionValues extends OptionValues {}
  class Ctl2NoteOptions implements Options {
    constructor(readonly optionValues: Ctl2NoteOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Ctl2Note"
    flags = 0x1820041
    readonly typeName = "Ctl2Note"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.pitch = val
      },
      (val: number) => {
        this.controllerValues.firstNote = val
      },
      (val: number) => {
        this.controllerValues.rangeSemitones = val
      },
      (val: number) => {
        this.controllerValues.transpose = val
      },
      (val: number) => {
        this.controllerValues.finetune = val
      },
      (val: number) => {
        this.controllerValues.velocity = val
      },
      (val: number) => {
        this.controllerValues.state = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.noteOn = val
      },
      (val: number) => {
        this.controllerValues.noteOff = val
      },
      (val: number) => {
        this.controllerValues.recordNotes = Boolean(val)
      },
    ]
    readonly controllerValues: Ctl2NoteControllerValues = {
      pitch: 0,
      firstNote: 0,
      rangeSemitones: 120,
      transpose: 0,
      finetune: 0,
      velocity: 256,
      state: false,
      noteOn: NoteOn.OnPitchChange,
      noteOff: NoteOff.OnMinPitch,
      recordNotes: false,
    }
    readonly controllers: Ctl2NoteControllers = new Ctl2NoteControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: Ctl2NoteControllerMidiMaps = {
      pitch: new ControllerMidiMap(),
      firstNote: new ControllerMidiMap(),
      rangeSemitones: new ControllerMidiMap(),
      transpose: new ControllerMidiMap(),
      finetune: new ControllerMidiMap(),
      velocity: new ControllerMidiMap(),
      state: new ControllerMidiMap(),
      noteOn: new ControllerMidiMap(),
      noteOff: new ControllerMidiMap(),
      recordNotes: new ControllerMidiMap(),
    }
    readonly optionValues: Ctl2NoteOptionValues = {}
    readonly options: Ctl2NoteOptions = new Ctl2NoteOptions(this.optionValues)
    readonly o = this.options
    behavior?: Ctl2NoteBehavior
    constructor() {
      super()
      this.behavior = new Ctl2NoteBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.pitch = value
          break
        case 2:
          cv.firstNote = value
          break
        case 3:
          cv.rangeSemitones = value
          break
        case 4:
          cv.transpose = value
          break
        case 5:
          cv.finetune = value
          break
        case 6:
          cv.velocity = value
          break
        case 7:
          cv.state = Boolean(value)
          break
        case 8:
          cv.noteOn = value
          break
        case 9:
          cv.noteOff = value
          break
        case 10:
          cv.recordNotes = Boolean(value)
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.pitch
      yield cv.firstNote
      yield cv.rangeSemitones
      yield cv.transpose
      yield cv.finetune
      yield cv.velocity
      yield Number(cv.state)
      yield cv.noteOn
      yield cv.noteOff
      yield Number(cv.recordNotes)
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.pitch = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.firstNote = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.rangeSemitones = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.transpose = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.finetune = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.velocity = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.state = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.noteOn = midiMaps[7] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.noteOff = midiMaps[8] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.recordNotes = midiMaps[9] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.pitch)
      a.push(this.midiMaps.firstNote)
      a.push(this.midiMaps.rangeSemitones)
      a.push(this.midiMaps.transpose)
      a.push(this.midiMaps.finetune)
      a.push(this.midiMaps.velocity)
      a.push(this.midiMaps.state)
      a.push(this.midiMaps.noteOn)
      a.push(this.midiMaps.noteOff)
      a.push(this.midiMaps.recordNotes)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
