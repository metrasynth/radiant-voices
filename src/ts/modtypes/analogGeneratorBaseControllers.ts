/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { AnalogGeneratorControllerValues } from "./analogGeneratorControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./analogGeneratorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Waveform } from "./analogGeneratorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Filter } from "./analogGeneratorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { FilterEnvelope } from "./analogGeneratorEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Osc2Mode } from "./analogGeneratorEnums"
export class AnalogGeneratorBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: AnalogGeneratorControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get waveform(): Waveform {
    return this.controllerValues.waveform
  }
  // noinspection JSUnusedGlobalSymbols
  set waveform(newValue: Waveform) {
    const { controllerValues } = this
    controllerValues.waveform = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get panning(): number {
    return this.controllerValues.panning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set panning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.panning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get attack(): number {
    return this.controllerValues.attack
  }
  // noinspection JSUnusedGlobalSymbols
  set attack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.attack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get release(): number {
    return this.controllerValues.release
  }
  // noinspection JSUnusedGlobalSymbols
  set release(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.release = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get sustain(): boolean {
    return this.controllerValues.sustain
  }
  // noinspection JSUnusedGlobalSymbols
  set sustain(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.sustain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get exponentialEnvelope(): boolean {
    return this.controllerValues.exponentialEnvelope
  }
  // noinspection JSUnusedGlobalSymbols
  set exponentialEnvelope(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.exponentialEnvelope = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get dutyCycle(): number {
    return this.controllerValues.dutyCycle
  }
  // noinspection JSUnusedGlobalSymbols
  set dutyCycle(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 1024)
    controllerValues.dutyCycle = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get osc2(): number {
    return this.controllerValues.osc2 + -1000
  }
  // noinspection JSUnusedGlobalSymbols
  set osc2(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -1000), 1000)
    controllerValues.osc2 = newValue - -1000
  }
  // noinspection JSUnusedGlobalSymbols
  get filter(): Filter {
    return this.controllerValues.filter
  }
  // noinspection JSUnusedGlobalSymbols
  set filter(newValue: Filter) {
    const { controllerValues } = this
    controllerValues.filter = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fFreq(): number {
    return this.controllerValues.fFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set fFreq(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 14000)
    controllerValues.fFreq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fResonance(): number {
    return this.controllerValues.fResonance
  }
  // noinspection JSUnusedGlobalSymbols
  set fResonance(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 1530)
    controllerValues.fResonance = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fExponentialFreq(): boolean {
    return this.controllerValues.fExponentialFreq
  }
  // noinspection JSUnusedGlobalSymbols
  set fExponentialFreq(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.fExponentialFreq = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fAttack(): number {
    return this.controllerValues.fAttack
  }
  // noinspection JSUnusedGlobalSymbols
  set fAttack(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.fAttack = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fRelease(): number {
    return this.controllerValues.fRelease
  }
  // noinspection JSUnusedGlobalSymbols
  set fRelease(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.fRelease = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get fEnvelope(): FilterEnvelope {
    return this.controllerValues.fEnvelope
  }
  // noinspection JSUnusedGlobalSymbols
  set fEnvelope(newValue: FilterEnvelope) {
    const { controllerValues } = this
    controllerValues.fEnvelope = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get polyphony(): number {
    return this.controllerValues.polyphony
  }
  // noinspection JSUnusedGlobalSymbols
  set polyphony(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 32)
    controllerValues.polyphony = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get noise(): number {
    return this.controllerValues.noise
  }
  // noinspection JSUnusedGlobalSymbols
  set noise(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.noise = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get osc2Volume(): number {
    return this.controllerValues.osc2Volume
  }
  // noinspection JSUnusedGlobalSymbols
  set osc2Volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.osc2Volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get osc2Mode(): Osc2Mode {
    return this.controllerValues.osc2Mode
  }
  // noinspection JSUnusedGlobalSymbols
  set osc2Mode(newValue: Osc2Mode) {
    const { controllerValues } = this
    controllerValues.osc2Mode = newValue
  }
}
