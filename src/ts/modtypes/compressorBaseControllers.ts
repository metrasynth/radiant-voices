/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers } from "./moduleType"
import { CompressorControllerValues } from "./compressorControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { Mode } from "./compressorEnums"
export class CompressorBaseControllers implements Controllers {
  constructor(readonly controllerValues: CompressorControllerValues) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get threshold(): number {
    return this.controllerValues.threshold
  }
  // noinspection JSUnusedGlobalSymbols
  set threshold(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.threshold = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get slopePct(): number {
    return this.controllerValues.slopePct
  }
  // noinspection JSUnusedGlobalSymbols
  set slopePct(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 200)
    controllerValues.slopePct = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get attackMs(): number {
    return this.controllerValues.attackMs
  }
  // noinspection JSUnusedGlobalSymbols
  set attackMs(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 500)
    controllerValues.attackMs = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get releaseMs(): number {
    return this.controllerValues.releaseMs
  }
  // noinspection JSUnusedGlobalSymbols
  set releaseMs(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 1000)
    controllerValues.releaseMs = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get mode(): Mode {
    return this.controllerValues.mode
  }
  // noinspection JSUnusedGlobalSymbols
  set mode(newValue: Mode) {
    const { controllerValues } = this
    controllerValues.mode = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get sidechainInput(): number {
    return this.controllerValues.sidechainInput
  }
  // noinspection JSUnusedGlobalSymbols
  set sidechainInput(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32)
    controllerValues.sidechainInput = newValue
  }
}
