/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { MultiCtlBehavior } from "./multiCtlBehavior"
export namespace MultiCtl {
  interface MultiCtlControllerValues extends ControllerValues {
    value: number
    gain: number
    quantization: number
    outOffset: number
    response: number
    sampleRateHz: number
  }
  class MultiCtlControllers implements Controllers {
    constructor(readonly controllerValues: MultiCtlControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get value(): number {
      return this.controllerValues.value
    }
    // noinspection JSUnusedGlobalSymbols
    set value(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 32768)
      controllerValues.value = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get gain(): number {
      return this.controllerValues.gain
    }
    // noinspection JSUnusedGlobalSymbols
    set gain(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 1024)
      controllerValues.gain = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get quantization(): number {
      return this.controllerValues.quantization
    }
    // noinspection JSUnusedGlobalSymbols
    set quantization(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 32768)
      controllerValues.quantization = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get outOffset(): number {
      return this.controllerValues.outOffset + -16384
    }
    // noinspection JSUnusedGlobalSymbols
    set outOffset(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, -16384), 16384)
      controllerValues.outOffset = newValue - -16384
    }
    // noinspection JSUnusedGlobalSymbols
    get response(): number {
      return this.controllerValues.response
    }
    // noinspection JSUnusedGlobalSymbols
    set response(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 1000)
      controllerValues.response = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get sampleRateHz(): number {
      return this.controllerValues.sampleRateHz
    }
    // noinspection JSUnusedGlobalSymbols
    set sampleRateHz(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 1), 32768)
      controllerValues.sampleRateHz = newValue
    }
  }
  interface MultiCtlControllerMidiMaps extends ControllerMidiMaps {
    value: ControllerMidiMap
    gain: ControllerMidiMap
    quantization: ControllerMidiMap
    outOffset: ControllerMidiMap
    response: ControllerMidiMap
    sampleRateHz: ControllerMidiMap
  }
  interface MultiCtlOptionValues extends OptionValues {}
  class MultiCtlOptions implements Options {
    constructor(readonly optionValues: MultiCtlOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "MultiCtl"
    flags = 131153
    readonly typeName = "MultiCtl"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.value = val
      },
      (val: number) => {
        this.controllerValues.gain = val
      },
      (val: number) => {
        this.controllerValues.quantization = val
      },
      (val: number) => {
        this.controllerValues.outOffset = val
      },
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.sampleRateHz = val
      },
    ]
    readonly controllerValues: MultiCtlControllerValues = {
      value: 0,
      gain: 256,
      quantization: 32768,
      outOffset: 0,
      response: 1000,
      sampleRateHz: 150,
    }
    readonly controllers: MultiCtlControllers = new MultiCtlControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: MultiCtlControllerMidiMaps = {
      value: new ControllerMidiMap(),
      gain: new ControllerMidiMap(),
      quantization: new ControllerMidiMap(),
      outOffset: new ControllerMidiMap(),
      response: new ControllerMidiMap(),
      sampleRateHz: new ControllerMidiMap(),
    }
    readonly optionValues: MultiCtlOptionValues = {}
    readonly options: MultiCtlOptions = new MultiCtlOptions(this.optionValues)
    readonly o = this.options
    behavior?: MultiCtlBehavior
    constructor() {
      super()
      this.behavior = new MultiCtlBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.value
      yield cv.gain
      yield cv.quantization
      yield cv.outOffset
      yield cv.response
      yield cv.sampleRateHz
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.value = midiMaps[0]
      this.midiMaps.gain = midiMaps[1]
      this.midiMaps.quantization = midiMaps[2]
      this.midiMaps.outOffset = midiMaps[3]
      this.midiMaps.response = midiMaps[4]
      this.midiMaps.sampleRateHz = midiMaps[5]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.value)
      a.push(this.midiMaps.gain)
      a.push(this.midiMaps.quantization)
      a.push(this.midiMaps.outOffset)
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.sampleRateHz)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
