/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { MultiCtlBehavior } from "./multiCtlBehavior"
import { MultiCtlControllers } from "./multiCtlControllers"
import { MultiCtlControllerValues } from "./multiCtlControllerValues"
export namespace MultiCtl {
  export enum CtlNum {
    Value = 1,
    Gain = 2,
    Quantization = 3,
    OutOffset = 4,
    Response = 5,
    SampleRate = 6,
  }
  interface MultiCtlControllerMidiMaps extends ControllerMidiMaps {
    value: ControllerMidiMap
    gain: ControllerMidiMap
    quantization: ControllerMidiMap
    outOffset: ControllerMidiMap
    response: ControllerMidiMap
    sampleRate: ControllerMidiMap
  }
  interface MultiCtlOptionValues extends OptionValues {}
  class MultiCtlOptions implements Options {
    constructor(readonly optionValues: MultiCtlOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "MultiCtl"
    flags = 0x60051
    readonly typeName = "MultiCtl"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.value = val
      },
      (val: number) => {
        this.controllerValues.gain = val
      },
      (val: number) => {
        this.controllerValues.quantization = val
      },
      (val: number) => {
        this.controllerValues.outOffset = val
      },
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.sampleRate = val
      },
    ]
    readonly controllerValues: MultiCtlControllerValues = {
      value: 0,
      gain: 256,
      quantization: 32768,
      outOffset: 0,
      response: 1000,
      sampleRate: 150,
    }
    readonly controllers: MultiCtlControllers = new MultiCtlControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: MultiCtlControllerMidiMaps = {
      value: new ControllerMidiMap(),
      gain: new ControllerMidiMap(),
      quantization: new ControllerMidiMap(),
      outOffset: new ControllerMidiMap(),
      response: new ControllerMidiMap(),
      sampleRate: new ControllerMidiMap(),
    }
    readonly optionValues: MultiCtlOptionValues = {}
    readonly options: MultiCtlOptions = new MultiCtlOptions(this.optionValues)
    readonly o = this.options
    behavior?: MultiCtlBehavior
    constructor() {
      super()
      this.behavior = new MultiCtlBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.value = value
          break
        case 2:
          cv.gain = value
          break
        case 3:
          cv.quantization = value
          break
        case 4:
          cv.outOffset = value
          break
        case 5:
          cv.response = value
          break
        case 6:
          cv.sampleRate = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.value
      yield cv.gain
      yield cv.quantization
      yield cv.outOffset
      yield cv.response
      yield cv.sampleRate
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.value = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.gain = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.quantization = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.outOffset = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.response = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.sampleRate = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.value)
      a.push(this.midiMaps.gain)
      a.push(this.midiMaps.quantization)
      a.push(this.midiMaps.outOffset)
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.sampleRate)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
