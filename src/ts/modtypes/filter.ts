/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { FilterBehavior } from "./filterBehavior"
import { FilterControllers } from "./filterControllers"
import { FilterControllerValues } from "./filterControllerValues"
import { Type as _Type } from "./filterEnums"
import { Mode as _Mode } from "./filterEnums"
import { RollOff as _RollOff } from "./filterEnums"
import { LfoFreqUnit as _LfoFreqUnit } from "./filterEnums"
import { LfoWaveform as _LfoWaveform } from "./filterEnums"
export namespace Filter {
  export const Type = _Type
  export const Mode = _Mode
  export const RollOff = _RollOff
  export const LfoFreqUnit = _LfoFreqUnit
  export const LfoWaveform = _LfoWaveform
  interface FilterControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    freq: ControllerMidiMap
    resonance: ControllerMidiMap
    type: ControllerMidiMap
    response: ControllerMidiMap
    mode: ControllerMidiMap
    impulse: ControllerMidiMap
    mix: ControllerMidiMap
    lfoFreq: ControllerMidiMap
    lfoAmp: ControllerMidiMap
    setLfoPhase: ControllerMidiMap
    exponentialFreq: ControllerMidiMap
    rollOff: ControllerMidiMap
    lfoFreqUnit: ControllerMidiMap
    lfoWaveform: ControllerMidiMap
  }
  interface FilterOptionValues extends OptionValues {}
  class FilterOptions implements Options {
    constructor(readonly optionValues: FilterOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Filter"
    flags = 1105
    readonly typeName = "Filter"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.freq = val
      },
      (val: number) => {
        this.controllerValues.resonance = val
      },
      (val: number) => {
        this.controllerValues.type = val
      },
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.impulse = val
      },
      (val: number) => {
        this.controllerValues.mix = val
      },
      (val: number) => {
        this.controllerValues.lfoFreq = val
      },
      (val: number) => {
        this.controllerValues.lfoAmp = val
      },
      (val: number) => {
        this.controllerValues.setLfoPhase = val
      },
      (val: number) => {
        this.controllerValues.exponentialFreq = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.rollOff = val
      },
      (val: number) => {
        this.controllerValues.lfoFreqUnit = val
      },
      (val: number) => {
        this.controllerValues.lfoWaveform = val
      },
    ]
    readonly controllerValues: FilterControllerValues = {
      volume: 256,
      freq: 14000,
      resonance: 0,
      type: Type.Lp,
      response: 8,
      mode: Mode.Hq,
      impulse: 0,
      mix: 256,
      lfoFreq: 8,
      lfoAmp: 0,
      setLfoPhase: 0,
      exponentialFreq: false,
      rollOff: RollOff.Db_12,
      lfoFreqUnit: LfoFreqUnit.Hz_0_02,
      lfoWaveform: LfoWaveform.Sin,
    }
    readonly controllers: FilterControllers = new FilterControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: FilterControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      freq: new ControllerMidiMap(),
      resonance: new ControllerMidiMap(),
      type: new ControllerMidiMap(),
      response: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      impulse: new ControllerMidiMap(),
      mix: new ControllerMidiMap(),
      lfoFreq: new ControllerMidiMap(),
      lfoAmp: new ControllerMidiMap(),
      setLfoPhase: new ControllerMidiMap(),
      exponentialFreq: new ControllerMidiMap(),
      rollOff: new ControllerMidiMap(),
      lfoFreqUnit: new ControllerMidiMap(),
      lfoWaveform: new ControllerMidiMap(),
    }
    readonly optionValues: FilterOptionValues = {}
    readonly options: FilterOptions = new FilterOptions(this.optionValues)
    readonly o = this.options
    behavior?: FilterBehavior
    constructor() {
      super()
      this.behavior = new FilterBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.freq
      yield cv.resonance
      yield cv.type
      yield cv.response
      yield cv.mode
      yield cv.impulse
      yield cv.mix
      yield cv.lfoFreq
      yield cv.lfoAmp
      yield cv.setLfoPhase
      yield Number(cv.exponentialFreq)
      yield cv.rollOff
      yield cv.lfoFreqUnit
      yield cv.lfoWaveform
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.freq = midiMaps[1]
      this.midiMaps.resonance = midiMaps[2]
      this.midiMaps.type = midiMaps[3]
      this.midiMaps.response = midiMaps[4]
      this.midiMaps.mode = midiMaps[5]
      this.midiMaps.impulse = midiMaps[6]
      this.midiMaps.mix = midiMaps[7]
      this.midiMaps.lfoFreq = midiMaps[8]
      this.midiMaps.lfoAmp = midiMaps[9]
      this.midiMaps.setLfoPhase = midiMaps[10]
      this.midiMaps.exponentialFreq = midiMaps[11]
      this.midiMaps.rollOff = midiMaps[12]
      this.midiMaps.lfoFreqUnit = midiMaps[13]
      this.midiMaps.lfoWaveform = midiMaps[14]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.freq)
      a.push(this.midiMaps.resonance)
      a.push(this.midiMaps.type)
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.impulse)
      a.push(this.midiMaps.mix)
      a.push(this.midiMaps.lfoFreq)
      a.push(this.midiMaps.lfoAmp)
      a.push(this.midiMaps.setLfoPhase)
      a.push(this.midiMaps.exponentialFreq)
      a.push(this.midiMaps.rollOff)
      a.push(this.midiMaps.lfoFreqUnit)
      a.push(this.midiMaps.lfoWaveform)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
