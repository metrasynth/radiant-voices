/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { DrumSynthControllerValues } from "./drumSynthControllerValues"
export class DrumSynthBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: DrumSynthControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.volume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get panning(): number {
    return this.controllerValues.panning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set panning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.panning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get polyphony(): number {
    return this.controllerValues.polyphony
  }
  // noinspection JSUnusedGlobalSymbols
  set polyphony(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 1), 8)
    controllerValues.polyphony = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bassVolume(): number {
    return this.controllerValues.bassVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set bassVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.bassVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bassPower(): number {
    return this.controllerValues.bassPower
  }
  // noinspection JSUnusedGlobalSymbols
  set bassPower(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.bassPower = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bassTone(): number {
    return this.controllerValues.bassTone
  }
  // noinspection JSUnusedGlobalSymbols
  set bassTone(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.bassTone = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bassLength(): number {
    return this.controllerValues.bassLength
  }
  // noinspection JSUnusedGlobalSymbols
  set bassLength(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.bassLength = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get hihatVolume(): number {
    return this.controllerValues.hihatVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set hihatVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.hihatVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get hihatLength(): number {
    return this.controllerValues.hihatLength
  }
  // noinspection JSUnusedGlobalSymbols
  set hihatLength(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.hihatLength = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get snareVolume(): number {
    return this.controllerValues.snareVolume
  }
  // noinspection JSUnusedGlobalSymbols
  set snareVolume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 512)
    controllerValues.snareVolume = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get snareTone(): number {
    return this.controllerValues.snareTone
  }
  // noinspection JSUnusedGlobalSymbols
  set snareTone(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.snareTone = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get snareLength(): number {
    return this.controllerValues.snareLength
  }
  // noinspection JSUnusedGlobalSymbols
  set snareLength(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.snareLength = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bassPanning(): number {
    return this.controllerValues.bassPanning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set bassPanning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.bassPanning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get hihatPanning(): number {
    return this.controllerValues.hihatPanning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set hihatPanning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.hihatPanning = newValue - -128
  }
  // noinspection JSUnusedGlobalSymbols
  get snarePanning(): number {
    return this.controllerValues.snarePanning + -128
  }
  // noinspection JSUnusedGlobalSymbols
  set snarePanning(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -128), 128)
    controllerValues.snarePanning = newValue - -128
  }
}
