/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { PitchShifterBehavior } from "./pitchShifterBehavior"
import { PitchShifterControllers } from "./pitchShifterControllers"
import { PitchShifterControllerValues } from "./pitchShifterControllerValues"
export namespace PitchShifter {
  // Intentionally duplicated enums - see also pitchShifterEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Hq = 0,
    HqMono = 1,
    Lq = 2,
    LqMono = 3,
  }
  export enum BypassIfPitchEq0 {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    SlowTransition = 1,
    FastTransition = 2,
  }
  export enum CtlNum {
    Volume = 1,
    Pitch = 2,
    PitchScale = 3,
    Feedback = 4,
    GrainSize = 5,
    Mode = 6,
    BypassIfPitchEq_0 = 7,
  }
  interface PitchShifterControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    pitch: ControllerMidiMap
    pitchScale: ControllerMidiMap
    feedback: ControllerMidiMap
    grainSize: ControllerMidiMap
    mode: ControllerMidiMap
    bypassIfPitchEq_0: ControllerMidiMap
  }
  interface PitchShifterOptionValues extends OptionValues {}
  class PitchShifterOptions implements Options {
    constructor(readonly optionValues: PitchShifterOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Pitch shifter"
    flags = 81
    readonly typeName = "Pitch shifter"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.pitch = val
      },
      (val: number) => {
        this.controllerValues.pitchScale = val
      },
      (val: number) => {
        this.controllerValues.feedback = val
      },
      (val: number) => {
        this.controllerValues.grainSize = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.bypassIfPitchEq_0 = val
      },
    ]
    readonly controllerValues: PitchShifterControllerValues = {
      volume: 256,
      pitch: 0,
      pitchScale: 100,
      feedback: 0,
      grainSize: 64,
      mode: Mode.Hq,
      bypassIfPitchEq_0: BypassIfPitchEq0.Off,
    }
    readonly controllers: PitchShifterControllers = new PitchShifterControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: PitchShifterControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      pitch: new ControllerMidiMap(),
      pitchScale: new ControllerMidiMap(),
      feedback: new ControllerMidiMap(),
      grainSize: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      bypassIfPitchEq_0: new ControllerMidiMap(),
    }
    readonly optionValues: PitchShifterOptionValues = {}
    readonly options: PitchShifterOptions = new PitchShifterOptions(this.optionValues)
    readonly o = this.options
    behavior?: PitchShifterBehavior
    constructor() {
      super()
      this.behavior = new PitchShifterBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.volume = value
          break
        case 2:
          cv.pitch = value
          break
        case 3:
          cv.pitchScale = value
          break
        case 4:
          cv.feedback = value
          break
        case 5:
          cv.grainSize = value
          break
        case 6:
          cv.mode = value
          break
        case 7:
          cv.bypassIfPitchEq_0 = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.pitch
      yield cv.pitchScale
      yield cv.feedback
      yield cv.grainSize
      yield cv.mode
      yield cv.bypassIfPitchEq_0
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.pitch = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.pitchScale = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.feedback = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.grainSize = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.mode = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.bypassIfPitchEq_0 = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.pitch)
      a.push(this.midiMaps.pitchScale)
      a.push(this.midiMaps.feedback)
      a.push(this.midiMaps.grainSize)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.bypassIfPitchEq_0)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
