/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { CompressorBehavior } from "./compressorBehavior"
import { CompressorControllers } from "./compressorControllers"
import { CompressorControllerValues } from "./compressorControllerValues"
export namespace Compressor {
  // Intentionally duplicated enums - see also compressorEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Peak = 0,
    Rms = 1,
    PeakZeroLatency = 2,
  }
  export enum CtlNum {
    Volume = 1,
    Threshold = 2,
    Slope = 3,
    Attack = 4,
    Release = 5,
    Mode = 6,
    SidechainInput = 7,
  }
  interface CompressorControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    threshold: ControllerMidiMap
    slope: ControllerMidiMap
    attack: ControllerMidiMap
    release: ControllerMidiMap
    mode: ControllerMidiMap
    sidechainInput: ControllerMidiMap
  }
  interface CompressorOptionValues extends OptionValues {}
  class CompressorOptions implements Options {
    constructor(readonly optionValues: CompressorOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Compressor"
    flags = 0x2002051
    readonly typeName = "Compressor"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.threshold = val
      },
      (val: number) => {
        this.controllerValues.slope = val
      },
      (val: number) => {
        this.controllerValues.attack = val
      },
      (val: number) => {
        this.controllerValues.release = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.sidechainInput = val
      },
    ]
    readonly controllerValues: CompressorControllerValues = {
      volume: 256,
      threshold: 256,
      slope: 100,
      attack: 1,
      release: 300,
      mode: Mode.Peak,
      sidechainInput: 0,
    }
    readonly controllers: CompressorControllers = new CompressorControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: CompressorControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      threshold: new ControllerMidiMap(),
      slope: new ControllerMidiMap(),
      attack: new ControllerMidiMap(),
      release: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      sidechainInput: new ControllerMidiMap(),
    }
    readonly optionValues: CompressorOptionValues = {}
    readonly options: CompressorOptions = new CompressorOptions(this.optionValues)
    readonly o = this.options
    behavior?: CompressorBehavior
    constructor() {
      super()
      this.behavior = new CompressorBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.volume = value
          break
        case 2:
          cv.threshold = value
          break
        case 3:
          cv.slope = value
          break
        case 4:
          cv.attack = value
          break
        case 5:
          cv.release = value
          break
        case 6:
          cv.mode = value
          break
        case 7:
          cv.sidechainInput = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.threshold
      yield cv.slope
      yield cv.attack
      yield cv.release
      yield cv.mode
      yield cv.sidechainInput
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.threshold = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.slope = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.attack = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.release = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.mode = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.sidechainInput = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.threshold)
      a.push(this.midiMaps.slope)
      a.push(this.midiMaps.attack)
      a.push(this.midiMaps.release)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.sidechainInput)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
