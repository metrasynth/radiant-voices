/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { GeneratorBehavior } from "./generatorBehavior"
export namespace Generator {
  export const enum Waveform {
    // noinspection JSUnusedGlobalSymbols
    Triangle = 0,
    Saw = 1,
    Square = 2,
    Noise = 3,
    Drawn = 4,
    Sin = 5,
    Hsin = 6,
    Asin = 7,
    Psin = 8,
  }
  export const enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Stereo = 0,
    Mono = 1,
  }
  interface GeneratorControllerValues extends ControllerValues {
    volume: number
    waveform: Waveform
    panning: number
    attack: number
    release: number
    polyphonyCh: number
    mode: Mode
    sustain: boolean
    freqModulationByInput: number
    dutyCycle: number
  }
  class GeneratorControllers implements Controllers {
    constructor(readonly controllerValues: GeneratorControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get volume(): number {
      return this.controllerValues.volume
    }
    // noinspection JSUnusedGlobalSymbols
    set volume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.volume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get waveform(): Waveform {
      return this.controllerValues.waveform
    }
    // noinspection JSUnusedGlobalSymbols
    set waveform(newValue: Waveform) {
      const { controllerValues } = this
      controllerValues.waveform = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get panning(): number {
      return this.controllerValues.panning + -128
    }
    // noinspection JSUnusedGlobalSymbols
    set panning(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, -128), 128)
      controllerValues.panning = newValue - -128
    }
    // noinspection JSUnusedGlobalSymbols
    get attack(): number {
      return this.controllerValues.attack
    }
    // noinspection JSUnusedGlobalSymbols
    set attack(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.attack = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get release(): number {
      return this.controllerValues.release
    }
    // noinspection JSUnusedGlobalSymbols
    set release(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.release = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get polyphonyCh(): number {
      return this.controllerValues.polyphonyCh
    }
    // noinspection JSUnusedGlobalSymbols
    set polyphonyCh(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 1), 16)
      controllerValues.polyphonyCh = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mode(): Mode {
      return this.controllerValues.mode
    }
    // noinspection JSUnusedGlobalSymbols
    set mode(newValue: Mode) {
      const { controllerValues } = this
      controllerValues.mode = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get sustain(): boolean {
      return this.controllerValues.sustain
    }
    // noinspection JSUnusedGlobalSymbols
    set sustain(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.sustain = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get freqModulationByInput(): number {
      return this.controllerValues.freqModulationByInput
    }
    // noinspection JSUnusedGlobalSymbols
    set freqModulationByInput(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.freqModulationByInput = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get dutyCycle(): number {
      return this.controllerValues.dutyCycle
    }
    // noinspection JSUnusedGlobalSymbols
    set dutyCycle(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 1022)
      controllerValues.dutyCycle = newValue
    }
  }
  interface GeneratorControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    waveform: ControllerMidiMap
    panning: ControllerMidiMap
    attack: ControllerMidiMap
    release: ControllerMidiMap
    polyphonyCh: ControllerMidiMap
    mode: ControllerMidiMap
    sustain: ControllerMidiMap
    freqModulationByInput: ControllerMidiMap
    dutyCycle: ControllerMidiMap
  }
  interface GeneratorOptionValues extends OptionValues {}
  class GeneratorOptions implements Options {
    constructor(readonly optionValues: GeneratorOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Generator"
    flags = 89
    readonly typeName = "Generator"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.waveform = val
      },
      (val: number) => {
        this.controllerValues.panning = val
      },
      (val: number) => {
        this.controllerValues.attack = val
      },
      (val: number) => {
        this.controllerValues.release = val
      },
      (val: number) => {
        this.controllerValues.polyphonyCh = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.sustain = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.freqModulationByInput = val
      },
      (val: number) => {
        this.controllerValues.dutyCycle = val
      },
    ]
    readonly controllerValues: GeneratorControllerValues = {
      volume: 128,
      waveform: Waveform.Triangle,
      panning: 0,
      attack: 0,
      release: 0,
      polyphonyCh: 8,
      mode: Mode.Stereo,
      sustain: true,
      freqModulationByInput: 0,
      dutyCycle: 511,
    }
    readonly controllers: GeneratorControllers = new GeneratorControllers(
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: GeneratorControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      waveform: new ControllerMidiMap(),
      panning: new ControllerMidiMap(),
      attack: new ControllerMidiMap(),
      release: new ControllerMidiMap(),
      polyphonyCh: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      sustain: new ControllerMidiMap(),
      freqModulationByInput: new ControllerMidiMap(),
      dutyCycle: new ControllerMidiMap(),
    }
    readonly optionValues: GeneratorOptionValues = {}
    readonly options: GeneratorOptions = new GeneratorOptions(this.optionValues)
    readonly o = this.options
    behavior?: GeneratorBehavior
    constructor() {
      super()
      this.behavior = new GeneratorBehavior(this)
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.waveform
      yield cv.panning
      yield cv.attack
      yield cv.release
      yield cv.polyphonyCh
      yield cv.mode
      yield Number(cv.sustain)
      yield cv.freqModulationByInput
      yield cv.dutyCycle
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.waveform = midiMaps[1]
      this.midiMaps.panning = midiMaps[2]
      this.midiMaps.attack = midiMaps[3]
      this.midiMaps.release = midiMaps[4]
      this.midiMaps.polyphonyCh = midiMaps[5]
      this.midiMaps.mode = midiMaps[6]
      this.midiMaps.sustain = midiMaps[7]
      this.midiMaps.freqModulationByInput = midiMaps[8]
      this.midiMaps.dutyCycle = midiMaps[9]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.waveform)
      a.push(this.midiMaps.panning)
      a.push(this.midiMaps.attack)
      a.push(this.midiMaps.release)
      a.push(this.midiMaps.polyphonyCh)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.sustain)
      a.push(this.midiMaps.freqModulationByInput)
      a.push(this.midiMaps.dutyCycle)
      return a
    }
  }
}
