/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { GeneratorBehavior } from "./generatorBehavior"
import { GeneratorControllers } from "./generatorControllers"
import { GeneratorControllerValues } from "./generatorControllerValues"
import { Waveform as _Waveform } from "./generatorEnums"
import { Mode as _Mode } from "./generatorEnums"
export namespace Generator {
  export const Waveform = _Waveform
  export const Mode = _Mode
  interface GeneratorControllerMidiMaps extends ControllerMidiMaps {
    volume: ControllerMidiMap
    waveform: ControllerMidiMap
    panning: ControllerMidiMap
    attack: ControllerMidiMap
    release: ControllerMidiMap
    polyphonyCh: ControllerMidiMap
    mode: ControllerMidiMap
    sustain: ControllerMidiMap
    freqModulationByInput: ControllerMidiMap
    dutyCycle: ControllerMidiMap
  }
  interface GeneratorOptionValues extends OptionValues {}
  class GeneratorOptions implements Options {
    constructor(readonly optionValues: GeneratorOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Generator"
    flags = 89
    readonly typeName = "Generator"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.volume = val
      },
      (val: number) => {
        this.controllerValues.waveform = val
      },
      (val: number) => {
        this.controllerValues.panning = val
      },
      (val: number) => {
        this.controllerValues.attack = val
      },
      (val: number) => {
        this.controllerValues.release = val
      },
      (val: number) => {
        this.controllerValues.polyphonyCh = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.sustain = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.freqModulationByInput = val
      },
      (val: number) => {
        this.controllerValues.dutyCycle = val
      },
    ]
    readonly controllerValues: GeneratorControllerValues = {
      volume: 128,
      waveform: Waveform.Triangle,
      panning: 0,
      attack: 0,
      release: 0,
      polyphonyCh: 8,
      mode: Mode.Stereo,
      sustain: true,
      freqModulationByInput: 0,
      dutyCycle: 511,
    }
    readonly controllers: GeneratorControllers = new GeneratorControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: GeneratorControllerMidiMaps = {
      volume: new ControllerMidiMap(),
      waveform: new ControllerMidiMap(),
      panning: new ControllerMidiMap(),
      attack: new ControllerMidiMap(),
      release: new ControllerMidiMap(),
      polyphonyCh: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      sustain: new ControllerMidiMap(),
      freqModulationByInput: new ControllerMidiMap(),
      dutyCycle: new ControllerMidiMap(),
    }
    readonly optionValues: GeneratorOptionValues = {}
    readonly options: GeneratorOptions = new GeneratorOptions(this.optionValues)
    readonly o = this.options
    behavior?: GeneratorBehavior
    constructor() {
      super()
      this.behavior = new GeneratorBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.volume
      yield cv.waveform
      yield cv.panning
      yield cv.attack
      yield cv.release
      yield cv.polyphonyCh
      yield cv.mode
      yield Number(cv.sustain)
      yield cv.freqModulationByInput
      yield cv.dutyCycle
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.volume = midiMaps[0]
      this.midiMaps.waveform = midiMaps[1]
      this.midiMaps.panning = midiMaps[2]
      this.midiMaps.attack = midiMaps[3]
      this.midiMaps.release = midiMaps[4]
      this.midiMaps.polyphonyCh = midiMaps[5]
      this.midiMaps.mode = midiMaps[6]
      this.midiMaps.sustain = midiMaps[7]
      this.midiMaps.freqModulationByInput = midiMaps[8]
      this.midiMaps.dutyCycle = midiMaps[9]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.volume)
      a.push(this.midiMaps.waveform)
      a.push(this.midiMaps.panning)
      a.push(this.midiMaps.attack)
      a.push(this.midiMaps.release)
      a.push(this.midiMaps.polyphonyCh)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.sustain)
      a.push(this.midiMaps.freqModulationByInput)
      a.push(this.midiMaps.dutyCycle)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
