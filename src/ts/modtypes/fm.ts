/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { FmBehavior } from "./fmBehavior"
export namespace Fm {
  export const enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Hq = 0,
    HqMono = 1,
    Lq = 2,
    LqMono = 3,
  }
  interface FmControllerValues extends ControllerValues {
    cVolume: number
    mVolume: number
    panning: number
    cFreqRatio: number
    mFreqRatio: number
    mFeedback: number
    cAttack: number
    cDecay: number
    cSustain: number
    cRelease: number
    mAttack: number
    mDecay: number
    mSustain: number
    mRelease: number
    mScalingPerKey: number
    polyphonyCh: number
    mode: Mode
  }
  class FmControllers implements Controllers {
    constructor(readonly controllerValues: FmControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get cVolume(): number {
      return this.controllerValues.cVolume
    }
    // noinspection JSUnusedGlobalSymbols
    set cVolume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.cVolume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mVolume(): number {
      return this.controllerValues.mVolume
    }
    // noinspection JSUnusedGlobalSymbols
    set mVolume(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.mVolume = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get panning(): number {
      return this.controllerValues.panning + -128
    }
    // noinspection JSUnusedGlobalSymbols
    set panning(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, -128), 128)
      controllerValues.panning = newValue - -128
    }
    // noinspection JSUnusedGlobalSymbols
    get cFreqRatio(): number {
      return this.controllerValues.cFreqRatio
    }
    // noinspection JSUnusedGlobalSymbols
    set cFreqRatio(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 16)
      controllerValues.cFreqRatio = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mFreqRatio(): number {
      return this.controllerValues.mFreqRatio
    }
    // noinspection JSUnusedGlobalSymbols
    set mFreqRatio(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 16)
      controllerValues.mFreqRatio = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mFeedback(): number {
      return this.controllerValues.mFeedback
    }
    // noinspection JSUnusedGlobalSymbols
    set mFeedback(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.mFeedback = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get cAttack(): number {
      return this.controllerValues.cAttack
    }
    // noinspection JSUnusedGlobalSymbols
    set cAttack(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.cAttack = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get cDecay(): number {
      return this.controllerValues.cDecay
    }
    // noinspection JSUnusedGlobalSymbols
    set cDecay(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.cDecay = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get cSustain(): number {
      return this.controllerValues.cSustain
    }
    // noinspection JSUnusedGlobalSymbols
    set cSustain(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.cSustain = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get cRelease(): number {
      return this.controllerValues.cRelease
    }
    // noinspection JSUnusedGlobalSymbols
    set cRelease(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.cRelease = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mAttack(): number {
      return this.controllerValues.mAttack
    }
    // noinspection JSUnusedGlobalSymbols
    set mAttack(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.mAttack = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mDecay(): number {
      return this.controllerValues.mDecay
    }
    // noinspection JSUnusedGlobalSymbols
    set mDecay(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.mDecay = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mSustain(): number {
      return this.controllerValues.mSustain
    }
    // noinspection JSUnusedGlobalSymbols
    set mSustain(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.mSustain = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mRelease(): number {
      return this.controllerValues.mRelease
    }
    // noinspection JSUnusedGlobalSymbols
    set mRelease(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 512)
      controllerValues.mRelease = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mScalingPerKey(): number {
      return this.controllerValues.mScalingPerKey
    }
    // noinspection JSUnusedGlobalSymbols
    set mScalingPerKey(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 4)
      controllerValues.mScalingPerKey = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get polyphonyCh(): number {
      return this.controllerValues.polyphonyCh
    }
    // noinspection JSUnusedGlobalSymbols
    set polyphonyCh(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 1), 16)
      controllerValues.polyphonyCh = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get mode(): Mode {
      return this.controllerValues.mode
    }
    // noinspection JSUnusedGlobalSymbols
    set mode(newValue: Mode) {
      const { controllerValues } = this
      controllerValues.mode = newValue
    }
  }
  interface FmControllerMidiMaps extends ControllerMidiMaps {
    cVolume: ControllerMidiMap
    mVolume: ControllerMidiMap
    panning: ControllerMidiMap
    cFreqRatio: ControllerMidiMap
    mFreqRatio: ControllerMidiMap
    mFeedback: ControllerMidiMap
    cAttack: ControllerMidiMap
    cDecay: ControllerMidiMap
    cSustain: ControllerMidiMap
    cRelease: ControllerMidiMap
    mAttack: ControllerMidiMap
    mDecay: ControllerMidiMap
    mSustain: ControllerMidiMap
    mRelease: ControllerMidiMap
    mScalingPerKey: ControllerMidiMap
    polyphonyCh: ControllerMidiMap
    mode: ControllerMidiMap
  }
  interface FmOptionValues extends OptionValues {}
  class FmOptions implements Options {
    constructor(readonly optionValues: FmOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "FM"
    flags = 73
    readonly typeName = "FM"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.cVolume = val
      },
      (val: number) => {
        this.controllerValues.mVolume = val
      },
      (val: number) => {
        this.controllerValues.panning = val
      },
      (val: number) => {
        this.controllerValues.cFreqRatio = val
      },
      (val: number) => {
        this.controllerValues.mFreqRatio = val
      },
      (val: number) => {
        this.controllerValues.mFeedback = val
      },
      (val: number) => {
        this.controllerValues.cAttack = val
      },
      (val: number) => {
        this.controllerValues.cDecay = val
      },
      (val: number) => {
        this.controllerValues.cSustain = val
      },
      (val: number) => {
        this.controllerValues.cRelease = val
      },
      (val: number) => {
        this.controllerValues.mAttack = val
      },
      (val: number) => {
        this.controllerValues.mDecay = val
      },
      (val: number) => {
        this.controllerValues.mSustain = val
      },
      (val: number) => {
        this.controllerValues.mRelease = val
      },
      (val: number) => {
        this.controllerValues.mScalingPerKey = val
      },
      (val: number) => {
        this.controllerValues.polyphonyCh = val
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
    ]
    readonly controllerValues: FmControllerValues = {
      cVolume: 128,
      mVolume: 48,
      panning: 0,
      cFreqRatio: 1,
      mFreqRatio: 1,
      mFeedback: 0,
      cAttack: 32,
      cDecay: 32,
      cSustain: 128,
      cRelease: 64,
      mAttack: 32,
      mDecay: 32,
      mSustain: 128,
      mRelease: 64,
      mScalingPerKey: 0,
      polyphonyCh: 4,
      mode: Mode.Hq,
    }
    readonly controllers: FmControllers = new FmControllers(this.controllerValues)
    readonly c = this.controllers
    readonly midiMaps: FmControllerMidiMaps = {
      cVolume: new ControllerMidiMap(),
      mVolume: new ControllerMidiMap(),
      panning: new ControllerMidiMap(),
      cFreqRatio: new ControllerMidiMap(),
      mFreqRatio: new ControllerMidiMap(),
      mFeedback: new ControllerMidiMap(),
      cAttack: new ControllerMidiMap(),
      cDecay: new ControllerMidiMap(),
      cSustain: new ControllerMidiMap(),
      cRelease: new ControllerMidiMap(),
      mAttack: new ControllerMidiMap(),
      mDecay: new ControllerMidiMap(),
      mSustain: new ControllerMidiMap(),
      mRelease: new ControllerMidiMap(),
      mScalingPerKey: new ControllerMidiMap(),
      polyphonyCh: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
    }
    readonly optionValues: FmOptionValues = {}
    readonly options: FmOptions = new FmOptions(this.optionValues)
    readonly o = this.options
    behavior?: FmBehavior
    constructor() {
      super()
      this.behavior = new FmBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.cVolume
      yield cv.mVolume
      yield cv.panning
      yield cv.cFreqRatio
      yield cv.mFreqRatio
      yield cv.mFeedback
      yield cv.cAttack
      yield cv.cDecay
      yield cv.cSustain
      yield cv.cRelease
      yield cv.mAttack
      yield cv.mDecay
      yield cv.mSustain
      yield cv.mRelease
      yield cv.mScalingPerKey
      yield cv.polyphonyCh
      yield cv.mode
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.cVolume = midiMaps[0]
      this.midiMaps.mVolume = midiMaps[1]
      this.midiMaps.panning = midiMaps[2]
      this.midiMaps.cFreqRatio = midiMaps[3]
      this.midiMaps.mFreqRatio = midiMaps[4]
      this.midiMaps.mFeedback = midiMaps[5]
      this.midiMaps.cAttack = midiMaps[6]
      this.midiMaps.cDecay = midiMaps[7]
      this.midiMaps.cSustain = midiMaps[8]
      this.midiMaps.cRelease = midiMaps[9]
      this.midiMaps.mAttack = midiMaps[10]
      this.midiMaps.mDecay = midiMaps[11]
      this.midiMaps.mSustain = midiMaps[12]
      this.midiMaps.mRelease = midiMaps[13]
      this.midiMaps.mScalingPerKey = midiMaps[14]
      this.midiMaps.polyphonyCh = midiMaps[15]
      this.midiMaps.mode = midiMaps[16]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.cVolume)
      a.push(this.midiMaps.mVolume)
      a.push(this.midiMaps.panning)
      a.push(this.midiMaps.cFreqRatio)
      a.push(this.midiMaps.mFreqRatio)
      a.push(this.midiMaps.mFeedback)
      a.push(this.midiMaps.cAttack)
      a.push(this.midiMaps.cDecay)
      a.push(this.midiMaps.cSustain)
      a.push(this.midiMaps.cRelease)
      a.push(this.midiMaps.mAttack)
      a.push(this.midiMaps.mDecay)
      a.push(this.midiMaps.mSustain)
      a.push(this.midiMaps.mRelease)
      a.push(this.midiMaps.mScalingPerKey)
      a.push(this.midiMaps.polyphonyCh)
      a.push(this.midiMaps.mode)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
