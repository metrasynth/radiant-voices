/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { ModuleBase } from "./moduleBase"
import {
  ControllerValues,
  Controllers,
  ModuleType,
  OptionValues,
  Options,
} from "./moduleType"
import { GpioBehavior } from "./gpioBehavior"
export namespace Gpio {
  interface GpioControllerValues extends ControllerValues {
    out: boolean
    outPin: number
    outThreshold: number
    in: boolean
    inPin: number
    inNote: number
    inAmplitude: number
  }
  class GpioControllers implements Controllers {
    constructor(readonly controllerValues: GpioControllerValues) {}
    // noinspection JSUnusedGlobalSymbols
    get out(): boolean {
      return this.controllerValues.out
    }
    // noinspection JSUnusedGlobalSymbols
    set out(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.out = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get outPin(): number {
      return this.controllerValues.outPin
    }
    // noinspection JSUnusedGlobalSymbols
    set outPin(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.outPin = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get outThreshold(): number {
      return this.controllerValues.outThreshold
    }
    // noinspection JSUnusedGlobalSymbols
    set outThreshold(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 100)
      controllerValues.outThreshold = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get in(): boolean {
      return this.controllerValues.in
    }
    // noinspection JSUnusedGlobalSymbols
    set in(newValue: boolean) {
      const { controllerValues } = this
      controllerValues.in = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get inPin(): number {
      return this.controllerValues.inPin
    }
    // noinspection JSUnusedGlobalSymbols
    set inPin(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 256)
      controllerValues.inPin = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get inNote(): number {
      return this.controllerValues.inNote
    }
    // noinspection JSUnusedGlobalSymbols
    set inNote(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 128)
      controllerValues.inNote = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get inAmplitude(): number {
      return this.controllerValues.inAmplitude
    }
    // noinspection JSUnusedGlobalSymbols
    set inAmplitude(newValue: number) {
      const { controllerValues } = this
      newValue = Math.min(Math.max(newValue, 0), 100)
      controllerValues.inAmplitude = newValue
    }
  }
  interface GpioControllerMidiMaps extends ControllerMidiMaps {
    out: ControllerMidiMap
    outPin: ControllerMidiMap
    outThreshold: ControllerMidiMap
    in: ControllerMidiMap
    inPin: ControllerMidiMap
    inNote: ControllerMidiMap
    inAmplitude: ControllerMidiMap
  }
  interface GpioOptionValues extends OptionValues {}
  class GpioOptions implements Options {
    constructor(readonly optionValues: GpioOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "GPIO"
    flags = 81
    readonly typeName = "GPIO"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.out = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.outPin = val
      },
      (val: number) => {
        this.controllerValues.outThreshold = val
      },
      (val: number) => {
        this.controllerValues.in = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.inPin = val
      },
      (val: number) => {
        this.controllerValues.inNote = val
      },
      (val: number) => {
        this.controllerValues.inAmplitude = val
      },
    ]
    readonly controllerValues: GpioControllerValues = {
      out: false,
      outPin: 0,
      outThreshold: 50,
      in: false,
      inPin: 0,
      inNote: 0,
      inAmplitude: 100,
    }
    readonly controllers: GpioControllers = new GpioControllers(this.controllerValues)
    readonly c = this.controllers
    readonly midiMaps: GpioControllerMidiMaps = {
      out: new ControllerMidiMap(),
      outPin: new ControllerMidiMap(),
      outThreshold: new ControllerMidiMap(),
      in: new ControllerMidiMap(),
      inPin: new ControllerMidiMap(),
      inNote: new ControllerMidiMap(),
      inAmplitude: new ControllerMidiMap(),
    }
    readonly optionValues: GpioOptionValues = {}
    readonly options: GpioOptions = new GpioOptions(this.optionValues)
    readonly o = this.options
    behavior?: GpioBehavior
    constructor() {
      super()
      this.behavior = new GpioBehavior(this)
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield Number(cv.out)
      yield cv.outPin
      yield cv.outThreshold
      yield Number(cv.in)
      yield cv.inPin
      yield cv.inNote
      yield cv.inAmplitude
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.out = midiMaps[0]
      this.midiMaps.outPin = midiMaps[1]
      this.midiMaps.outThreshold = midiMaps[2]
      this.midiMaps.in = midiMaps[3]
      this.midiMaps.inPin = midiMaps[4]
      this.midiMaps.inNote = midiMaps[5]
      this.midiMaps.inAmplitude = midiMaps[6]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.out)
      a.push(this.midiMaps.outPin)
      a.push(this.midiMaps.outThreshold)
      a.push(this.midiMaps.in)
      a.push(this.midiMaps.inPin)
      a.push(this.midiMaps.inNote)
      a.push(this.midiMaps.inAmplitude)
      return a
    }
  }
}
