/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers, ModuleType } from "./moduleType"
import { FftControllerValues } from "./fftControllerValues"
// @ts-ignore
// noinspection ES6UnusedImports
import { SampleRate } from "./fftEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Channels } from "./fftEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { Buffer } from "./fftEnums"
// @ts-ignore
// noinspection ES6UnusedImports
import { BufferOverlap } from "./fftEnums"
export class FftBaseControllers implements Controllers {
  constructor(
    readonly module: ModuleType,
    readonly controllerValues: FftControllerValues
  ) {}
  // noinspection JSUnusedGlobalSymbols
  get sampleRate(): SampleRate {
    return this.controllerValues.sampleRate
  }
  // noinspection JSUnusedGlobalSymbols
  set sampleRate(newValue: SampleRate) {
    const { controllerValues } = this
    controllerValues.sampleRate = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get channels(): Channels {
    return this.controllerValues.channels
  }
  // noinspection JSUnusedGlobalSymbols
  set channels(newValue: Channels) {
    const { controllerValues } = this
    controllerValues.channels = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get buffer(): Buffer {
    return this.controllerValues.buffer
  }
  // noinspection JSUnusedGlobalSymbols
  set buffer(newValue: Buffer) {
    const { controllerValues } = this
    controllerValues.buffer = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get bufOverlap(): BufferOverlap {
    return this.controllerValues.bufOverlap
  }
  // noinspection JSUnusedGlobalSymbols
  set bufOverlap(newValue: BufferOverlap) {
    const { controllerValues } = this
    controllerValues.bufOverlap = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get feedback(): number {
    return this.controllerValues.feedback
  }
  // noinspection JSUnusedGlobalSymbols
  set feedback(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.feedback = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get noiseReduction(): number {
    return this.controllerValues.noiseReduction
  }
  // noinspection JSUnusedGlobalSymbols
  set noiseReduction(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.noiseReduction = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get phaseGain(): number {
    return this.controllerValues.phaseGain
  }
  // noinspection JSUnusedGlobalSymbols
  set phaseGain(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.phaseGain = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get allPassFilter(): number {
    return this.controllerValues.allPassFilter
  }
  // noinspection JSUnusedGlobalSymbols
  set allPassFilter(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.allPassFilter = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get frequencySpread(): number {
    return this.controllerValues.frequencySpread
  }
  // noinspection JSUnusedGlobalSymbols
  set frequencySpread(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.frequencySpread = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get randomPhase(): number {
    return this.controllerValues.randomPhase
  }
  // noinspection JSUnusedGlobalSymbols
  set randomPhase(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.randomPhase = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get randomPhaseLite(): number {
    return this.controllerValues.randomPhaseLite
  }
  // noinspection JSUnusedGlobalSymbols
  set randomPhaseLite(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.randomPhaseLite = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get freqShift(): number {
    return this.controllerValues.freqShift + -16384
  }
  // noinspection JSUnusedGlobalSymbols
  set freqShift(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, -16384), 16384)
    controllerValues.freqShift = newValue - -16384
  }
  // noinspection JSUnusedGlobalSymbols
  get deform1(): number {
    return this.controllerValues.deform1
  }
  // noinspection JSUnusedGlobalSymbols
  set deform1(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.deform1 = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get deform2(): number {
    return this.controllerValues.deform2
  }
  // noinspection JSUnusedGlobalSymbols
  set deform2(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.deform2 = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get hpCutoff(): number {
    return this.controllerValues.hpCutoff
  }
  // noinspection JSUnusedGlobalSymbols
  set hpCutoff(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.hpCutoff = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get lpCutoff(): number {
    return this.controllerValues.lpCutoff
  }
  // noinspection JSUnusedGlobalSymbols
  set lpCutoff(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.lpCutoff = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get volume(): number {
    return this.controllerValues.volume
  }
  // noinspection JSUnusedGlobalSymbols
  set volume(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 32768)
    controllerValues.volume = newValue
  }
}
