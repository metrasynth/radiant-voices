/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { Pitch2CtlBehavior } from "./pitch2CtlBehavior"
import { Pitch2CtlControllers } from "./pitch2CtlControllers"
import { Pitch2CtlControllerValues } from "./pitch2CtlControllerValues"
export namespace Pitch2Ctl {
  // Intentionally duplicated enums - see also pitch2CtlEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    FrequencyHz = 0,
    Pitch = 1,
  }
  export enum NoteOffAction {
    // noinspection JSUnusedGlobalSymbols
    DoNothing = 0,
    PitchDown = 1,
    PitchUp = 2,
  }
  export enum CtlNum {
    Mode = 1,
    NoteOffAction = 2,
    FirstNote = 3,
    Range = 4,
    OutMin = 5,
    OutMax = 6,
    OutController = 7,
  }
  interface Pitch2CtlControllerMidiMaps extends ControllerMidiMaps {
    mode: ControllerMidiMap
    noteOffAction: ControllerMidiMap
    firstNote: ControllerMidiMap
    range: ControllerMidiMap
    outMin: ControllerMidiMap
    outMax: ControllerMidiMap
    outController: ControllerMidiMap
  }
  interface Pitch2CtlOptionValues extends OptionValues {}
  class Pitch2CtlOptions implements Options {
    constructor(readonly optionValues: Pitch2CtlOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Pitch2Ctl"
    flags = 0x1020049
    readonly typeName = "Pitch2Ctl"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.noteOffAction = val
      },
      (val: number) => {
        this.controllerValues.firstNote = val
      },
      (val: number) => {
        this.controllerValues.range = val
      },
      (val: number) => {
        this.controllerValues.outMin = val
      },
      (val: number) => {
        this.controllerValues.outMax = val
      },
      (val: number) => {
        this.controllerValues.outController = val
      },
    ]
    readonly controllerValues: Pitch2CtlControllerValues = {
      mode: Mode.FrequencyHz,
      noteOffAction: NoteOffAction.DoNothing,
      firstNote: 0,
      range: 120,
      outMin: 0,
      outMax: 32768,
      outController: 0,
    }
    readonly controllers: Pitch2CtlControllers = new Pitch2CtlControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: Pitch2CtlControllerMidiMaps = {
      mode: new ControllerMidiMap(),
      noteOffAction: new ControllerMidiMap(),
      firstNote: new ControllerMidiMap(),
      range: new ControllerMidiMap(),
      outMin: new ControllerMidiMap(),
      outMax: new ControllerMidiMap(),
      outController: new ControllerMidiMap(),
    }
    readonly optionValues: Pitch2CtlOptionValues = {}
    readonly options: Pitch2CtlOptions = new Pitch2CtlOptions(this.optionValues)
    readonly o = this.options
    behavior?: Pitch2CtlBehavior
    constructor() {
      super()
      this.behavior = new Pitch2CtlBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.mode = value
          break
        case 2:
          cv.noteOffAction = value
          break
        case 3:
          cv.firstNote = value
          break
        case 4:
          cv.range = value
          break
        case 5:
          cv.outMin = value
          break
        case 6:
          cv.outMax = value
          break
        case 7:
          cv.outController = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.mode
      yield cv.noteOffAction
      yield cv.firstNote
      yield cv.range
      yield cv.outMin
      yield cv.outMax
      yield cv.outController
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.mode = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.noteOffAction = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.firstNote = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.range = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.outMin = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.outMax = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.outController = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.noteOffAction)
      a.push(this.midiMaps.firstNote)
      a.push(this.midiMaps.range)
      a.push(this.midiMaps.outMin)
      a.push(this.midiMaps.outMax)
      a.push(this.midiMaps.outController)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
