/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { Pitch2CtlBehavior } from "./pitch2CtlBehavior"
import { Pitch2CtlControllers } from "./pitch2CtlControllers"
import { Pitch2CtlControllerValues } from "./pitch2CtlControllerValues"
import { Mode as _Mode } from "./pitch2CtlEnums"
import { NoteOffAction as _NoteOffAction } from "./pitch2CtlEnums"
export namespace Pitch2Ctl {
  export const Mode = _Mode
  export const NoteOffAction = _NoteOffAction
  interface Pitch2CtlControllerMidiMaps extends ControllerMidiMaps {
    mode: ControllerMidiMap
    noteOffAction: ControllerMidiMap
    firstNote: ControllerMidiMap
    numberOfSemitones: ControllerMidiMap
    outMin: ControllerMidiMap
    outMax: ControllerMidiMap
    outController: ControllerMidiMap
  }
  interface Pitch2CtlOptionValues extends OptionValues {}
  class Pitch2CtlOptions implements Options {
    constructor(readonly optionValues: Pitch2CtlOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Pitch2Ctl"
    flags = 131145
    readonly typeName = "Pitch2Ctl"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.noteOffAction = val
      },
      (val: number) => {
        this.controllerValues.firstNote = val
      },
      (val: number) => {
        this.controllerValues.numberOfSemitones = val
      },
      (val: number) => {
        this.controllerValues.outMin = val
      },
      (val: number) => {
        this.controllerValues.outMax = val
      },
      (val: number) => {
        this.controllerValues.outController = val
      },
    ]
    readonly controllerValues: Pitch2CtlControllerValues = {
      mode: Mode.FrequencyHz,
      noteOffAction: NoteOffAction.DoNothing,
      firstNote: 0,
      numberOfSemitones: 120,
      outMin: 0,
      outMax: 32768,
      outController: 0,
    }
    readonly controllers: Pitch2CtlControllers = new Pitch2CtlControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: Pitch2CtlControllerMidiMaps = {
      mode: new ControllerMidiMap(),
      noteOffAction: new ControllerMidiMap(),
      firstNote: new ControllerMidiMap(),
      numberOfSemitones: new ControllerMidiMap(),
      outMin: new ControllerMidiMap(),
      outMax: new ControllerMidiMap(),
      outController: new ControllerMidiMap(),
    }
    readonly optionValues: Pitch2CtlOptionValues = {}
    readonly options: Pitch2CtlOptions = new Pitch2CtlOptions(this.optionValues)
    readonly o = this.options
    behavior?: Pitch2CtlBehavior
    constructor() {
      super()
      this.behavior = new Pitch2CtlBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.mode
      yield cv.noteOffAction
      yield cv.firstNote
      yield cv.numberOfSemitones
      yield cv.outMin
      yield cv.outMax
      yield cv.outController
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.mode = midiMaps[0]
      this.midiMaps.noteOffAction = midiMaps[1]
      this.midiMaps.firstNote = midiMaps[2]
      this.midiMaps.numberOfSemitones = midiMaps[3]
      this.midiMaps.outMin = midiMaps[4]
      this.midiMaps.outMax = midiMaps[5]
      this.midiMaps.outController = midiMaps[6]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.noteOffAction)
      a.push(this.midiMaps.firstNote)
      a.push(this.midiMaps.numberOfSemitones)
      a.push(this.midiMaps.outMin)
      a.push(this.midiMaps.outMax)
      a.push(this.midiMaps.outController)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
