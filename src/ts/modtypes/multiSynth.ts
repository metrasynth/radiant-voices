/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { ModuleDataChunks } from "../moduleDataChunk"
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { MultiSynthBehavior } from "./multiSynthBehavior"
import { MultiSynthControllers } from "./multiSynthControllers"
import { MultiSynthControllerValues } from "./multiSynthControllerValues"
export namespace MultiSynth {
  interface MultiSynthControllerMidiMaps extends ControllerMidiMaps {
    transpose: ControllerMidiMap
    randomPitch: ControllerMidiMap
    velocity: ControllerMidiMap
    finetune: ControllerMidiMap
    randomPhase: ControllerMidiMap
    randomVelocity: ControllerMidiMap
    phase: ControllerMidiMap
    curve2Influence: ControllerMidiMap
  }
  interface MultiSynthOptionValues extends OptionValues {
    useStaticNote_C5: boolean
    ignoreNotesWithZeroVelocity: boolean
    vvCurveActive: boolean
    trigger: boolean
    generateMissedNoteOffCommands: boolean
  }
  class MultiSynthOptions implements Options {
    constructor(readonly optionValues: MultiSynthOptionValues) {}
    // noinspection JSUnusedGlobalSymbols
    get useStaticNote_C5(): boolean {
      return this.optionValues.useStaticNote_C5
    }
    // noinspection JSUnusedGlobalSymbols
    set useStaticNote_C5(newValue: boolean) {
      this.optionValues.useStaticNote_C5 = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get ignoreNotesWithZeroVelocity(): boolean {
      return this.optionValues.ignoreNotesWithZeroVelocity
    }
    // noinspection JSUnusedGlobalSymbols
    set ignoreNotesWithZeroVelocity(newValue: boolean) {
      this.optionValues.ignoreNotesWithZeroVelocity = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get vvCurveActive(): boolean {
      return this.optionValues.vvCurveActive
    }
    // noinspection JSUnusedGlobalSymbols
    set vvCurveActive(newValue: boolean) {
      this.optionValues.vvCurveActive = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get trigger(): boolean {
      return this.optionValues.trigger
    }
    // noinspection JSUnusedGlobalSymbols
    set trigger(newValue: boolean) {
      this.optionValues.trigger = newValue
    }
    // noinspection JSUnusedGlobalSymbols
    get generateMissedNoteOffCommands(): boolean {
      return this.optionValues.generateMissedNoteOffCommands
    }
    // noinspection JSUnusedGlobalSymbols
    set generateMissedNoteOffCommands(newValue: boolean) {
      this.optionValues.generateMissedNoteOffCommands = newValue
    }
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "MultiSynth"
    flags = 135241
    readonly typeName = "MultiSynth"
    readonly optionsChnm = 1
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.transpose = val
      },
      (val: number) => {
        this.controllerValues.randomPitch = val
      },
      (val: number) => {
        this.controllerValues.velocity = val
      },
      (val: number) => {
        this.controllerValues.finetune = val
      },
      (val: number) => {
        this.controllerValues.randomPhase = val
      },
      (val: number) => {
        this.controllerValues.randomVelocity = val
      },
      (val: number) => {
        this.controllerValues.phase = val
      },
      (val: number) => {
        this.controllerValues.curve2Influence = val
      },
    ]
    readonly controllerValues: MultiSynthControllerValues = {
      transpose: 0,
      randomPitch: 0,
      velocity: 256,
      finetune: 0,
      randomPhase: 0,
      randomVelocity: 0,
      phase: 0,
      curve2Influence: 256,
    }
    readonly controllers: MultiSynthControllers = new MultiSynthControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: MultiSynthControllerMidiMaps = {
      transpose: new ControllerMidiMap(),
      randomPitch: new ControllerMidiMap(),
      velocity: new ControllerMidiMap(),
      finetune: new ControllerMidiMap(),
      randomPhase: new ControllerMidiMap(),
      randomVelocity: new ControllerMidiMap(),
      phase: new ControllerMidiMap(),
      curve2Influence: new ControllerMidiMap(),
    }
    readonly optionValues: MultiSynthOptionValues = {
      useStaticNote_C5: false,
      ignoreNotesWithZeroVelocity: false,
      vvCurveActive: false,
      trigger: false,
      generateMissedNoteOffCommands: false,
    }
    readonly options: MultiSynthOptions = new MultiSynthOptions(this.optionValues)
    readonly o = this.options
    behavior?: MultiSynthBehavior
    constructor() {
      super()
      this.behavior = new MultiSynthBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.transpose
      yield cv.randomPitch
      yield cv.velocity
      yield cv.finetune
      yield cv.randomPhase
      yield cv.randomVelocity
      yield cv.phase
      yield cv.curve2Influence
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.transpose = midiMaps[0]
      this.midiMaps.randomPitch = midiMaps[1]
      this.midiMaps.velocity = midiMaps[2]
      this.midiMaps.finetune = midiMaps[3]
      this.midiMaps.randomPhase = midiMaps[4]
      this.midiMaps.randomVelocity = midiMaps[5]
      this.midiMaps.phase = midiMaps[6]
      this.midiMaps.curve2Influence = midiMaps[7]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.transpose)
      a.push(this.midiMaps.randomPitch)
      a.push(this.midiMaps.velocity)
      a.push(this.midiMaps.finetune)
      a.push(this.midiMaps.randomPhase)
      a.push(this.midiMaps.randomVelocity)
      a.push(this.midiMaps.phase)
      a.push(this.midiMaps.curve2Influence)
      return a
    }
    rawOptionBytes(): Uint8Array {
      const bytes = new Uint8Array(5)
      const { optionValues: ov } = this
      bytes[0] = Number(ov.useStaticNote_C5)
      bytes[1] = Number(ov.ignoreNotesWithZeroVelocity)
      bytes[2] = Number(ov.vvCurveActive)
      bytes[3] = Number(ov.trigger)
      bytes[4] = Number(ov.generateMissedNoteOffCommands)
      return bytes
    }
    setOptions(dataChunks: ModuleDataChunks) {
      let chdt
      for (const dataChunk of dataChunks) {
        if (dataChunk.chnm == this.optionsChnm) {
          chdt = dataChunk.chdt
          break
        }
      }
      if (chdt) {
        this.optionValues.useStaticNote_C5 = Boolean(chdt[0])
        this.optionValues.ignoreNotesWithZeroVelocity = Boolean(chdt[1])
        this.optionValues.vvCurveActive = Boolean(chdt[2])
        this.optionValues.trigger = Boolean(chdt[3])
        this.optionValues.generateMissedNoteOffCommands = Boolean(chdt[4])
      }
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
