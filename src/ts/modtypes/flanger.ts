/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { FlangerBehavior } from "./flangerBehavior"
import { FlangerControllers } from "./flangerControllers"
import { FlangerControllerValues } from "./flangerControllerValues"
export namespace Flanger {
  // Intentionally duplicated enums - see also flangerEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum LfoWaveform {
    // noinspection JSUnusedGlobalSymbols
    Hsin = 0,
    Sin = 1,
  }
  export enum LfoFreqUnit {
    // noinspection JSUnusedGlobalSymbols
    Hz_0_05 = 0,
    Ms = 1,
    Hz = 2,
    Tick = 3,
    Line = 4,
    Line_2 = 5,
    Line_3 = 6,
  }
  export enum CtlNum {
    Dry = 1,
    Wet = 2,
    Feedback = 3,
    Delay = 4,
    Response = 5,
    LfoFreq = 6,
    LfoAmp = 7,
    LfoWaveform = 8,
    SetLfoPhase = 9,
    LfoFreqUnit = 10,
  }
  interface FlangerControllerMidiMaps extends ControllerMidiMaps {
    dry: ControllerMidiMap
    wet: ControllerMidiMap
    feedback: ControllerMidiMap
    delay: ControllerMidiMap
    response: ControllerMidiMap
    lfoFreq: ControllerMidiMap
    lfoAmp: ControllerMidiMap
    lfoWaveform: ControllerMidiMap
    setLfoPhase: ControllerMidiMap
    lfoFreqUnit: ControllerMidiMap
  }
  interface FlangerOptionValues extends OptionValues {}
  class FlangerOptions implements Options {
    constructor(readonly optionValues: FlangerOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Flanger"
    flags = 1105
    readonly typeName = "Flanger"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.dry = val
      },
      (val: number) => {
        this.controllerValues.wet = val
      },
      (val: number) => {
        this.controllerValues.feedback = val
      },
      (val: number) => {
        this.controllerValues.delay = val
      },
      (val: number) => {
        this.controllerValues.response = val
      },
      (val: number) => {
        this.controllerValues.lfoFreq = val
      },
      (val: number) => {
        this.controllerValues.lfoAmp = val
      },
      (val: number) => {
        this.controllerValues.lfoWaveform = val
      },
      (val: number) => {
        this.controllerValues.setLfoPhase = val
      },
      (val: number) => {
        this.controllerValues.lfoFreqUnit = val
      },
    ]
    readonly controllerValues: FlangerControllerValues = {
      dry: 256,
      wet: 128,
      feedback: 128,
      delay: 200,
      response: 2,
      lfoFreq: 8,
      lfoAmp: 32,
      lfoWaveform: LfoWaveform.Hsin,
      setLfoPhase: 0,
      lfoFreqUnit: LfoFreqUnit.Hz_0_05,
    }
    readonly controllers: FlangerControllers = new FlangerControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: FlangerControllerMidiMaps = {
      dry: new ControllerMidiMap(),
      wet: new ControllerMidiMap(),
      feedback: new ControllerMidiMap(),
      delay: new ControllerMidiMap(),
      response: new ControllerMidiMap(),
      lfoFreq: new ControllerMidiMap(),
      lfoAmp: new ControllerMidiMap(),
      lfoWaveform: new ControllerMidiMap(),
      setLfoPhase: new ControllerMidiMap(),
      lfoFreqUnit: new ControllerMidiMap(),
    }
    readonly optionValues: FlangerOptionValues = {}
    readonly options: FlangerOptions = new FlangerOptions(this.optionValues)
    readonly o = this.options
    behavior?: FlangerBehavior
    constructor() {
      super()
      this.behavior = new FlangerBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.dry = value
          break
        case 2:
          cv.wet = value
          break
        case 3:
          cv.feedback = value
          break
        case 4:
          cv.delay = value
          break
        case 5:
          cv.response = value
          break
        case 6:
          cv.lfoFreq = value
          break
        case 7:
          cv.lfoAmp = value
          break
        case 8:
          cv.lfoWaveform = value
          break
        case 9:
          cv.setLfoPhase = value
          break
        case 10:
          cv.lfoFreqUnit = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.dry
      yield cv.wet
      yield cv.feedback
      yield cv.delay
      yield cv.response
      yield cv.lfoFreq
      yield cv.lfoAmp
      yield cv.lfoWaveform
      yield cv.setLfoPhase
      yield cv.lfoFreqUnit
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.dry = midiMaps[0]
      this.midiMaps.wet = midiMaps[1]
      this.midiMaps.feedback = midiMaps[2]
      this.midiMaps.delay = midiMaps[3]
      this.midiMaps.response = midiMaps[4]
      this.midiMaps.lfoFreq = midiMaps[5]
      this.midiMaps.lfoAmp = midiMaps[6]
      this.midiMaps.lfoWaveform = midiMaps[7]
      this.midiMaps.setLfoPhase = midiMaps[8]
      this.midiMaps.lfoFreqUnit = midiMaps[9]
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.dry)
      a.push(this.midiMaps.wet)
      a.push(this.midiMaps.feedback)
      a.push(this.midiMaps.delay)
      a.push(this.midiMaps.response)
      a.push(this.midiMaps.lfoFreq)
      a.push(this.midiMaps.lfoAmp)
      a.push(this.midiMaps.lfoWaveform)
      a.push(this.midiMaps.setLfoPhase)
      a.push(this.midiMaps.lfoFreqUnit)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
