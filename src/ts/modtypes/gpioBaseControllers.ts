/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { Controllers } from "./moduleType"
import { GpioControllerValues } from "./gpioControllerValues"
export class GpioBaseControllers implements Controllers {
  constructor(readonly controllerValues: GpioControllerValues) {}
  // noinspection JSUnusedGlobalSymbols
  get out(): boolean {
    return this.controllerValues.out
  }
  // noinspection JSUnusedGlobalSymbols
  set out(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.out = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get outPin(): number {
    return this.controllerValues.outPin
  }
  // noinspection JSUnusedGlobalSymbols
  set outPin(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.outPin = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get outThreshold(): number {
    return this.controllerValues.outThreshold
  }
  // noinspection JSUnusedGlobalSymbols
  set outThreshold(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 100)
    controllerValues.outThreshold = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get in(): boolean {
    return this.controllerValues.in
  }
  // noinspection JSUnusedGlobalSymbols
  set in(newValue: boolean) {
    const { controllerValues } = this
    controllerValues.in = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get inPin(): number {
    return this.controllerValues.inPin
  }
  // noinspection JSUnusedGlobalSymbols
  set inPin(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 256)
    controllerValues.inPin = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get inNote(): number {
    return this.controllerValues.inNote
  }
  // noinspection JSUnusedGlobalSymbols
  set inNote(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 128)
    controllerValues.inNote = newValue
  }
  // noinspection JSUnusedGlobalSymbols
  get inAmplitude(): number {
    return this.controllerValues.inAmplitude
  }
  // noinspection JSUnusedGlobalSymbols
  set inAmplitude(newValue: number) {
    const { controllerValues } = this
    newValue = Math.min(Math.max(newValue, 0), 100)
    controllerValues.inAmplitude = newValue
  }
}
