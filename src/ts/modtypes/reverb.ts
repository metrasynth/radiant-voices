/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */
import { MidiMap, ControllerMidiMap, ControllerMidiMaps } from "../controllerMidiMap"
import { Project } from "../project"
import { ModuleBase } from "./moduleBase"
import { ModuleType, OptionValues, Options } from "./moduleType"
import { ReverbBehavior } from "./reverbBehavior"
import { ReverbControllers } from "./reverbControllers"
import { ReverbControllerValues } from "./reverbControllerValues"
export namespace Reverb {
  // Intentionally duplicated enums - see also reverbEnums.ts
  // (TypeScript does not allow exporting imported enums from inside a namespace)
  export enum Mode {
    // noinspection JSUnusedGlobalSymbols
    Hq = 0,
    HqMono = 1,
    Lq = 2,
    LqMono = 3,
  }
  export enum AllPassFilter {
    // noinspection JSUnusedGlobalSymbols
    Off = 0,
    On = 1,
    OnImproved = 2,
  }
  export enum CtlNum {
    Dry = 1,
    Wet = 2,
    Feedback = 3,
    Damp = 4,
    StereoWidth = 5,
    Freeze = 6,
    Mode = 7,
    AllPassFilter = 8,
    RoomSize = 9,
    RandomSeed = 10,
  }
  interface ReverbControllerMidiMaps extends ControllerMidiMaps {
    dry: ControllerMidiMap
    wet: ControllerMidiMap
    feedback: ControllerMidiMap
    damp: ControllerMidiMap
    stereoWidth: ControllerMidiMap
    freeze: ControllerMidiMap
    mode: ControllerMidiMap
    allPassFilter: ControllerMidiMap
    roomSize: ControllerMidiMap
    randomSeed: ControllerMidiMap
  }
  interface ReverbOptionValues extends OptionValues {}
  class ReverbOptions implements Options {
    constructor(readonly optionValues: ReverbOptionValues) {}
  }
  export class Module extends ModuleBase implements ModuleType {
    name = "Reverb"
    flags = 0x51
    readonly typeName = "Reverb"
    readonly controllerSetters = [
      (val: number) => {
        this.controllerValues.dry = val
      },
      (val: number) => {
        this.controllerValues.wet = val
      },
      (val: number) => {
        this.controllerValues.feedback = val
      },
      (val: number) => {
        this.controllerValues.damp = val
      },
      (val: number) => {
        this.controllerValues.stereoWidth = val
      },
      (val: number) => {
        this.controllerValues.freeze = Boolean(val)
      },
      (val: number) => {
        this.controllerValues.mode = val
      },
      (val: number) => {
        this.controllerValues.allPassFilter = val
      },
      (val: number) => {
        this.controllerValues.roomSize = val
      },
      (val: number) => {
        this.controllerValues.randomSeed = val
      },
    ]
    readonly controllerValues: ReverbControllerValues = {
      dry: 256,
      wet: 40,
      feedback: 256,
      damp: 128,
      stereoWidth: 256,
      freeze: false,
      mode: Mode.Hq,
      allPassFilter: AllPassFilter.On,
      roomSize: 16,
      randomSeed: 0,
    }
    readonly controllers: ReverbControllers = new ReverbControllers(
      this,
      this.controllerValues
    )
    readonly c = this.controllers
    readonly midiMaps: ReverbControllerMidiMaps = {
      dry: new ControllerMidiMap(),
      wet: new ControllerMidiMap(),
      feedback: new ControllerMidiMap(),
      damp: new ControllerMidiMap(),
      stereoWidth: new ControllerMidiMap(),
      freeze: new ControllerMidiMap(),
      mode: new ControllerMidiMap(),
      allPassFilter: new ControllerMidiMap(),
      roomSize: new ControllerMidiMap(),
      randomSeed: new ControllerMidiMap(),
    }
    readonly optionValues: ReverbOptionValues = {}
    readonly options: ReverbOptions = new ReverbOptions(this.optionValues)
    readonly o = this.options
    behavior?: ReverbBehavior
    constructor() {
      super()
      this.behavior = new ReverbBehavior(this)
    }
    attachTo(project: Project): AttachedModule {
      return super.attachTo(project) as AttachedModule
    }
    setRawControllerValue(ctlNum: number, value: number) {
      const { controllerValues: cv } = this
      switch (ctlNum) {
        case 1:
          cv.dry = value
          break
        case 2:
          cv.wet = value
          break
        case 3:
          cv.feedback = value
          break
        case 4:
          cv.damp = value
          break
        case 5:
          cv.stereoWidth = value
          break
        case 6:
          cv.freeze = Boolean(value)
          break
        case 7:
          cv.mode = value
          break
        case 8:
          cv.allPassFilter = value
          break
        case 9:
          cv.roomSize = value
          break
        case 10:
          cv.randomSeed = value
          break
      }
    }
    *rawControllerValues(): Generator<number> {
      const { controllerValues: cv } = this
      yield cv.dry
      yield cv.wet
      yield cv.feedback
      yield cv.damp
      yield cv.stereoWidth
      yield Number(cv.freeze)
      yield cv.mode
      yield cv.allPassFilter
      yield cv.roomSize
      yield cv.randomSeed
    }
    setMidiMaps(midiMaps: MidiMap[]) {
      this.midiMaps.dry = midiMaps[0] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.wet = midiMaps[1] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.feedback = midiMaps[2] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.damp = midiMaps[3] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.stereoWidth = midiMaps[4] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.freeze = midiMaps[5] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.mode = midiMaps[6] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.allPassFilter = midiMaps[7] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.roomSize = midiMaps[8] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
      this.midiMaps.randomSeed = midiMaps[9] || {
        channel: 0,
        messageType: 0,
        messageParameter: 0,
        slope: 0,
      }
    }
    midiMapsArray(): MidiMap[] {
      const a: MidiMap[] = []
      a.push(this.midiMaps.dry)
      a.push(this.midiMaps.wet)
      a.push(this.midiMaps.feedback)
      a.push(this.midiMaps.damp)
      a.push(this.midiMaps.stereoWidth)
      a.push(this.midiMaps.freeze)
      a.push(this.midiMaps.mode)
      a.push(this.midiMaps.allPassFilter)
      a.push(this.midiMaps.roomSize)
      a.push(this.midiMaps.randomSeed)
      return a
    }
  }
  export class AttachedModule extends Module {
    get index(): number {
      if (this._index === undefined) {
        throw new Error("Attached module has empty index")
      }
      return this._index
    }
    set index(_: number) {
      throw new Error("Module index can only be assigned once")
    }
  }
}
