/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */

{% if modtype.options %}
    import { ModuleDataChunks } from "../moduleDataChunk"
{% endif %}
{% if modtype.controllers %}
    import {
        MidiMap,
        ControllerMidiMap,
        ControllerMidiMaps,
    } from "../controllerMidiMap"
{% endif %}

import { Project } from "../project"

import { ModuleBase } from "./moduleBase"
import {
    ModuleType,
    OptionValues,
    Options,
} from "./moduleType"

import { {{ modtype_name }}Behavior } from "./{{ modtype_name | camelcase }}Behavior"
import { {{ modtype_name }}Controllers } from "./{{ modtype_name | camelcase }}Controllers"
import { {{ modtype_name }}ControllerValues } from "./{{ modtype_name | camelcase }}ControllerValues"

export namespace {{ modtype_name }} {

    {% if modtype.enums %}
        // Intentionally duplicated enums - see also {{ modtype_name | camelcase }}Enums.ts
        // (TypeScript does not allow exporting imported enums from inside a namespace)
    {% endif %}
    {% for ename, e in (modtype.enums or {}).items() %}
        export enum {{ ename }} {
            // noinspection JSUnusedGlobalSymbols
            {% for ekey, eval in e.items() %}
                {{ ekey | enumname | pascalcase }} = {{ eval }},
            {% endfor %}
        }
    {% endfor %}

    {% if modtype.controllers %}
        export enum CtlNum {
            {% for num, ctl in enumerate(modtype.controllers, 1) %}{% for cname, cdef in ctl.items() %}
                {{ cname | pascalcase }} = {{ num }},
            {% endfor %}{% endfor %}
        }
        interface {{ modtype_name }}ControllerMidiMaps extends ControllerMidiMaps {
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {{ cname | camelcase }}: ControllerMidiMap
            {% endfor %}{% endfor %}
        }
    {% endif %}

    interface {{ modtype_name }}OptionValues extends OptionValues {
        {% for opt in modtype.options %}{% for oname, ospec in opt.items() %}
            {{ oname | camelcase }}:
            {% if ospec.enum %}
                {{ ospec.enum }}
            {% elif ospec.max %}
                number
            {% else %}
                boolean
            {% endif %}
            ,
        {% endfor %}{% endfor %}
    }

    class {{ modtype_name }}Options implements Options {
        constructor(readonly optionValues: {{ modtype_name }}OptionValues) {}
        {% for opt in modtype.options %}{% for oname, ospec in opt.items() %}
            {% if ospec.enum %}
                {% set otype = ospec.enum %}
            {% elif ospec.max %}
                {% set otype = "number" %}
            {% else %}
                {% set otype = "boolean" %}
            {% endif %}
            // noinspection JSUnusedGlobalSymbols
            get {{ oname | camelcase }}(): {{ otype }} {
                return this.optionValues.{{ oname | camelcase }}
            }
            // noinspection JSUnusedGlobalSymbols
            set {{ oname | camelcase }}(newValue: {{ otype }}) {
                {% if ospec.max %}
                    if (
                        newValue < {{ ospec.min }}
                        ||
                        newValue > {{ ospec.max }}
                    ) {
                        throw new Error("Option value is out of range")
                    }
                {% endif %}
                this.optionValues.{{ oname | camelcase }} = newValue
                {% if ospec.exclusive_of %}
                    {% for exclusive_of in ospec.exclusive_of %}
                        this.optionValues.{{ exclusive_of | camelcase }} = false
                    {% endfor %}
                {% endif %}
            }
        {% endfor %}{% endfor %}
    }

    export class Module extends ModuleBase implements ModuleType {
        name = {{ (modtype.type or modtype_name) | repr }}
        flags = {{ (modtype.defaultFlags or 0) | hex }}
        readonly typeName = {{ (modtype.type or modtype_name) | repr }}
        {% if modtype.options %}
            readonly optionsChnm = {{ modtype.options_chnm }}
        {% endif %}

        readonly controllerSetters = [
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {% set cname = cname | camelcase %}
                {% if "bool" in cdef %}
                    {% set ctype = "boolean" %}
                {% elif "enum" in cdef and "default" in cdef %}
                    {% set ctype = cdef.enum %}
                {% else %}
                    {% set ctype = "number" %}
                {% endif %}
                (val: number) => {
                    this.controllerValues.{{ cname }} =
                    {% if ctype == "boolean" %}
                        Boolean(val)
                    {% else %}
                        val
                    {% endif %}
                },
            {% endfor %}{% endfor %}
        ]
        readonly controllerValues: {{ modtype_name }}ControllerValues = {
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {{ cname | camelcase }}:
                {% if "bool" in cdef %}
                    {% if cdef.default %}true{% else %}false{% endif %}
                {% elif "enum" in cdef and "default" in cdef %}
                    {{ cdef.enum }}.{{ cdef.default | enumname | pascalcase }}
                {% else %}
                    {{ cdef.default }}
                {% endif %}
                ,
            {% endfor %}{% endfor %}
        }
        readonly controllers: {{ modtype_name }}Controllers =
            new {{ modtype_name }}Controllers(this, this.controllerValues)
        readonly c = this.controllers

        {% if modtype.controllers %}
            readonly midiMaps: {{ modtype_name }}ControllerMidiMaps = {
                {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                    {{ cname | camelcase }}:
                        new ControllerMidiMap(),
                {% endfor %}{% endfor %}
            }
        {% endif %}

        readonly optionValues: {{ modtype_name }}OptionValues = {
            {% for opt in modtype.options %}{% for oname, ospec in opt.items() %}
                {{ oname | camelcase }}:
                {% if ospec.enum %}
                    {{ ospec.enum }}.{{ ospec.default | enumname | pascalcase }}
                {% elif ospec.max %}
                    0
                {% else %}
                    {% if ospec.default %}true{% else %}false{% endif %}
                {% endif %}
                ,
            {% endfor %}{% endfor %}
        }
        readonly options: {{ modtype_name }}Options =
            new {{ modtype_name }}Options(this.optionValues)
        readonly o = this.options

        behavior?: {{ modtype_name }}Behavior

        constructor() {
            super()
            this.behavior = new {{ modtype_name }}Behavior(this)
        }

        attachTo(project: Project): AttachedModule {
            return super.attachTo(project) as AttachedModule
        }

        {% if modtype.controllers %}
            setRawControllerValue(ctlNum: number, value: number) {
                const { controllerValues: cv } = this
                switch (ctlNum) {
                    {% for ctl_num, ctl in enumerate(modtype.controllers, 1) %}{% for cname, cdef in ctl.items() %}
                        {% set cname = cname | camelcase %}
                        case {{ ctl_num }}:
                            cv.{{ cname }} = {% if "bool" in cdef %}Boolean(value){% else %}value{% endif %}
                            break
                    {% endfor %}{% endfor %}
                }
            }

            *rawControllerValues(): Generator<number> {
                const { controllerValues: cv } = this
                {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                    {% if "bool" in cdef %}
                        yield Number(cv.{{ cname | camelcase }})
                    {% else %}
                        yield cv.{{ cname | camelcase }}
                    {% endif %}
                {% endfor %}{% endfor %}
            }

            setMidiMaps(midiMaps: MidiMap[]) {
                {% for idx, ctl in enumerate(modtype.controllers) %}{% for cname, cdef in ctl.items() %}
                    this.midiMaps.{{ cname | camelcase }} =
                        midiMaps[{{ idx }}]
                        || { channel: 0, messageType: 0, messageParameter: 0, slope: 0 }
                {% endfor %}{% endfor %}
            }

            midiMapsArray(): MidiMap[] {
                const a: MidiMap[] = []
                {% for idx, ctl in enumerate(modtype.controllers) %}{% for cname, cdef in ctl.items() %}
                    a.push(this.midiMaps.{{ cname | camelcase }})
                {% endfor %}{% endfor %}
                return a
            }
        {% endif %}

        {% if modtype.options %}
            rawOptionBytes(): Uint8Array {
                const bytes = new Uint8Array({{ len(modtype.options) }})
                const { optionValues: ov } = this
                {% for opt in modtype.options %}{% for oname, ospec in opt.items() %}
                    bytes[{{ ospec.byte }}] |= (
                        Number(
                            {% if ospec.inverted %}!{% endif %}
                            ov.{{ oname | camelcase }}
                        )
                        & (2 ** {{ ospec.size }} - 1)
                    ) << {{ ospec.bit }}
                {% endfor %}{% endfor %}
                return bytes
            }

            setOptions(dataChunks: ModuleDataChunks) {
                let chdt;
                for (const dataChunk of dataChunks) {
                    if (dataChunk.chnm == this.optionsChnm) {
                        chdt = dataChunk.chdt
                        break
                    }
                }
                if (chdt) {
                    {% for opt in modtype.options %}{% for oname, ospec in opt.items() %}
                        this.optionValues.{{ oname | camelcase }} =
                            {% if ospec.inverted %}!{% endif %}
                            {% if ospec.size == 1 %}Boolean({% endif %}
                            chdt[{{ ospec.byte }}] >> {{ ospec.bit }} & (2 ** {{ ospec.size }} - 1)
                            {% if ospec.size == 1 %}){% endif %}
                    {% endfor %}{% endfor %}
                }
            }
        {% endif %}
    }

    export class AttachedModule extends Module {
        get index(): number {
            if (this._index === undefined) {
                throw new Error("Attached module has empty index")
            }
            return this._index
        }

        set index(_: number) {
            throw new Error("Module index can only be assigned once")
        }
    }
}
