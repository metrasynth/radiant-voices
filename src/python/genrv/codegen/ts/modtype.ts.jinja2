/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */

{% if modtype.options %}
    import { ModuleDataChunks } from "../moduleDataChunk"
{% endif %}
{% if modtype.controllers %}
    import {
        MidiMap,
        ControllerMidiMap,
        ControllerMidiMaps,
    } from "../controllerMidiMap"
{% endif %}

import { ModuleBase } from "./moduleBase"
import {
    ControllerValues,
    Controllers,
    ModuleType,
    OptionValues,
    Options,
} from "./moduleType"

import { {{ modtype_name }}Behavior } from "./{{ modtype_name | camelcase }}Behavior"

export namespace {{ modtype_name }} {

    {% for ename, e in (modtype.enums or {}).items() %}
        export const enum {{ ename }} {
            // noinspection JSUnusedGlobalSymbols
            {% for ekey, eval in e.items() %}
                {{ ekey | enumname | pascalcase }} = {{ eval }},
            {% endfor %}
        }
    {% endfor %}

    interface {{ modtype_name }}ControllerValues extends ControllerValues {
        {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
            {{ cname | camelcase }}:
                {% if cdef.enum %}
                    {{ cdef.enum }}
                {% elif cdef.bool %}
                    boolean
                {% else %}
                    number
                {% endif %}
            ,
        {% endfor %}{% endfor %}
    }

    class {{ modtype_name }}Controllers implements Controllers {
        constructor(readonly controllerValues: {{ modtype_name }}ControllerValues) {}
        {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
            {% set cname = cname | camelcase %}
            {% if "bool" in cdef %}
                {% set ctype = "boolean" %}
            {% elif "enum" in cdef and "default" in cdef %}
                {% set ctype = cdef.enum %}
            {% else %}
                {% set ctype = "number" %}
            {% endif %}
            // noinspection JSUnusedGlobalSymbols
            get {{ cname }}(): {{ ctype }} {
                return (
                    this.controllerValues.{{ cname }}
                    {% if cdef.min and cdef.min < 0 and not cdef.no_offset %}
                        + {{ cdef.min }}
                    {% endif %}
                )
            }
            // noinspection JSUnusedGlobalSymbols
            set {{ cname }}(newValue: {{ ctype }}) {
                const { controllerValues } = this
                {% if "min" in cdef %}
                    newValue = Math.min(
                        Math.max(newValue, {{ cdef.min }}),
                        {{ cdef.max }}
                    )
                {% elif "depends_on" in cdef %}
                    switch (this.controllerValues.{{ cdef.depends_on | camelcase }}) {
                        {% for ctl2 in modtype.controllers %}
                        {% for cname2, cdef2 in ctl2.items() %}
                            {% if cname2 == cdef.depends_on %}
                                {% set case_ename = cdef2.enum %}
                                {% for casename, caserange in cdef.ranges.items() %}
                                    case {{ case_ename }}.
                                            {{ casename | enumname | pascalcase }}:
                                        newValue = Math.min(
                                            Math.max(newValue, {{ caserange.min }}),
                                            {{ caserange.max }}
                                        )
                                        break;
                                {% endfor %}
                            {% endif %}
                        {% endfor %}
                        {% endfor %}
                    }
                {% endif %}
                controllerValues.{{ cname }} = (
                    newValue
                    {% if cdef.min and cdef.min < 0 and not cdef.no_offset %}
                        - {{ cdef.min }}
                    {% endif %}
                )
                {% for ctl2 in modtype.controllers %}
                {% for cname2, cdef2 in ctl2.items() %}
                    {% set cname2 = cname2 | camelcase %}
                    {% if cname == cdef2.depends_on | camelcase %}
                        this.{{ cname2 | camelcase }} = this.{{ cname2 | camelcase }}
                    {% endif %}
                {% endfor %}
                {% endfor %}
            }
        {% endfor %}{% endfor %}
    }

    {% if modtype.controllers %}
        interface {{ modtype_name }}ControllerMidiMaps extends ControllerMidiMaps {
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {{ cname | camelcase }}: ControllerMidiMap
            {% endfor %}{% endfor %}
        }
    {% endif %}

    interface {{ modtype_name }}OptionValues extends OptionValues {
        {% for opt in modtype.options %}{% for oname, odefault in opt.items() %}
            {{ oname | camelcase }}:
            {% if odefault.max %}
                number
            {% else %}
                boolean
            {% endif %}
            ,
        {% endfor %}{% endfor %}
    }

    class {{ modtype_name }}Options implements Options {
        constructor(readonly optionValues: {{ modtype_name }}OptionValues) {}
        {% for opt in modtype.options %}{% for oname, odefault in opt.items() %}
            {% if odefault.max %}
                {% set otype = "number" %}
            {% else %}
                {% set otype = "boolean" %}
            {% endif %}
            // noinspection JSUnusedGlobalSymbols
            get {{ oname | camelcase }}(): {{ otype }} {
                return this.optionValues.{{ oname | camelcase }}
            }
            // noinspection JSUnusedGlobalSymbols
            set {{ oname | camelcase }}(newValue: {{ otype }}) {
                {% if odefault.max %}
                    if (
                        newValue < {{ odefault.min }}
                        ||
                        newValue > {{ odefault.max }}
                    ) {
                        throw new Error("Option value is out of range")
                    }
                {% endif %}
                this.optionValues.{{ oname | camelcase }} = newValue
            }
        {% endfor %}{% endfor %}
    }

    export class Module extends ModuleBase implements ModuleType {
        name = {{ (modtype.type or modtype_name) | repr }}
        flags = {{ (modtype.defaultFlags or 0) | repr }}
        readonly typeName = {{ (modtype.type or modtype_name) | repr }}
        {% if modtype.options %}
            readonly optionsChnm = {{ modtype.options_chnm }}
        {% endif %}

        readonly controllerSetters = [
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {% set cname = cname | camelcase %}
                {% if "bool" in cdef %}
                    {% set ctype = "boolean" %}
                {% elif "enum" in cdef and "default" in cdef %}
                    {% set ctype = cdef.enum %}
                {% else %}
                    {% set ctype = "number" %}
                {% endif %}
                (val: number) => {
                    this.controllerValues.{{ cname }} =
                    {% if ctype == "boolean" %}
                        Boolean(val)
                    {% else %}
                        val
                    {% endif %}
                },
            {% endfor %}{% endfor %}
        ]
        readonly controllerValues: {{ modtype_name }}ControllerValues = {
            {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                {{ cname | camelcase }}:
                {% if "bool" in cdef %}
                    {% if cdef.default %}true{% else %}false{% endif %}
                {% elif "enum" in cdef and "default" in cdef %}
                    {{ cdef.enum }}.{{ cdef.default | enumname | pascalcase }}
                {% else %}
                    {{ cdef.default }}
                {% endif %}
                ,
            {% endfor %}{% endfor %}
        }
        readonly controllers: {{ modtype_name }}Controllers =
            new {{ modtype_name }}Controllers(this.controllerValues)
        readonly c = this.controllers

        {% if modtype.controllers %}
            readonly midiMaps: {{ modtype_name }}ControllerMidiMaps = {
                {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                    {{ cname | camelcase }}:
                        new ControllerMidiMap(),
                {% endfor %}{% endfor %}
            }
        {% endif %}

        readonly optionValues: {{ modtype_name }}OptionValues = {
            {% for opt in modtype.options %}{% for oname, odefault in opt.items() %}
                {{ oname | camelcase }}:
                {% if odefault.max %}
                    0
                {% else %}
                    {% if odefault %}true{% else %}false{% endif %}
                {% endif %}
                ,
            {% endfor %}{% endfor %}
        }
        readonly options: {{ modtype_name }}Options =
            new {{ modtype_name }}Options(this.optionValues)
        readonly o = this.options

        behavior?: {{ modtype_name }}Behavior

        constructor() {
            super()
            this.behavior = new {{ modtype_name }}Behavior(this)
        }

        {% if modtype.controllers %}
            *rawControllerValues(): Generator<number> {
                const { controllerValues: cv } = this
                {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
                    {% if "bool" in cdef %}
                        yield Number(cv.{{ cname | camelcase }})
                    {% else %}
                        yield cv.{{ cname | camelcase }}
                    {% endif %}
                {% endfor %}{% endfor %}
            }

            setMidiMaps(midiMaps: MidiMap[]) {
                {% for idx, ctl in enumerate(modtype.controllers) %}{% for cname, cdef in ctl.items() %}
                    this.midiMaps.{{ cname | camelcase }} = midiMaps[{{ idx }}]
                {% endfor %}{% endfor %}
            }

            midiMapsArray(): MidiMap[] {
                const a: MidiMap[] = []
                {% for idx, ctl in enumerate(modtype.controllers) %}{% for cname, cdef in ctl.items() %}
                    a.push(this.midiMaps.{{ cname | camelcase }})
                {% endfor %}{% endfor %}
                return a
            }
        {% endif %}

        {% if modtype.options %}
            rawOptionBytes(): Uint8Array {
                const bytes = new Uint8Array({{ len(modtype.options) }})
                const { optionValues: ov } = this
                {% for idx, opt in enumerate(modtype.options) %}{% for oname, odefault in opt.items() %}
                    bytes[{{ idx }}] =
                        (
                            {% if odefault.max %}
                                ov.{{ oname | camelcase }}
                            {% else %}
                                Number(
                                    {% if odefault == True %}!{% endif %}
                                    ov.{{ oname | camelcase }}
                                )
                            {% endif %}
                        )
                {% endfor %}{% endfor %}
                return bytes
            }

            setOptions(dataChunks: ModuleDataChunks) {
                let chdt;
                for (const dataChunk of dataChunks) {
                    if (dataChunk.chnm == this.optionsChnm) {
                        chdt = dataChunk.chdt
                        break
                    }
                }
                if (chdt) {
                    {% for idx, opt in enumerate(modtype.options) %}{% for oname, odefault in opt.items() %}
                        this.optionValues.{{ oname | camelcase }} =
                            {% if odefault == True %}!{% endif %}(
                                {% if odefault.max %}
                                    chdt[{{ idx }}]
                                {% else %}
                                    Boolean(chdt[{{ idx }}])
                                {% endif %}
                            )
                    {% endfor %}{% endfor %}
                }
            }
        {% endif %}
    }
}
