/**
 * -- DO NOT EDIT THIS FILE DIRECTLY --
 *
 * This file was auto-generated by genrv.
 */

import { Controllers } from "./moduleType"
import { {{ modtype_name }}ControllerValues } from "./{{ modtype_name | camelcase }}ControllerValues"

{% for ename, e in (modtype.enums or {}).items() %}
// @ts-ignore
// noinspection ES6UnusedImports
import { {{ ename }} } from "./{{ modtype_name | camelcase }}Enums"
{% endfor %}

export class {{ modtype_name }}BaseControllers implements Controllers {
    constructor(readonly controllerValues: {{ modtype_name }}ControllerValues) {}
    {% for ctl in modtype.controllers %}{% for cname, cdef in ctl.items() %}
        {% set cname = cname | camelcase %}
        {% if "bool" in cdef %}
            {% set ctype = "boolean" %}
        {% elif "enum" in cdef and "default" in cdef %}
            {% set ctype = cdef.enum %}
        {% else %}
            {% set ctype = "number" %}
        {% endif %}
        // noinspection JSUnusedGlobalSymbols
        get {{ cname }}(): {{ ctype }} {
            return (
                this.controllerValues.{{ cname }}
                {% if cdef.min and cdef.min < 0 and not cdef.no_offset %}
                    + {{ cdef.min }}
                {% endif %}
            )
        }
        // noinspection JSUnusedGlobalSymbols
        set {{ cname }}(newValue: {{ ctype }}) {
            const { controllerValues } = this
            {% if "min" in cdef %}
                newValue = Math.min(
                    Math.max(newValue, {{ cdef.min }}),
                    {{ cdef.max }}
                )
            {% elif "depends_on" in cdef %}
                switch (this.controllerValues.{{ cdef.depends_on | camelcase }}) {
                    {% for ctl2 in modtype.controllers %}
                    {% for cname2, cdef2 in ctl2.items() %}
                        {% if cname2 == cdef.depends_on %}
                            {% set case_ename = cdef2.enum %}
                            {% for casename, caserange in cdef.ranges.items() %}
                                case {{ case_ename }}.
                                        {{ casename | enumname | pascalcase }}:
                                    newValue = Math.min(
                                        Math.max(newValue, {{ caserange.min }}),
                                        {{ caserange.max }}
                                    )
                                    break;
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                    {% endfor %}
                }
            {% endif %}
            controllerValues.{{ cname }} = (
                newValue
                {% if cdef.min and cdef.min < 0 and not cdef.no_offset %}
                    - {{ cdef.min }}
                {% endif %}
            )
            {% for ctl2 in modtype.controllers %}
            {% for cname2, cdef2 in ctl2.items() %}
                {% set cname2 = cname2 | camelcase %}
                {% if cname == cdef2.depends_on | camelcase %}
                    this.{{ cname2 | camelcase }} = this.{{ cname2 | camelcase }}
                {% endif %}
            {% endfor %}
            {% endfor %}
        }
    {% endfor %}{% endfor %}
}
