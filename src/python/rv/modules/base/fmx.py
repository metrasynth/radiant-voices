# -- DO NOT EDIT THIS FILE DIRECTLY --
"""
Base class for Fmx
This file was auto-generated by genrv.
"""
from enum import IntEnum

from rv.chunks import ArrayChunk
from rv.controller import Controller


class BaseFmx:
    name = "Fmx"
    mtype = "FMX"
    mgroup = "Synth"
    flags = 0x59

    class SampleRate(IntEnum):
        _8000hz = 0
        _11025hz = 1
        _16000hz = 2
        _22050hz = 3
        _32000hz = 4
        _44100hz = 5
        native = 6

    class Channels(IntEnum):
        mono = 0
        stereo = 1

    class InputCustomWaveform(IntEnum):
        off = 0
        single_cycle = 1
        continuous = 2

    class AdsrSmoothTransitions(IntEnum):
        off = 0
        restart_and_volume_change = 1
        restart_smoother_and_volume_change = 2
        volume_change = 3

    class AdsrCurve(IntEnum):
        linear = 0
        exp1 = 1
        exp2 = 2
        neg_exp1 = 3
        neg_exp2 = 4
        sin = 5

    class Sustain(IntEnum):
        off = 0
        on = 1
        repeat = 2

    class Waveform(IntEnum):
        custom = 0
        triangle = 1
        triangle_pow_3 = 2
        saw = 3
        saw_pow_3 = 4
        square = 5
        sin = 6
        hsin = 7
        asin = 8
        sin_pow_3 = 9

    class ModulationType(IntEnum):
        phase = 0
        frequency = 1
        amplitude_mul = 2
        add = 3
        sub = 4
        min = 5
        max = 6
        bitwise_and = 7
        bitwise_xor = 8

    volume = Controller((0, 32768), 16384)
    panning = Controller((0, 256), 128)
    sample_rate = Controller(SampleRate, SampleRate._44100hz)
    polyphony = Controller((1, 32), 4)
    channels = Controller(Channels, Channels.mono)
    input_to_operator = Controller((0, 5), 0)
    input_to_custom_waveform = Controller(InputCustomWaveform, InputCustomWaveform.off)
    adsr_smooth_transitions = Controller(
        AdsrSmoothTransitions, AdsrSmoothTransitions.restart_smoother_and_volume_change
    )
    noise_filter = Controller((0, 32768), 32768)
    op1_volume = Controller((0, 32768), 32768)
    op2_volume = Controller((0, 32768), 32768)
    op3_volume = Controller((0, 32768), 32768)
    op4_volume = Controller((0, 32768), 32768)
    op5_volume = Controller((0, 32768), 32768)
    op1_attack = Controller((0, 10000), 100)
    op2_attack = Controller((0, 10000), 100)
    op3_attack = Controller((0, 10000), 100)
    op4_attack = Controller((0, 10000), 100)
    op5_attack = Controller((0, 10000), 100)
    op1_decay = Controller((0, 10000), 100)
    op2_decay = Controller((0, 10000), 100)
    op3_decay = Controller((0, 10000), 100)
    op4_decay = Controller((0, 10000), 100)
    op5_decay = Controller((0, 10000), 100)
    op1_sustain_level = Controller((0, 32768), 16384)
    op2_sustain_level = Controller((0, 32768), 16384)
    op3_sustain_level = Controller((0, 32768), 16384)
    op4_sustain_level = Controller((0, 32768), 16384)
    op5_sustain_level = Controller((0, 32768), 16384)
    op1_release = Controller((0, 10000), 100)
    op2_release = Controller((0, 10000), 100)
    op3_release = Controller((0, 10000), 100)
    op4_release = Controller((0, 10000), 100)
    op5_release = Controller((0, 10000), 100)
    op1_attack_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op2_attack_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op3_attack_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op4_attack_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op5_attack_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op1_decay_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op2_decay_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op3_decay_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op4_decay_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op5_decay_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op1_release_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op2_release_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op3_release_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op4_release_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op5_release_curve = Controller(AdsrCurve, AdsrCurve.linear)
    op1_sustain = Controller(Sustain, Sustain.off)
    op2_sustain = Controller(Sustain, Sustain.off)
    op3_sustain = Controller(Sustain, Sustain.off)
    op4_sustain = Controller(Sustain, Sustain.off)
    op5_sustain = Controller(Sustain, Sustain.off)
    op1_sustain_pedal = Controller(bool, False)
    op2_sustain_pedal = Controller(bool, False)
    op3_sustain_pedal = Controller(bool, False)
    op4_sustain_pedal = Controller(bool, False)
    op5_sustain_pedal = Controller(bool, False)
    op1_envelope_scaling_per_key = Controller((-128, 128), 0)
    op2_envelope_scaling_per_key = Controller((-128, 128), 0)
    op3_envelope_scaling_per_key = Controller((-128, 128), 0)
    op4_envelope_scaling_per_key = Controller((-128, 128), 0)
    op5_envelope_scaling_per_key = Controller((-128, 128), 0)
    op1_volume_scaling_per_key = Controller((-128, 128), 0)
    op2_volume_scaling_per_key = Controller((-128, 128), 0)
    op3_volume_scaling_per_key = Controller((-128, 128), 0)
    op4_volume_scaling_per_key = Controller((-128, 128), 0)
    op5_volume_scaling_per_key = Controller((-128, 128), 0)
    op1_velocity_sensitivity = Controller((-128, 128), 64)
    op2_velocity_sensitivity = Controller((-128, 128), 64)
    op3_velocity_sensitivity = Controller((-128, 128), 64)
    op4_velocity_sensitivity = Controller((-128, 128), 64)
    op5_velocity_sensitivity = Controller((-128, 128), 64)
    op1_waveform = Controller(Waveform, Waveform.sin)
    op2_waveform = Controller(Waveform, Waveform.sin)
    op3_waveform = Controller(Waveform, Waveform.sin)
    op4_waveform = Controller(Waveform, Waveform.sin)
    op5_waveform = Controller(Waveform, Waveform.sin)
    op1_noise = Controller((0, 32768), 0)
    op2_noise = Controller((0, 32768), 0)
    op3_noise = Controller((0, 32768), 0)
    op4_noise = Controller((0, 32768), 0)
    op5_noise = Controller((0, 32768), 0)
    op1_phase = Controller((0, 32768), 0)
    op2_phase = Controller((0, 32768), 0)
    op3_phase = Controller((0, 32768), 0)
    op4_phase = Controller((0, 32768), 0)
    op5_phase = Controller((0, 32768), 0)
    op1_freq_multiply = Controller((0, 32000), 1000)
    op2_freq_multiply = Controller((0, 32000), 1000)
    op3_freq_multiply = Controller((0, 32000), 1000)
    op4_freq_multiply = Controller((0, 32000), 1000)
    op5_freq_multiply = Controller((0, 32000), 1000)
    op1_constant_pitch = Controller((-8192, 8192), 0)
    op2_constant_pitch = Controller((-8192, 8192), 0)
    op3_constant_pitch = Controller((-8192, 8192), 0)
    op4_constant_pitch = Controller((-8192, 8192), 0)
    op5_constant_pitch = Controller((-8192, 8192), 0)
    op1_self_modulation = Controller((0, 32768), 0)
    op2_self_modulation = Controller((0, 32768), 0)
    op3_self_modulation = Controller((0, 32768), 0)
    op4_self_modulation = Controller((0, 32768), 0)
    op5_self_modulation = Controller((0, 32768), 0)
    op1_feedback = Controller((0, 32768), 0)
    op2_feedback = Controller((0, 32768), 0)
    op3_feedback = Controller((0, 32768), 0)
    op4_feedback = Controller((0, 32768), 0)
    op5_feedback = Controller((0, 32768), 0)
    op1_modulation_type = Controller(ModulationType, ModulationType.phase)
    op2_modulation_type = Controller(ModulationType, ModulationType.phase)
    op3_modulation_type = Controller(ModulationType, ModulationType.phase)
    op4_modulation_type = Controller(ModulationType, ModulationType.phase)
    op5_modulation_type = Controller(ModulationType, ModulationType.phase)
    op1_output_mode = Controller((0, 31), 0)
    op2_output_mode = Controller((0, 15), 0)
    op3_output_mode = Controller((0, 7), 0)
    op4_output_mode = Controller((0, 3), 0)

    class custom_waveform_chunk(ArrayChunk):
        chnm = 0
        length = 256
        type = None
        element_size = None
        default = 0
