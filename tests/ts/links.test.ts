import { m, Project } from "@radiant-voices"
import { Linkables } from "@radiant-voices/links"

type Amp = m.Amplifier.Module

describe("linking modules together", () => {
  let project: Project
  let mod1: Amp
  let mod2: Amp
  let mod3: Amp
  let mod4: Amp
  beforeEach(() => {
    project = new Project()
    mod1 = m.amplifier().attachTo(project)
    mod2 = m.amplifier().attachTo(project)
    mod3 = m.amplifier().attachTo(project)
    mod4 = m.amplifier().attachTo(project)
  })
  test("linkFrom module-module", () => {
    const result = mod1.linkFrom(mod2).linkFrom(mod3).linkFrom(mod4)
    expect(result).toBe(mod4)
    expect(mod1.inLinks).toEqual([mod2.index])
    expect(mod2.inLinks).toEqual([mod3.index])
    expect(mod3.inLinks).toEqual([mod4.index])
    expect(mod4.inLinks).toEqual([])
    expect(mod1.inLinkSlots).toEqual([0])
    expect(mod2.inLinkSlots).toEqual([0])
    expect(mod3.inLinkSlots).toEqual([0])
    expect(mod4.inLinkSlots).toEqual([])
    expect(mod1.outLinks).toEqual([])
    expect(mod2.outLinks).toEqual([mod1.index])
    expect(mod3.outLinks).toEqual([mod2.index])
    expect(mod4.outLinks).toEqual([mod3.index])
    expect(mod1.outLinkSlots).toEqual([])
    expect(mod2.outLinkSlots).toEqual([0])
    expect(mod3.outLinkSlots).toEqual([0])
    expect(mod4.outLinkSlots).toEqual([0])
  })
  test("linkTo module-module", () => {
    const result = mod1.linkTo(mod2).linkTo(mod3).linkTo(mod4)
    expect(result).toBe(mod4)
    expect(mod1.inLinks).toEqual([])
    expect(mod2.inLinks).toEqual([mod1.index])
    expect(mod3.inLinks).toEqual([mod2.index])
    expect(mod4.inLinks).toEqual([mod3.index])
    expect(mod1.inLinkSlots).toEqual([])
    expect(mod2.inLinkSlots).toEqual([0])
    expect(mod3.inLinkSlots).toEqual([0])
    expect(mod4.inLinkSlots).toEqual([0])
    expect(mod1.outLinks).toEqual([mod2.index])
    expect(mod2.outLinks).toEqual([mod3.index])
    expect(mod3.outLinks).toEqual([mod4.index])
    expect(mod4.outLinks).toEqual([])
    expect(mod1.outLinkSlots).toEqual([0])
    expect(mod2.outLinkSlots).toEqual([0])
    expect(mod3.outLinkSlots).toEqual([0])
    expect(mod4.outLinkSlots).toEqual([])
  })
  test("linkFrom module-modules", () => {
    const result = mod1.linkFrom([mod2, mod3, mod4])
    expect(result).toBeInstanceOf(Linkables)
    expect((result as Linkables).members).toEqual([mod2, mod3, mod4])
    expect(mod1.inLinks).toEqual([mod2.index, mod3.index, mod4.index])
    expect(mod2.inLinks).toEqual([])
    expect(mod3.inLinks).toEqual([])
    expect(mod4.inLinks).toEqual([])
    // expect(mod1.inLinkSlots).toEqual([0, 1, 2])
    expect(mod2.inLinkSlots).toEqual([])
    expect(mod3.inLinkSlots).toEqual([])
    expect(mod4.inLinkSlots).toEqual([])
    expect(mod1.outLinks).toEqual([])
    expect(mod2.outLinks).toEqual([mod1.index])
    expect(mod3.outLinks).toEqual([mod1.index])
    expect(mod4.outLinks).toEqual([mod1.index])
    expect(mod1.outLinkSlots).toEqual([])
    expect(mod2.outLinkSlots).toEqual([0])
    expect(mod3.outLinkSlots).toEqual([1])
    expect(mod4.outLinkSlots).toEqual([2])
  })
  test("linkTo module-modules", () => {
    const result = mod1.linkTo([mod2, mod3, mod4])
    expect(result).toBeInstanceOf(Linkables)
    expect((result as Linkables).members).toEqual([mod2, mod3, mod4])
    expect(mod1.inLinks).toEqual([])
    expect(mod2.inLinks).toEqual([mod1.index])
    expect(mod3.inLinks).toEqual([mod1.index])
    expect(mod4.inLinks).toEqual([mod1.index])
    expect(mod1.inLinkSlots).toEqual([])
    expect(mod2.inLinkSlots).toEqual([0])
    expect(mod3.inLinkSlots).toEqual([1])
    expect(mod4.inLinkSlots).toEqual([2])
    expect(mod1.outLinks).toEqual([mod2.index, mod3.index, mod4.index])
    expect(mod2.outLinks).toEqual([])
    expect(mod3.outLinks).toEqual([])
    expect(mod4.outLinks).toEqual([])
    expect(mod1.outLinkSlots).toEqual([0, 0, 0])
    expect(mod2.outLinkSlots).toEqual([])
    expect(mod3.outLinkSlots).toEqual([])
    expect(mod4.outLinkSlots).toEqual([])
  })
  test("linkFrom modules-modules", () => {
    mod1.linkFrom([mod2, mod3]).linkFrom(mod4)
    expect(mod1.inLinks).toEqual([mod2.index, mod3.index])
    expect(mod2.inLinks).toEqual([mod4.index])
    expect(mod3.inLinks).toEqual([mod4.index])
    expect(mod4.inLinks).toEqual([])
    expect(mod1.inLinkSlots).toEqual([0, 0])
    expect(mod2.inLinkSlots).toEqual([0])
    expect(mod3.inLinkSlots).toEqual([1])
    expect(mod4.inLinkSlots).toEqual([])
    expect(mod1.outLinks).toEqual([])
    expect(mod2.outLinks).toEqual([mod1.index])
    expect(mod3.outLinks).toEqual([mod1.index])
    expect(mod4.outLinks).toEqual([mod2.index, mod3.index])
    expect(mod1.outLinkSlots).toEqual([])
    expect(mod2.outLinkSlots).toEqual([0])
    expect(mod3.outLinkSlots).toEqual([1])
    expect(mod4.outLinkSlots).toEqual([0, 0])
  })
  test("linkFrom and linkTo", () => {
    mod1.linkFrom([mod2, mod3]).linkTo(mod4)
    expect(mod1.inLinks).toEqual([mod2.index, mod3.index])
    expect(mod2.inLinks).toEqual([])
    expect(mod3.inLinks).toEqual([])
    expect(mod4.inLinks).toEqual([mod2.index, mod3.index])
    expect(mod1.inLinkSlots).toEqual([0, 0])
    expect(mod2.inLinkSlots).toEqual([])
    expect(mod3.inLinkSlots).toEqual([])
    expect(mod4.inLinkSlots).toEqual([1, 1])
    expect(mod1.outLinks).toEqual([])
    expect(mod2.outLinks).toEqual([mod1.index, mod4.index])
    expect(mod3.outLinks).toEqual([mod1.index, mod4.index])
    expect(mod4.outLinks).toEqual([])
    expect(mod1.outLinkSlots).toEqual([])
    expect(mod2.outLinkSlots).toEqual([0, 0])
    expect(mod3.outLinkSlots).toEqual([1, 1])
    expect(mod4.outLinkSlots).toEqual([])
  })
})
